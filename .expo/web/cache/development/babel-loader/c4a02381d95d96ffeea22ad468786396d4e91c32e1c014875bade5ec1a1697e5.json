{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nimport { createJournalEntry } from \"./journalService\";\nexport var getUserPoints = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('users').select('points').eq('id', userId).maybeSingle(),\n        data = _yield$supabase$from$.data,\n        error = _yield$supabase$from$.error;\n      if (error) throw error;\n      return (data == null ? void 0 : data.points) || 0;\n    } catch (error) {\n      console.error('Error obteniendo puntos del usuario:', error);\n      return 0;\n    }\n  });\n  return function getUserPoints(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addPointsToUser = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, points) {\n    try {\n      var currentPoints = yield getUserPoints(userId);\n      var _yield$supabase$from$2 = yield supabase.from('users').update({\n          points: currentPoints + points,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId),\n        error = _yield$supabase$from$2.error;\n      if (error) throw error;\n      return currentPoints + points;\n    } catch (error) {\n      console.error('Error añadiendo puntos al usuario:', error);\n      throw error;\n    }\n  });\n  return function addPointsToUser(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var completeMission = function () {\n  var _ref3 = _asyncToGenerator(function* (missionId, userId, imageUrl) {\n    try {\n      var _yield$supabase$from$3 = yield supabase.from('journeys_missions').select(`\n                id,\n                journeyId,\n                challenge:challenges (\n                    id,\n                    title,\n                    description,\n                    points\n                )\n            `).eq('id', missionId).single(),\n        missionData = _yield$supabase$from$3.data,\n        missionError = _yield$supabase$from$3.error;\n      if (missionError) throw missionError;\n      try {\n        var _yield$supabase$rpc = yield supabase.rpc('get_table_columns', {\n            table_name: 'journeys_missions'\n          }),\n          columnInfo = _yield$supabase$rpc.data,\n          columnError = _yield$supabase$rpc.error;\n        var hasPhotoUrl = columnInfo == null ? void 0 : columnInfo.some(function (col) {\n          return col === 'photo_url';\n        });\n        var hasPictureUrl = columnInfo == null ? void 0 : columnInfo.some(function (col) {\n          return col === 'picture_url';\n        });\n        var updateData = {\n          completed: true,\n          completed_at: new Date().toISOString()\n        };\n        if (imageUrl) {\n          if (hasPictureUrl) {\n            updateData.picture_url = imageUrl;\n          } else if (hasPhotoUrl) {\n            updateData.photo_url = imageUrl;\n          }\n        }\n        var _yield$supabase$from$4 = yield supabase.from('journeys_missions').update(updateData).eq('id', missionId),\n          updateError = _yield$supabase$from$4.error;\n        if (updateError) throw updateError;\n      } catch (error) {\n        if (error.message && (error.message.includes('picture_url') || error.message.includes('photo_url') || error.message.includes('column'))) {\n          console.warn('Error con la columna de imagen pero continuando');\n        } else {\n          throw error;\n        }\n      }\n      var points = missionData.challenge.points;\n      yield addPointsToUser(userId, points);\n      if (imageUrl) {\n        try {\n          var _journeyData$cities, _journeyData$cities$n;\n          var _yield$supabase$from$5 = yield supabase.from('journeys').select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `).eq('id', missionData.journeyId).single(),\n            journeyData = _yield$supabase$from$5.data,\n            journeyError = _yield$supabase$from$5.error;\n          if (journeyError) {\n            console.warn('Error obteniendo datos de journey:', journeyError);\n            return points;\n          }\n          yield createJournalEntry({\n            userId: userId,\n            cityId: journeyData.cityId,\n            missionId: missionId,\n            title: missionData.challenge.title,\n            content: `Misión completada: ${missionData.challenge.description}`,\n            photos: [imageUrl],\n            tags: ['misión', ((_journeyData$cities = journeyData.cities) == null ? void 0 : (_journeyData$cities$n = _journeyData$cities.name) == null ? void 0 : _journeyData$cities$n.toLowerCase()) || 'ciudad']\n          });\n        } catch (err) {\n          console.warn('Error en el proceso de creación del diario, pero la misión ha sido completada');\n        }\n      }\n      return points;\n    } catch (error) {\n      console.error('Error completando la misión:', error);\n      throw error;\n    }\n  });\n  return function completeMission(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","createJournalEntry","getUserPoints","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","maybeSingle","data","error","points","console","_x","apply","arguments","addPointsToUser","_ref2","currentPoints","_yield$supabase$from$2","update","updated_at","Date","toISOString","_x2","_x3","completeMission","_ref3","missionId","imageUrl","_yield$supabase$from$3","single","missionData","missionError","_yield$supabase$rpc","rpc","table_name","columnInfo","columnError","hasPhotoUrl","some","col","hasPictureUrl","updateData","completed","completed_at","picture_url","photo_url","_yield$supabase$from$4","updateError","message","includes","warn","challenge","_journeyData$cities","_journeyData$cities$n","_yield$supabase$from$5","journeyId","journeyData","journeyError","cityId","title","content","description","photos","tags","cities","name","toLowerCase","err","_x4","_x5","_x6"],"sources":["C:/Users/migue/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { createJournalEntry } from './journalService';\n\nexport const getUserPoints = async (userId: string) => {\n    try {\n        const { data, error } = await supabase\n            .from('users')\n            .select('points')\n            .eq('id', userId)\n            .maybeSingle();\n\n        if (error) throw error;\n\n        return data?.points || 0;\n    } catch (error) {\n        console.error('Error obteniendo puntos del usuario:', error);\n        return 0; // Retornamos 0 en caso de error\n    }\n};\n\nexport const addPointsToUser = async (userId: string, points: number) => {\n    try {\n        // Primero obtenemos los puntos actuales\n        const currentPoints = await getUserPoints(userId);\n\n        // Actualizamos los puntos\n        const { error } = await supabase\n            .from('users')\n            .update({\n                points: currentPoints + points,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', userId);\n\n        if (error) throw error;\n\n        return currentPoints + points;\n    } catch (error) {\n        console.error('Error añadiendo puntos al usuario:', error);\n        throw error;\n    }\n};\n\nexport const completeMission = async (missionId: string, userId: string, imageUrl?: string) => {\n    try {\n        // Primero obtenemos los datos de la misión\n        const { data: missionData, error: missionError } = await supabase\n            .from('journeys_missions')\n            .select(`\n                id,\n                journeyId,\n                challenge:challenges (\n                    id,\n                    title,\n                    description,\n                    points\n                )\n            `)\n            .eq('id', missionId)\n            .single();\n\n        if (missionError) throw missionError;\n\n        // Marcar la misión como completada\n        try {\n            // Primero verificar qué columnas están disponibles\n            const { data: columnInfo, error: columnError } = await supabase\n                .rpc('get_table_columns', { table_name: 'journeys_missions' });\n                \n            // Columnas disponibles\n            const hasPhotoUrl = columnInfo?.some(col => col === 'photo_url');\n            const hasPictureUrl = columnInfo?.some(col => col === 'picture_url');\n            \n            let updateData: any = {\n                completed: true,\n                completed_at: new Date().toISOString()\n            };\n            \n            // Añadir la URL de la imagen a la columna correcta si existe\n            if (imageUrl) {\n                if (hasPictureUrl) {\n                    updateData.picture_url = imageUrl;\n                } else if (hasPhotoUrl) {\n                    updateData.photo_url = imageUrl;\n                }\n            }\n            \n            const { error: updateError } = await supabase\n                .from('journeys_missions')\n                .update(updateData)\n                .eq('id', missionId);\n\n            if (updateError) throw updateError;\n            \n        } catch (error: any) {\n            // Si hay un error específico con las columnas, intentamos de nuevo\n            if (error.message && \n                (error.message.includes('picture_url') || \n                 error.message.includes('photo_url') ||\n                 error.message.includes('column'))) {\n                console.warn('Error con la columna de imagen pero continuando');\n            } else {\n                throw error;\n            }\n        }\n\n        // Añadir los puntos al usuario\n        const points = missionData.challenge.points;\n        await addPointsToUser(userId, points);\n\n        // Si hay una imagen, crear entrada en el diario llamando a la función mejorada\n        if (imageUrl) {\n            try {\n                // Obtener información de la ciudad\n                const { data: journeyData, error: journeyError } = await supabase\n                    .from('journeys')\n                    .select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `)\n                    .eq('id', missionData.journeyId)\n                    .single();\n\n                if (journeyError) {\n                    console.warn('Error obteniendo datos de journey:', journeyError);\n                    return points; // Retornamos puntos y no creamos entrada en el diario\n                }\n\n                // Crear entrada usando el nuevo servicio\n                await createJournalEntry({\n                    userId,\n                    cityId: journeyData.cityId,\n                    missionId,\n                    title: missionData.challenge.title,\n                    content: `Misión completada: ${missionData.challenge.description}`,\n                    photos: [imageUrl],\n                    tags: ['misión', journeyData.cities?.name?.toLowerCase() || 'ciudad']\n                });\n                \n            } catch (err) {\n                console.warn('Error en el proceso de creación del diario, pero la misión ha sido completada');\n            }\n        }\n\n        return points;\n    } catch (error) {\n        console.error('Error completando la misión:', error);\n        throw error;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
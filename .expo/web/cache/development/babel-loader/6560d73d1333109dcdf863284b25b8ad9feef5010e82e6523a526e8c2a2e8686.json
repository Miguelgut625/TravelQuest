{"ast":null,"code":"import Linking from \"react-native-web/dist/exports/Linking\";\nexport const linking = {\n  prefixes: ['travelquest://', 'https://travelquest.com'],\n  config: {\n    screens: {\n      ResetPassword: {\n        path: 'reset-password',\n        parse: () => ({})\n      },\n      Login: 'login',\n      Register: 'register',\n      Main: {\n        screens: {\n          Map: 'map',\n          Missions: 'missions',\n          Journal: 'journal',\n          Profile: 'profile'\n        }\n      }\n    }\n  },\n  async getInitialURL() {\n    const url = await Linking.getInitialURL();\n    if (url != null) {\n      if (url.includes('type=recovery')) {\n        return 'travelquest://reset-password';\n      }\n      return url;\n    }\n    return null;\n  },\n  subscribe(listener) {\n    const onReceiveURL = ({\n      url\n    }) => {\n      if (url.includes('type=recovery')) {\n        listener('travelquest://reset-password');\n      } else {\n        listener(url);\n      }\n    };\n    const subscription = Linking.addEventListener('url', onReceiveURL);\n    return () => {\n      subscription.remove();\n    };\n  }\n};","map":{"version":3,"names":["linking","prefixes","config","screens","ResetPassword","path","parse","Login","Register","Main","Map","Missions","Journal","Profile","getInitialURL","url","Linking","includes","subscribe","listener","onReceiveURL","subscription","addEventListener","remove"],"sources":["C:/Users/PC/TravelQuest/src/navigation/linking.ts"],"sourcesContent":["import { Linking } from 'react-native';\r\n\r\nexport const linking = {\r\n    prefixes: ['travelquest://', 'https://travelquest.com'],\r\n    config: {\r\n        screens: {\r\n            ResetPassword: {\r\n                path: 'reset-password',\r\n                parse: () => ({})\r\n            },\r\n            Login: 'login',\r\n            Register: 'register',\r\n            Main: {\r\n                screens: {\r\n                    Map: 'map',\r\n                    Missions: 'missions',\r\n                    Journal: 'journal',\r\n                    Profile: 'profile',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    async getInitialURL() {\r\n        const url = await Linking.getInitialURL();\r\n        if (url != null) {\r\n            // Si la URL contiene un token de recuperaci칩n de contrase침a\r\n            if (url.includes('type=recovery')) {\r\n                return 'travelquest://reset-password';\r\n            }\r\n            return url;\r\n        }\r\n        return null;\r\n    },\r\n    subscribe(listener: (url: string) => void) {\r\n        const onReceiveURL = ({ url }: { url: string }) => {\r\n            // Si la URL contiene un token de recuperaci칩n de contrase침a\r\n            if (url.includes('type=recovery')) {\r\n                listener('travelquest://reset-password');\r\n            } else {\r\n                listener(url);\r\n            }\r\n        };\r\n        const subscription = Linking.addEventListener('url', onReceiveURL);\r\n        return () => {\r\n            subscription.remove();\r\n        };\r\n    },\r\n}; "],"mappings":";AAEA,OAAO,MAAMA,OAAO,GAAG;EACnBC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,yBAAyB,CAAC;EACvDC,MAAM,EAAE;IACJC,OAAO,EAAE;MACLC,aAAa,EAAE;QACXC,IAAI,EAAE,gBAAgB;QACtBC,KAAK,EAAEA,CAAA,MAAO,CAAC,CAAC;MACpB,CAAC;MACDC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,UAAU;MACpBC,IAAI,EAAE;QACFN,OAAO,EAAE;UACLO,GAAG,EAAE,KAAK;UACVC,QAAQ,EAAE,UAAU;UACpBC,OAAO,EAAE,SAAS;UAClBC,OAAO,EAAE;QACb;MACJ;IACJ;EACJ,CAAC;EACD,MAAMC,aAAaA,CAAA,EAAG;IAClB,MAAMC,GAAG,GAAG,MAAMC,OAAO,CAACF,aAAa,CAAC,CAAC;IACzC,IAAIC,GAAG,IAAI,IAAI,EAAE;MAEb,IAAIA,GAAG,CAACE,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC/B,OAAO,8BAA8B;MACzC;MACA,OAAOF,GAAG;IACd;IACA,OAAO,IAAI;EACf,CAAC;EACDG,SAASA,CAACC,QAA+B,EAAE;IACvC,MAAMC,YAAY,GAAGA,CAAC;MAAEL;IAAqB,CAAC,KAAK;MAE/C,IAAIA,GAAG,CAACE,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC/BE,QAAQ,CAAC,8BAA8B,CAAC;MAC5C,CAAC,MAAM;QACHA,QAAQ,CAACJ,GAAG,CAAC;MACjB;IACJ,CAAC;IACD,MAAMM,YAAY,GAAGL,OAAO,CAACM,gBAAgB,CAAC,KAAK,EAAEF,YAAY,CAAC;IAClE,OAAO,MAAM;MACTC,YAAY,CAACE,MAAM,CAAC,CAAC;IACzB,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
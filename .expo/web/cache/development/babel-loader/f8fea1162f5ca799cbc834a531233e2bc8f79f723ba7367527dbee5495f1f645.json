{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\TravelQuest\\\\src\\\\components\\\\GlobeView.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport WebView from 'react-native-webview';\nimport FallbackGlobeView from './FallbackGlobeView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USE_FALLBACK = false;\nconst TIMEOUT_SECONDS = 120;\nconst GlobeView = props => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [useFallbackView, setUseFallbackView] = useState(USE_FALLBACK);\n  const webViewRef = useRef(null);\n  const loadTimeoutRef = useRef(null);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const cesiumContainerRef = useRef(null);\n  useEffect(() => {\n    if (!useFallbackView && Platform.OS !== 'web') {\n      const progressInterval = setInterval(() => {\n        setLoadingProgress(prev => {\n          const nextProgress = prev + 1;\n          return nextProgress > 95 ? 95 : nextProgress;\n        });\n      }, TIMEOUT_SECONDS * 1000 / 100);\n      loadTimeoutRef.current = setTimeout(() => {\n        console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\n        setUseFallbackView(true);\n        clearInterval(progressInterval);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => {\n        if (loadTimeoutRef.current) {\n          clearTimeout(loadTimeoutRef.current);\n        }\n        clearInterval(progressInterval);\n      };\n    }\n    return undefined;\n  }, [useFallbackView]);\n  const handleError = errorMsg => {\n    if (errorMsg.includes('importScripts') || errorMsg.includes('WorkerGlobalScope') || errorMsg.includes('transferTypedArrayTest') || errorMsg.includes('createVerticesFromHeightmap')) {\n      console.warn('Ignorando error no crítico de Web Worker:', errorMsg);\n      return;\n    }\n    console.error('Error en GlobeView:', errorMsg);\n    setError(errorMsg);\n    setTimeout(() => {\n      setUseFallbackView(true);\n    }, 1000);\n  };\n  const retryCesium = () => {\n    setUseFallbackView(false);\n    setLoading(true);\n    setError(null);\n    setLoadingProgress(0);\n    if (loadTimeoutRef.current) {\n      clearTimeout(loadTimeoutRef.current);\n    }\n    loadTimeoutRef.current = setTimeout(() => {\n      console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\n      setUseFallbackView(true);\n    }, TIMEOUT_SECONDS * 1000);\n  };\n  if (Platform.OS === 'web') {\n    return _jsxDEV(View, {\n      style: [styles.container, props.style],\n      children: _jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        id: \"cesiumContainer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n  if (useFallbackView) {\n    return _jsxDEV(View, {\n      style: [styles.container, props.style],\n      children: [_jsxDEV(FallbackGlobeView, {\n        style: props.style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.fallbackButtonContainer,\n        children: _jsxDEV(TouchableOpacity, {\n          style: styles.retryButton,\n          onPress: retryCesium,\n          children: _jsxDEV(Text, {\n            style: styles.retryButtonText,\n            children: \"Intentar cargar mapa 3D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n  const htmlContent = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n      <title>Cesium Globe</title>\n      <style>\n        html, body {\n          width: 100%;\n          height: 100%;\n          margin: 0;\n          padding: 0;\n          overflow: hidden;\n          background-color: black;\n          touch-action: manipulation;\n          position: fixed;\n        }\n        #cesiumContainer {\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          left: 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .cesium-widget-credits, .cesium-viewer-bottom, .cesium-viewer-toolbar {\n          display: none !important;\n        }\n        .loading-overlay {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0,0,0,0.8);\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          color: white;\n          font-family: Arial, sans-serif;\n        }\n        .loading-indicator {\n          text-align: center;\n        }\n        .loading-spinner {\n          width: 40px;\n          height: 40px;\n          border: 4px solid rgba(255,255,255,0.3);\n          border-radius: 50%;\n          border-top-color: #4CAF50;\n          animation: spin 1s linear infinite;\n          margin: 0 auto 15px;\n        }\n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        .instructions {\n          position: absolute;\n          bottom: 20px;\n          left: 0;\n          right: 0;\n          text-align: center;\n          color: white;\n          background-color: rgba(0,0,0,0.6);\n          padding: 10px;\n          font-family: Arial, sans-serif;\n          z-index: 100;\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"cesiumContainer\">\n        <div id=\"cesiumDebugInfo\" style=\"\n          position: absolute; \n          bottom: 10px; \n          right: 10px; \n          color: white; \n          background-color: rgba(0,0,0,0.5); \n          padding: 5px;\n          z-index: 1000;\n          max-height: 100px;\n          overflow: auto;\n          font-size: 12px;\n        \">Esperando rotación...</div>\n      </div>\n      <div id=\"loadingOverlay\" class=\"loading-overlay\">\n        <div class=\"loading-indicator\">\n          <div class=\"loading-spinner\"></div>\n          <div>Cargando globo terráqueo...</div>\n          <div id=\"loading-progress\" style=\"margin-top: 10px; font-size: 12px;\">Iniciando...</div>\n        </div>\n      </div>\n      <div class=\"instructions\">\n        • Desliza para rotar manualmente<br>\n        • Pellizca para hacer zoom<br>\n        • Toca para detener la rotación\n      </div>\n      \n      <script>\n        // Configurar base URL para Cesium ANTES de cargar la biblioteca\n        window.CESIUM_BASE_URL = 'https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/';\n        \n        // Variable para controlar el nivel de detalle según el rendimiento\n        let isLowPerformanceDevice = false;\n        \n        // Detectar rendimiento del dispositivo\n        try {\n          const canvas = document.createElement('canvas');\n          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n          \n          if (!gl) {\n            isLowPerformanceDevice = true;\n          } else {\n            // Verificar capacidades básicas\n            const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n            \n            // Si las capacidades son limitadas, considerarlo dispositivo de rendimiento bajo\n            if (maxTextureSize < 4096 || maxTextureUnits < 8) {\n              isLowPerformanceDevice = true;\n            }\n          }\n        } catch(e) {\n          console.warn('Error detectando rendimiento del dispositivo:', e);\n          isLowPerformanceDevice = true; // Asumir bajo rendimiento por seguridad\n        }\n        \n        // Actualizar el progreso de carga\n        function updateProgress(text) {\n          document.getElementById('loading-progress').textContent = text;\n        }\n        \n        // Cargar scripts y estilos\n        function loadScript(url, callback) {\n          var script = document.createElement('script');\n          script.type = 'text/javascript';\n          script.src = url;\n          script.onload = callback;\n          script.onerror = function() {\n            window.ReactNativeWebView.postMessage('error:No se pudo cargar Cesium. Verifica tu conexión a Internet.');\n          };\n          document.head.appendChild(script);\n        }\n        \n        function loadStyles(url) {\n          var link = document.createElement('link');\n          link.rel = 'stylesheet';\n          link.href = url;\n          document.head.appendChild(link);\n        }\n\n        // Iniciar la carga de Cesium (versión 1.83 más compatible con WebView)\n        updateProgress('Descargando recursos...');\n        // Primero configuramos el entorno para evitar errores de workers\n        window.BUILD_WORKER = function(){return null;};\n        window.CESIUM_ON_WORKER_BOOT = function(){};\n        \n        // Cargamos una versión más antigua de Cesium que funciona mejor en WebView\n        loadScript('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Cesium.js', function() {\n          updateProgress('Cesium cargado. Inicializando...');\n          loadStyles('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Widgets/widgets.css');\n          \n          // Pequeño retraso para asegurar que Cesium esté listo\n          setTimeout(function() {\n            try {\n              initCesium();\n              \n              // Forzar una actualización del tamaño del canvas después de la inicialización\n              setTimeout(function() {\n                if (window.viewer) {\n                  // Llamar de nuevo a centerGlobe después de la carga para asegurar la posición\n                  if (typeof window.centerGlobe === 'function') {\n                    window.centerGlobe();\n                  }\n                  \n                  // Asegurar que el globo es visible\n                  window.viewer.scene.globe.show = true;\n                  \n                  // Forzar renderizado\n                  window.viewer.scene.requestRender();\n                }\n              }, 2000);\n            } catch(e) {\n              console.error('Error al inicializar Cesium:', e);\n              window.ReactNativeWebView.postMessage('error:' + e);\n            }\n          }, 500);\n        });\n        \n        function initCesium() {\n          try {\n            // Token de Cesium Ion\n            Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNmY5ZTNmZS1hMGRkLTQyZjQtYWQ1NS1lODYwZTcxNTRiMjMiLCJpZCI6MjAxNDM5LCJpYXQiOjE3MTMxODg0Njd9.ckUMa1Nb8MvXb2EYMy01bIPBOhrYmFbSw0RPiBP70oI';\n            \n            updateProgress('Creando visor...');\n            \n            // Desactivar Web Workers completamente para evitar los errores\n            Cesium.FeatureDetection.supportsWebWorkers = function() { return false; };\n            \n            // Inicialización del visor de Cesium con opciones simplificadas\n            const viewer = new Cesium.Viewer('cesiumContainer', {\n              animation: false,\n              baseLayerPicker: false,\n              fullscreenButton: false,\n              geocoder: false,\n              homeButton: false,\n              infoBox: false,\n              sceneModePicker: false,\n              selectionIndicator: false,\n              timeline: false,\n              navigationHelpButton: false,\n              navigationInstructionsInitiallyVisible: false,\n              scene3DOnly: true,\n              requestRenderMode: false, // Desactivar requestRenderMode para asegurar renderizado continuo\n              maximumRenderTimeChange: Infinity,\n              terrainProvider: new Cesium.EllipsoidTerrainProvider(), // Usar terreno simple desde el inicio\n              imageryProvider: false, // Sin imagen inicial, las añadiremos manualmente\n              contextOptions: {\n                webgl: {\n                  alpha: false, // Usar fondo opaco\n                  antialias: true, // Mejorar calidad visual\n                  failIfMajorPerformanceCaveat: false\n                }\n              }\n            });\n            \n            // Para depuración\n            window.viewer = viewer;\n            \n            // Habilitar información de depuración\n            viewer.extend(Cesium.viewerCesiumInspectorMixin, {});\n            viewer.cesiumInspector.container.style.display = 'none'; // Oculto por defecto\n            \n            // Forzar renderizado de frames incluso sin cambios\n            viewer.scene.requestRenderMode = false;\n            \n            // Ocultar créditos\n            viewer.cesiumWidget.creditContainer.style.display = 'none';\n            \n            // Depuración móvil (para ver qué está pasando)\n            const addDebugInfo = function() {\n              const debugDiv = document.createElement('div');\n              debugDiv.style.position = 'absolute';\n              debugDiv.style.top = '80px';\n              debugDiv.style.left = '10px';\n              debugDiv.style.color = 'white';\n              debugDiv.style.backgroundColor = 'rgba(0,0,0,0.5)';\n              debugDiv.style.padding = '5px';\n              debugDiv.style.zIndex = '1000';\n              debugDiv.style.fontSize = '10px';\n              debugDiv.style.maxWidth = '300px';\n              debugDiv.style.maxHeight = '200px';\n              debugDiv.style.overflow = 'auto';\n              debugDiv.id = 'cesiumDebugInfo';\n              document.body.appendChild(debugDiv);\n              \n              // Botón para alternar inspector\n              const toggleButton = document.createElement('button');\n              toggleButton.textContent = 'Inspector';\n              toggleButton.style.position = 'absolute';\n              toggleButton.style.top = '10px';\n              toggleButton.style.left = '10px';\n              toggleButton.style.zIndex = '1000';\n              toggleButton.onclick = function() {\n                const inspector = viewer.cesiumInspector.container;\n                inspector.style.display = inspector.style.display === 'none' ? 'block' : 'none';\n              };\n              document.body.appendChild(toggleButton);\n              \n              // Actualizar info de depuración\n              setInterval(function() {\n                if (!viewer || !viewer.scene) return;\n                const debugInfo = document.getElementById('cesiumDebugInfo');\n                if (!debugInfo) return;\n                \n                const gl = viewer.scene.context._gl;\n                const debugText = [\n                  'Globe visible: ' + viewer.scene.globe.show,\n                  'Globe base color: ' + viewer.scene.globe.baseColor.toString(),\n                  'Img layers: ' + viewer.imageryLayers.length,\n                  'Auto-rotación: ' + autoRotate,\n                  'FPS: ' + viewer.scene.frameState.frameNumber % 60,\n                  'GPU: ' + (gl ? gl.getParameter(gl.RENDERER) : 'unknown')\n                ].join('<br>');\n                \n                debugInfo.innerHTML = debugText;\n              }, 1000);\n            };\n            \n            // Activar depuración móvil\n            addDebugInfo();\n            \n            updateProgress('Aplicando configuración...');\n            \n            // Aplicar optimizaciones extremas para móviles\n            viewer.scene.fog.enabled = false;\n            viewer.scene.globe.maximumScreenSpaceError = isLowPerformanceDevice ? 12 : 8; \n            viewer.targetFrameRate = isLowPerformanceDevice ? 24 : 30;\n            viewer.resolutionScale = isLowPerformanceDevice ? 0.5 : 0.7;\n            \n            // Hacer visible el globo\n            viewer.scene.globe.show = true;\n            viewer.scene.globe.baseColor = Cesium.Color.BLUE;\n            viewer.scene.backgroundColor = Cesium.Color.BLACK;\n            \n            // Ajustar el tamaño y posición de la escena para centrar el globo\n            function centerGlobe() {\n              try {\n                // Forzar que el canvas tenga el tamaño correcto\n                const canvas = viewer.scene.canvas;\n                if (canvas) {\n                  canvas.width = window.innerWidth;\n                  canvas.height = window.innerHeight;\n                  canvas.style.width = '100%';\n                  canvas.style.height = '100%';\n                  \n                  // Actualizar la matriz de proyección\n                  viewer.scene.camera.frustum.aspectRatio = canvas.clientWidth / canvas.clientHeight;\n                }\n                \n                // Centrar la vista\n                viewer.scene.camera.lookAt(\n                  Cesium.Cartesian3.fromDegrees(0.0, 0.0, 0.0), // Mirar al centro\n                  new Cesium.Cartesian3(0.0, 0.0, 15000000.0)   // Distancia\n                );\n\n                // Forzar un repintado\n                viewer.scene.requestRender();\n              } catch (e) {\n                console.warn('Error al centrar el globo:', e);\n              }\n            }\n            \n            // Exponer la función globalmente\n            window.centerGlobe = centerGlobe;\n            \n            // Llamar a centrarlo inicialmente\n            centerGlobe();\n            \n            // Centrar cuando cambie el tamaño de la ventana\n            window.addEventListener('resize', centerGlobe);\n            \n            // Función para cargar textura directa si todo lo demás falla\n            function loadDirectTexture() {\n              updateProgress('Cargando textura directa...');\n              \n              // Intentar cargar una textura de la Tierra directamente\n              const earthTexture = new Image();\n              earthTexture.crossOrigin = 'anonymous';\n              earthTexture.onload = function() {\n                try {\n                  // Crear material con la textura\n                  const material = new Cesium.Material({\n                    fabric: {\n                      type: 'DiffuseMap',\n                      uniforms: {\n                        image: earthTexture\n                      }\n                    }\n                  });\n                  \n                  // Aplicar al globo\n                  viewer.scene.globe.material = material;\n                  updateProgress('Textura cargada con éxito');\n                } catch (e) {\n                  console.error('Error al aplicar textura:', e);\n                }\n              };\n              \n              earthTexture.onerror = function() {\n                console.error('Error al cargar la textura de la Tierra');\n              };\n              \n              // Usar una URL de imagen pública de la Tierra\n              earthTexture.src = 'https://eoimages.gsfc.nasa.gov/images/imagerecords/74000/74218/world.200412.3x5400x2700.jpg';\n            }\n            \n            // Desactivar efectos exigentes\n            viewer.scene.skyAtmosphere.show = false;\n            viewer.scene.globe.showGroundAtmosphere = false;\n            \n            updateProgress('Cargando imágenes...');\n            \n            // Usar mapas simplificados pero visibles\n            let imageLoadSuccess = false;\n            \n            try {\n              // Intentar usar mapas naturales de la Tierra\n              const naturalEarthII = new Cesium.TileMapServiceImageryProvider({\n                url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')\n              });\n              viewer.imageryLayers.addImageryProvider(naturalEarthII);\n              imageLoadSuccess = true;\n              \n              // Añadir capa de países/fronteras\n              try {\n                const countries = new Cesium.WebMapServiceImageryProvider({\n                  url: 'https://ahocevar.com/geoserver/wms',\n                  layers: 'ne:ne_10m_admin_0_countries',\n                  parameters: {\n                    transparent: 'true',\n                    format: 'image/png'\n                  }\n                });\n                viewer.imageryLayers.addImageryProvider(countries);\n              } catch (e) {\n                // No es crítico si esta capa falla\n                console.warn('Error cargando capa de países:', e);\n              }\n            } catch (e) {\n              console.warn('Error cargando mapas NaturalEarth:', e);\n              try {\n                // Alternativa: mapas de Ion\n                const ion = new Cesium.IonImageryProvider({ assetId: 3 });\n                viewer.imageryLayers.addImageryProvider(ion);\n                imageLoadSuccess = true;\n              } catch (e2) {\n                console.warn('Error cargando imágenes de Ion:', e2);\n                try {\n                  // Alternativa: mapas de Bing\n                  const bing = new Cesium.BingMapsImageryProvider({\n                    url: 'https://dev.virtualearth.net',\n                    key: 'AipIE-pEoKccx-kC8G3D-45V3hl9hZxC-5vSXbMamybYjvJTXvoOYT7QeMqvFMGQ',\n                    mapStyle: Cesium.BingMapsStyle.AERIAL\n                  });\n                  viewer.imageryLayers.addImageryProvider(bing);\n                  imageLoadSuccess = true;\n                } catch (e3) {\n                  console.error('Error cargando todas las opciones de imágenes:', e3);\n                  \n                  // Último recurso: cargar textura directamente\n                  loadDirectTexture();\n                }\n              }\n            }\n            \n            // Si después de todo no tenemos imágenes, cargar la textura directamente\n            if (!imageLoadSuccess && viewer.imageryLayers.length === 0) {\n              loadDirectTexture();\n            }\n            \n            updateProgress('Configurando cámara...');\n            \n            // Configurar la cámara para una vista más centrada\n            viewer.camera.flyTo({\n              destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\n              orientation: {\n                heading: Cesium.Math.toRadians(0.0),\n                pitch: Cesium.Math.toRadians(-90.0), // Vista desde arriba para centrar\n                roll: 0.0\n              },\n              duration: 1.0,\n              complete: function() {\n                updateProgress('Activando características...');\n                \n                // Activar rotación automática\n                startAutoRotation();\n                \n                // Informar que la carga básica está completa\n                window.ReactNativeWebView.postMessage('loaded');\n                \n                // Ocultar overlay de carga\n                document.getElementById('loadingOverlay').style.display = 'none';\n              }\n            });\n            \n            // Configurar interacción para móviles\n            viewer.scene.screenSpaceCameraController.minimumZoomDistance = 1000000;\n            viewer.scene.screenSpaceCameraController.maximumZoomDistance = 25000000;\n            \n            // Configurar rotación automática\n            let autoRotate = true;\n            const rotationAxis = new Cesium.Cartesian3(0, 0, 1); // Eje Z (vertical)\n            let lastTime = Date.now();\n            \n            function startAutoRotation() {\n              // Detener cualquier rotación anterior si existe\n              if (window.rotationInterval) {\n                clearInterval(window.rotationInterval);\n              }\n              \n              // Crear una función de animación basada en intervalos para mayor fiabilidad\n              window.rotationInterval = setInterval(function() {\n                if (!autoRotate) return;\n                \n                try {\n                  // Rotar alrededor del eje Z\n                  const now = Date.now();\n                  const deltaTime = now - lastTime;\n                  lastTime = now;\n                  \n                  // Rotar con una velocidad fija, sin depender del tiempo para mayor estabilidad\n                  const rotationAngle = Cesium.Math.toRadians(0.1); // 0.1 grados por frame\n                  \n                  // Guardar la posición actual\n                  const currentPosition = Cesium.Cartesian3.clone(viewer.camera.position);\n                  const currentUp = Cesium.Cartesian3.clone(viewer.camera.up);\n                  const center = new Cesium.Cartesian3(0, 0, 0); // Centro de la Tierra\n                  \n                  // Aplicar rotación\n                  viewer.camera.rotate(rotationAxis, rotationAngle);\n                  \n                  // Asegurar que la cámara sigue mirando hacia el centro\n                  viewer.camera.lookAt(\n                    center,\n                    new Cesium.Cartesian3(0, 0, Cesium.Cartesian3.magnitude(currentPosition))\n                  );\n                  \n                  // Forzar renderizado\n                  viewer.scene.requestRender();\n                  \n                  // Log para depuración\n                  const debugDiv = document.getElementById('cesiumDebugInfo');\n                  if (debugDiv) {\n                    debugDiv.innerHTML += '<br>Rotando...';\n                  }\n                } catch (e) {\n                  console.error('Error en rotación:', e);\n                }\n              }, 50); // Actualizar cada 50ms para una rotación suave\n            }\n            \n            // Timeout para verificar si realmente tenemos un globo visible\n            setTimeout(function() {\n              // Verificar si tenemos capas de imagen o si el globo está visible\n              if ((viewer.imageryLayers.length === 0 || !viewer.scene.globe.show) && \n                  document.getElementById('loadingOverlay').style.display !== 'none') {\n                \n                console.warn('No se ha detectado un globo visible, aplicando soluciones de respaldo');\n                \n                // Asegurar que el globo es visible\n                viewer.scene.globe.show = true;\n                \n                // Usar color azul y cargar textura directa\n                viewer.scene.globe.baseColor = Cesium.Color.BLUE;\n                loadDirectTexture();\n                \n                // Ocultar overlay después de intentarlo todo\n                setTimeout(function() {\n                  document.getElementById('loadingOverlay').style.display = 'none';\n                  window.ReactNativeWebView.postMessage('loaded');\n                }, 3000);\n              }\n            }, 10000);\n            \n            // Manejar interacción del usuario\n            let touchStarted = false;\n            \n            viewer.screenSpaceEventHandler.setInputAction(function() {\n              autoRotate = false;\n              touchStarted = true;\n              \n              // Agregar evento de debug al tocar\n              const debugDiv = document.getElementById('cesiumDebugInfo');\n              if (debugDiv) {\n                debugDiv.innerHTML += '<br>Touch detected!<br>Globe: ' + viewer.scene.globe.show;\n              }\n            }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n            \n            viewer.screenSpaceEventHandler.setInputAction(function() {\n              touchStarted = false;\n              setTimeout(function() {\n                if (!touchStarted) {\n                  autoRotate = true;\n                  lastTime = Date.now();\n                  startAutoRotation();\n                }\n              }, 3000);\n            }, Cesium.ScreenSpaceEventType.LEFT_UP);\n            \n            // Botón de reset visible para emergencias\n            const resetButton = document.createElement('button');\n            resetButton.textContent = 'Reset View';\n            resetButton.style.position = 'absolute';\n            resetButton.style.bottom = '80px';\n            resetButton.style.right = '10px';\n            resetButton.style.zIndex = '1000';\n            resetButton.style.padding = '8px';\n            resetButton.onclick = function() {\n              // Reiniciar vista con configuración centrada\n              viewer.camera.flyTo({\n                destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\n                orientation: {\n                  heading: Cesium.Math.toRadians(0.0),\n                  pitch: Cesium.Math.toRadians(-90.0),\n                  roll: 0.0\n                },\n                duration: 1.0\n              });\n            };\n            document.body.appendChild(resetButton);\n            \n            // Botón para centrar el globo\n            const centerButton = document.createElement('button');\n            centerButton.textContent = 'Centrar Globo';\n            centerButton.style.position = 'absolute';\n            centerButton.style.bottom = '120px';\n            centerButton.style.right = '10px';\n            centerButton.style.zIndex = '1000';\n            centerButton.style.padding = '8px';\n            centerButton.onclick = function() {\n              // Llamar a la función de centrado\n              centerGlobe();\n            };\n            document.body.appendChild(centerButton);\n          } catch (error) {\n            console.error('Error al inicializar Cesium:', error);\n            window.ReactNativeWebView.postMessage('error:' + error);\n          }\n        }\n        \n        // Timeout de seguridad para asegurar que se muestra algo\n        setTimeout(function() {\n          if (document.getElementById('loadingOverlay').style.display !== 'none') {\n            updateProgress('Carga completa (timeout)');\n            document.getElementById('loadingOverlay').style.display = 'none';\n            window.ReactNativeWebView.postMessage('loaded');\n          }\n        }, 30000);\n        \n        // Manejo de errores global\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error('Error:', message);\n          // Solo reportar errores significativos que no sean de workers\n          if (!message.includes('Worker') && !message.includes('importScripts')) {\n            window.ReactNativeWebView.postMessage('error:' + message);\n          }\n          return true;\n        };\n      </script>\n    </body>\n    </html>\n  `;\n  return _jsxDEV(View, {\n    style: [styles.container, props.style],\n    children: [!useFallbackView && _jsxDEV(WebView, {\n      ref: webViewRef,\n      style: styles.webview,\n      originWhitelist: ['*'],\n      source: {\n        html: htmlContent\n      },\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      allowFileAccess: true,\n      allowUniversalAccessFromFileURLs: true,\n      allowFileAccessFromFileURLs: true,\n      cacheEnabled: true,\n      javaScriptCanOpenWindowsAutomatically: true,\n      scrollEnabled: false,\n      bounces: false,\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      onShouldStartLoadWithRequest: () => true,\n      startInLoadingState: true,\n      renderLoading: () => _jsxDEV(View, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 32\n      }, this),\n      onMessage: event => {\n        const message = event.nativeEvent.data;\n        if (message === 'loaded') {\n          console.log('Cesium cargado correctamente');\n          setLoading(false);\n          setLoadingProgress(100);\n          if (loadTimeoutRef.current) {\n            clearTimeout(loadTimeoutRef.current);\n          }\n        } else if (message.startsWith('error:')) {\n          console.error('Error en Cesium WebView:', message.substring(6));\n          setError(message.substring(6));\n          handleError(message.substring(6));\n        }\n      },\n      onError: syntheticEvent => {\n        const {\n          nativeEvent\n        } = syntheticEvent;\n        console.error('WebView error:', nativeEvent);\n        handleError(`WebView error: ${nativeEvent.description}`);\n      },\n      onHttpError: syntheticEvent => {\n        const {\n          nativeEvent\n        } = syntheticEvent;\n        console.error('WebView HTTP error:', nativeEvent);\n        handleError(`WebView HTTP error: ${nativeEvent.statusCode}`);\n      },\n      onContentProcessDidTerminate: () => {\n        console.warn('WebView process terminated, falling back to simple globe');\n        handleError('La visualización 3D se cerró inesperadamente');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 9\n    }, this), useFallbackView && _jsxDEV(FallbackGlobeView, {\n      style: props.style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 9\n    }, this), useFallbackView && _jsxDEV(View, {\n      style: styles.fallbackButtonContainer,\n      children: _jsxDEV(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: retryCesium,\n        children: _jsxDEV(Text, {\n          style: styles.retryButtonText,\n          children: \"Intentar cargar mapa 3D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 9\n    }, this), loading && !useFallbackView && _jsxDEV(View, {\n      style: styles.loadingContainer,\n      children: [_jsxDEV(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 11\n      }, this), _jsxDEV(Text, {\n        style: styles.loadingText,\n        children: [\"Cargando globo terr\\xE1queo (\", loadingProgress, \"%)...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 11\n      }, this), _jsxDEV(View, {\n        style: styles.progressBarContainer,\n        children: _jsxDEV(View, {\n          style: [styles.progressBar, {\n            width: `${loadingProgress}%`\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 9\n    }, this), error && !useFallbackView && _jsxDEV(View, {\n      style: styles.errorContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.errorText,\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 11\n      }, this), _jsxDEV(Text, {\n        style: styles.errorSubtext,\n        children: \"Cambiando a modo alternativo...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 840,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 758,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    position: 'relative'\n  },\n  webview: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  loadingContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  loadingText: {\n    color: '#fff',\n    marginTop: 10,\n    fontSize: 16\n  },\n  errorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  errorText: {\n    color: '#ff6b6b',\n    fontSize: 18,\n    marginBottom: 10,\n    textAlign: 'center'\n  },\n  errorSubtext: {\n    color: '#fff',\n    fontSize: 14,\n    textAlign: 'center'\n  },\n  fallbackButtonContainer: {\n    position: 'absolute',\n    top: 20,\n    right: 20,\n    zIndex: 1000\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  retryButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  progressBarContainer: {\n    height: 10,\n    width: 250,\n    backgroundColor: 'rgba(255,255,255,0.2)',\n    borderRadius: 5,\n    overflow: 'hidden',\n    marginTop: 15,\n    marginHorizontal: 20\n  },\n  progressBar: {\n    height: '100%',\n    backgroundColor: '#4CAF50',\n    borderRadius: 5\n  }\n});\nexport default GlobeView;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","StyleSheet","Text","ActivityIndicator","Platform","TouchableOpacity","WebView","FallbackGlobeView","jsxDEV","_jsxDEV","USE_FALLBACK","TIMEOUT_SECONDS","GlobeView","props","loading","setLoading","error","setError","useFallbackView","setUseFallbackView","webViewRef","loadTimeoutRef","loadingProgress","setLoadingProgress","cesiumContainerRef","OS","progressInterval","setInterval","prev","nextProgress","current","setTimeout","console","warn","clearInterval","clearTimeout","undefined","handleError","errorMsg","includes","retryCesium","style","styles","container","children","width","height","id","fileName","_jsxFileName","lineNumber","columnNumber","fallbackButtonContainer","retryButton","onPress","retryButtonText","htmlContent","ref","webview","originWhitelist","source","html","javaScriptEnabled","domStorageEnabled","allowFileAccess","allowUniversalAccessFromFileURLs","allowFileAccessFromFileURLs","cacheEnabled","javaScriptCanOpenWindowsAutomatically","scrollEnabled","bounces","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","onShouldStartLoadWithRequest","startInLoadingState","renderLoading","onMessage","event","message","nativeEvent","data","log","startsWith","substring","onError","syntheticEvent","description","onHttpError","statusCode","onContentProcessDidTerminate","loadingContainer","size","color","loadingText","progressBarContainer","progressBar","errorContainer","errorText","errorSubtext","create","flex","backgroundColor","position","top","left","right","bottom","justifyContent","alignItems","marginTop","fontSize","padding","marginBottom","textAlign","zIndex","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","fontWeight","overflow","marginHorizontal"],"sources":["C:/Users/migue/TravelQuest/src/components/GlobeView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, StyleSheet, Text, ActivityIndicator, Platform, Animated, Easing, Dimensions, PanResponder, TouchableOpacity } from 'react-native';\r\nimport WebView, { WebViewMessageEvent } from 'react-native-webview';\r\nimport FallbackGlobeView from './FallbackGlobeView';\r\n\r\n// Declaración de tipos para Cesium\r\ndeclare global {\r\n  interface Window {\r\n    Cesium: any;\r\n  }\r\n}\r\n\r\n// Bandera para usar el globo de respaldo si hay problemas con WebView\r\nconst USE_FALLBACK = false; // Intentaremos usar Cesium a través de WebView\r\nconst TIMEOUT_SECONDS = 120; // Aumentar tiempo de espera a 2 minutos para carga completa\r\n\r\nconst GlobeView = (props: { style?: any }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [useFallbackView, setUseFallbackView] = useState(USE_FALLBACK);\r\n  const webViewRef = useRef<WebView>(null);\r\n  const loadTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const [loadingProgress, setLoadingProgress] = useState(0);\r\n  const cesiumContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Efecto para configurar un timeout para cambiar a la vista de respaldo si tarda demasiado\r\n  useEffect(() => {\r\n    if (!useFallbackView && Platform.OS !== 'web') {\r\n      // Incrementar progreso artificial para mostrar actividad\r\n      const progressInterval = setInterval(() => {\r\n        setLoadingProgress(prev => {\r\n          const nextProgress = prev + 1;\r\n          return nextProgress > 95 ? 95 : nextProgress;\r\n        });\r\n      }, TIMEOUT_SECONDS * 1000 / 100);\r\n      \r\n      // Configurar timeout más largo\r\n      loadTimeoutRef.current = setTimeout(() => {\r\n        console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\r\n        setUseFallbackView(true);\r\n        clearInterval(progressInterval);\r\n      }, TIMEOUT_SECONDS * 1000); // 60 segundos de espera para cargar Cesium\r\n\r\n      return () => {\r\n        if (loadTimeoutRef.current) {\r\n          clearTimeout(loadTimeoutRef.current);\r\n        }\r\n        clearInterval(progressInterval);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [useFallbackView]);\r\n\r\n  // Función para manejar errores y cambiar a la vista de respaldo\r\n  const handleError = (errorMsg: string) => {\r\n    // Ignorar errores específicos de Web Workers que sabemos que no son críticos\r\n    if (\r\n      errorMsg.includes('importScripts') || \r\n      errorMsg.includes('WorkerGlobalScope') ||\r\n      errorMsg.includes('transferTypedArrayTest') ||\r\n      errorMsg.includes('createVerticesFromHeightmap')\r\n    ) {\r\n      console.warn('Ignorando error no crítico de Web Worker:', errorMsg);\r\n      return;\r\n    }\r\n    \r\n    console.error('Error en GlobeView:', errorMsg);\r\n    setError(errorMsg);\r\n    // Cambiar a la vista de respaldo después de un breve retraso\r\n    setTimeout(() => {\r\n      setUseFallbackView(true);\r\n    }, 1000);\r\n  };\r\n\r\n  // Función para reintentar cargar Cesium\r\n  const retryCesium = () => {\r\n    setUseFallbackView(false);\r\n    setLoading(true);\r\n    setError(null);\r\n    setLoadingProgress(0);\r\n    \r\n    // Configurar nuevo timeout\r\n    if (loadTimeoutRef.current) {\r\n      clearTimeout(loadTimeoutRef.current);\r\n    }\r\n    loadTimeoutRef.current = setTimeout(() => {\r\n      console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\r\n      setUseFallbackView(true);\r\n    }, TIMEOUT_SECONDS * 1000);\r\n  };\r\n\r\n  // Si estamos en web, usamos el componente Cesium directamente\r\n  if (Platform.OS === 'web') {\r\n    return (\r\n      <View style={[styles.container, props.style]}>\r\n        <div style={{ width: '100%', height: '100%' }} id=\"cesiumContainer\"></div>\r\n      </View>\r\n    );\r\n  }\r\n  \r\n  // Si hay problemas con WebView o estamos en modo fallback, usamos el globo alternativo\r\n  if (useFallbackView) {\r\n    return (\r\n      <View style={[styles.container, props.style]}>\r\n        <FallbackGlobeView style={props.style} />\r\n        <View style={styles.fallbackButtonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.retryButton}\r\n            onPress={retryCesium}\r\n          >\r\n            <Text style={styles.retryButtonText}>Intentar cargar mapa 3D</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // Crear versión optimizada del HTML para móviles con solución para errores de workers\r\n  const htmlContent = `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\r\n      <title>Cesium Globe</title>\r\n      <style>\r\n        html, body {\r\n          width: 100%;\r\n          height: 100%;\r\n          margin: 0;\r\n          padding: 0;\r\n          overflow: hidden;\r\n          background-color: black;\r\n          touch-action: manipulation;\r\n          position: fixed;\r\n        }\r\n        #cesiumContainer {\r\n          width: 100%;\r\n          height: 100%;\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n        .cesium-widget-credits, .cesium-viewer-bottom, .cesium-viewer-toolbar {\r\n          display: none !important;\r\n        }\r\n        .loading-overlay {\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgba(0,0,0,0.8);\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          z-index: 1000;\r\n          color: white;\r\n          font-family: Arial, sans-serif;\r\n        }\r\n        .loading-indicator {\r\n          text-align: center;\r\n        }\r\n        .loading-spinner {\r\n          width: 40px;\r\n          height: 40px;\r\n          border: 4px solid rgba(255,255,255,0.3);\r\n          border-radius: 50%;\r\n          border-top-color: #4CAF50;\r\n          animation: spin 1s linear infinite;\r\n          margin: 0 auto 15px;\r\n        }\r\n        @keyframes spin {\r\n          to { transform: rotate(360deg); }\r\n        }\r\n        .instructions {\r\n          position: absolute;\r\n          bottom: 20px;\r\n          left: 0;\r\n          right: 0;\r\n          text-align: center;\r\n          color: white;\r\n          background-color: rgba(0,0,0,0.6);\r\n          padding: 10px;\r\n          font-family: Arial, sans-serif;\r\n          z-index: 100;\r\n        }\r\n      </style>\r\n    </head>\r\n    <body>\r\n      <div id=\"cesiumContainer\">\r\n        <div id=\"cesiumDebugInfo\" style=\"\r\n          position: absolute; \r\n          bottom: 10px; \r\n          right: 10px; \r\n          color: white; \r\n          background-color: rgba(0,0,0,0.5); \r\n          padding: 5px;\r\n          z-index: 1000;\r\n          max-height: 100px;\r\n          overflow: auto;\r\n          font-size: 12px;\r\n        \">Esperando rotación...</div>\r\n      </div>\r\n      <div id=\"loadingOverlay\" class=\"loading-overlay\">\r\n        <div class=\"loading-indicator\">\r\n          <div class=\"loading-spinner\"></div>\r\n          <div>Cargando globo terráqueo...</div>\r\n          <div id=\"loading-progress\" style=\"margin-top: 10px; font-size: 12px;\">Iniciando...</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"instructions\">\r\n        • Desliza para rotar manualmente<br>\r\n        • Pellizca para hacer zoom<br>\r\n        • Toca para detener la rotación\r\n      </div>\r\n      \r\n      <script>\r\n        // Configurar base URL para Cesium ANTES de cargar la biblioteca\r\n        window.CESIUM_BASE_URL = 'https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/';\r\n        \r\n        // Variable para controlar el nivel de detalle según el rendimiento\r\n        let isLowPerformanceDevice = false;\r\n        \r\n        // Detectar rendimiento del dispositivo\r\n        try {\r\n          const canvas = document.createElement('canvas');\r\n          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n          \r\n          if (!gl) {\r\n            isLowPerformanceDevice = true;\r\n          } else {\r\n            // Verificar capacidades básicas\r\n            const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n            const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n            \r\n            // Si las capacidades son limitadas, considerarlo dispositivo de rendimiento bajo\r\n            if (maxTextureSize < 4096 || maxTextureUnits < 8) {\r\n              isLowPerformanceDevice = true;\r\n            }\r\n          }\r\n        } catch(e) {\r\n          console.warn('Error detectando rendimiento del dispositivo:', e);\r\n          isLowPerformanceDevice = true; // Asumir bajo rendimiento por seguridad\r\n        }\r\n        \r\n        // Actualizar el progreso de carga\r\n        function updateProgress(text) {\r\n          document.getElementById('loading-progress').textContent = text;\r\n        }\r\n        \r\n        // Cargar scripts y estilos\r\n        function loadScript(url, callback) {\r\n          var script = document.createElement('script');\r\n          script.type = 'text/javascript';\r\n          script.src = url;\r\n          script.onload = callback;\r\n          script.onerror = function() {\r\n            window.ReactNativeWebView.postMessage('error:No se pudo cargar Cesium. Verifica tu conexión a Internet.');\r\n          };\r\n          document.head.appendChild(script);\r\n        }\r\n        \r\n        function loadStyles(url) {\r\n          var link = document.createElement('link');\r\n          link.rel = 'stylesheet';\r\n          link.href = url;\r\n          document.head.appendChild(link);\r\n        }\r\n\r\n        // Iniciar la carga de Cesium (versión 1.83 más compatible con WebView)\r\n        updateProgress('Descargando recursos...');\r\n        // Primero configuramos el entorno para evitar errores de workers\r\n        window.BUILD_WORKER = function(){return null;};\r\n        window.CESIUM_ON_WORKER_BOOT = function(){};\r\n        \r\n        // Cargamos una versión más antigua de Cesium que funciona mejor en WebView\r\n        loadScript('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Cesium.js', function() {\r\n          updateProgress('Cesium cargado. Inicializando...');\r\n          loadStyles('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Widgets/widgets.css');\r\n          \r\n          // Pequeño retraso para asegurar que Cesium esté listo\r\n          setTimeout(function() {\r\n            try {\r\n              initCesium();\r\n              \r\n              // Forzar una actualización del tamaño del canvas después de la inicialización\r\n              setTimeout(function() {\r\n                if (window.viewer) {\r\n                  // Llamar de nuevo a centerGlobe después de la carga para asegurar la posición\r\n                  if (typeof window.centerGlobe === 'function') {\r\n                    window.centerGlobe();\r\n                  }\r\n                  \r\n                  // Asegurar que el globo es visible\r\n                  window.viewer.scene.globe.show = true;\r\n                  \r\n                  // Forzar renderizado\r\n                  window.viewer.scene.requestRender();\r\n                }\r\n              }, 2000);\r\n            } catch(e) {\r\n              console.error('Error al inicializar Cesium:', e);\r\n              window.ReactNativeWebView.postMessage('error:' + e);\r\n            }\r\n          }, 500);\r\n        });\r\n        \r\n        function initCesium() {\r\n          try {\r\n            // Token de Cesium Ion\r\n            Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNmY5ZTNmZS1hMGRkLTQyZjQtYWQ1NS1lODYwZTcxNTRiMjMiLCJpZCI6MjAxNDM5LCJpYXQiOjE3MTMxODg0Njd9.ckUMa1Nb8MvXb2EYMy01bIPBOhrYmFbSw0RPiBP70oI';\r\n            \r\n            updateProgress('Creando visor...');\r\n            \r\n            // Desactivar Web Workers completamente para evitar los errores\r\n            Cesium.FeatureDetection.supportsWebWorkers = function() { return false; };\r\n            \r\n            // Inicialización del visor de Cesium con opciones simplificadas\r\n            const viewer = new Cesium.Viewer('cesiumContainer', {\r\n              animation: false,\r\n              baseLayerPicker: false,\r\n              fullscreenButton: false,\r\n              geocoder: false,\r\n              homeButton: false,\r\n              infoBox: false,\r\n              sceneModePicker: false,\r\n              selectionIndicator: false,\r\n              timeline: false,\r\n              navigationHelpButton: false,\r\n              navigationInstructionsInitiallyVisible: false,\r\n              scene3DOnly: true,\r\n              requestRenderMode: false, // Desactivar requestRenderMode para asegurar renderizado continuo\r\n              maximumRenderTimeChange: Infinity,\r\n              terrainProvider: new Cesium.EllipsoidTerrainProvider(), // Usar terreno simple desde el inicio\r\n              imageryProvider: false, // Sin imagen inicial, las añadiremos manualmente\r\n              contextOptions: {\r\n                webgl: {\r\n                  alpha: false, // Usar fondo opaco\r\n                  antialias: true, // Mejorar calidad visual\r\n                  failIfMajorPerformanceCaveat: false\r\n                }\r\n              }\r\n            });\r\n            \r\n            // Para depuración\r\n            window.viewer = viewer;\r\n            \r\n            // Habilitar información de depuración\r\n            viewer.extend(Cesium.viewerCesiumInspectorMixin, {});\r\n            viewer.cesiumInspector.container.style.display = 'none'; // Oculto por defecto\r\n            \r\n            // Forzar renderizado de frames incluso sin cambios\r\n            viewer.scene.requestRenderMode = false;\r\n            \r\n            // Ocultar créditos\r\n            viewer.cesiumWidget.creditContainer.style.display = 'none';\r\n            \r\n            // Depuración móvil (para ver qué está pasando)\r\n            const addDebugInfo = function() {\r\n              const debugDiv = document.createElement('div');\r\n              debugDiv.style.position = 'absolute';\r\n              debugDiv.style.top = '80px';\r\n              debugDiv.style.left = '10px';\r\n              debugDiv.style.color = 'white';\r\n              debugDiv.style.backgroundColor = 'rgba(0,0,0,0.5)';\r\n              debugDiv.style.padding = '5px';\r\n              debugDiv.style.zIndex = '1000';\r\n              debugDiv.style.fontSize = '10px';\r\n              debugDiv.style.maxWidth = '300px';\r\n              debugDiv.style.maxHeight = '200px';\r\n              debugDiv.style.overflow = 'auto';\r\n              debugDiv.id = 'cesiumDebugInfo';\r\n              document.body.appendChild(debugDiv);\r\n              \r\n              // Botón para alternar inspector\r\n              const toggleButton = document.createElement('button');\r\n              toggleButton.textContent = 'Inspector';\r\n              toggleButton.style.position = 'absolute';\r\n              toggleButton.style.top = '10px';\r\n              toggleButton.style.left = '10px';\r\n              toggleButton.style.zIndex = '1000';\r\n              toggleButton.onclick = function() {\r\n                const inspector = viewer.cesiumInspector.container;\r\n                inspector.style.display = inspector.style.display === 'none' ? 'block' : 'none';\r\n              };\r\n              document.body.appendChild(toggleButton);\r\n              \r\n              // Actualizar info de depuración\r\n              setInterval(function() {\r\n                if (!viewer || !viewer.scene) return;\r\n                const debugInfo = document.getElementById('cesiumDebugInfo');\r\n                if (!debugInfo) return;\r\n                \r\n                const gl = viewer.scene.context._gl;\r\n                const debugText = [\r\n                  'Globe visible: ' + viewer.scene.globe.show,\r\n                  'Globe base color: ' + viewer.scene.globe.baseColor.toString(),\r\n                  'Img layers: ' + viewer.imageryLayers.length,\r\n                  'Auto-rotación: ' + autoRotate,\r\n                  'FPS: ' + viewer.scene.frameState.frameNumber % 60,\r\n                  'GPU: ' + (gl ? gl.getParameter(gl.RENDERER) : 'unknown')\r\n                ].join('<br>');\r\n                \r\n                debugInfo.innerHTML = debugText;\r\n              }, 1000);\r\n            };\r\n            \r\n            // Activar depuración móvil\r\n            addDebugInfo();\r\n            \r\n            updateProgress('Aplicando configuración...');\r\n            \r\n            // Aplicar optimizaciones extremas para móviles\r\n            viewer.scene.fog.enabled = false;\r\n            viewer.scene.globe.maximumScreenSpaceError = isLowPerformanceDevice ? 12 : 8; \r\n            viewer.targetFrameRate = isLowPerformanceDevice ? 24 : 30;\r\n            viewer.resolutionScale = isLowPerformanceDevice ? 0.5 : 0.7;\r\n            \r\n            // Hacer visible el globo\r\n            viewer.scene.globe.show = true;\r\n            viewer.scene.globe.baseColor = Cesium.Color.BLUE;\r\n            viewer.scene.backgroundColor = Cesium.Color.BLACK;\r\n            \r\n            // Ajustar el tamaño y posición de la escena para centrar el globo\r\n            function centerGlobe() {\r\n              try {\r\n                // Forzar que el canvas tenga el tamaño correcto\r\n                const canvas = viewer.scene.canvas;\r\n                if (canvas) {\r\n                  canvas.width = window.innerWidth;\r\n                  canvas.height = window.innerHeight;\r\n                  canvas.style.width = '100%';\r\n                  canvas.style.height = '100%';\r\n                  \r\n                  // Actualizar la matriz de proyección\r\n                  viewer.scene.camera.frustum.aspectRatio = canvas.clientWidth / canvas.clientHeight;\r\n                }\r\n                \r\n                // Centrar la vista\r\n                viewer.scene.camera.lookAt(\r\n                  Cesium.Cartesian3.fromDegrees(0.0, 0.0, 0.0), // Mirar al centro\r\n                  new Cesium.Cartesian3(0.0, 0.0, 15000000.0)   // Distancia\r\n                );\r\n\r\n                // Forzar un repintado\r\n                viewer.scene.requestRender();\r\n              } catch (e) {\r\n                console.warn('Error al centrar el globo:', e);\r\n              }\r\n            }\r\n            \r\n            // Exponer la función globalmente\r\n            window.centerGlobe = centerGlobe;\r\n            \r\n            // Llamar a centrarlo inicialmente\r\n            centerGlobe();\r\n            \r\n            // Centrar cuando cambie el tamaño de la ventana\r\n            window.addEventListener('resize', centerGlobe);\r\n            \r\n            // Función para cargar textura directa si todo lo demás falla\r\n            function loadDirectTexture() {\r\n              updateProgress('Cargando textura directa...');\r\n              \r\n              // Intentar cargar una textura de la Tierra directamente\r\n              const earthTexture = new Image();\r\n              earthTexture.crossOrigin = 'anonymous';\r\n              earthTexture.onload = function() {\r\n                try {\r\n                  // Crear material con la textura\r\n                  const material = new Cesium.Material({\r\n                    fabric: {\r\n                      type: 'DiffuseMap',\r\n                      uniforms: {\r\n                        image: earthTexture\r\n                      }\r\n                    }\r\n                  });\r\n                  \r\n                  // Aplicar al globo\r\n                  viewer.scene.globe.material = material;\r\n                  updateProgress('Textura cargada con éxito');\r\n                } catch (e) {\r\n                  console.error('Error al aplicar textura:', e);\r\n                }\r\n              };\r\n              \r\n              earthTexture.onerror = function() {\r\n                console.error('Error al cargar la textura de la Tierra');\r\n              };\r\n              \r\n              // Usar una URL de imagen pública de la Tierra\r\n              earthTexture.src = 'https://eoimages.gsfc.nasa.gov/images/imagerecords/74000/74218/world.200412.3x5400x2700.jpg';\r\n            }\r\n            \r\n            // Desactivar efectos exigentes\r\n            viewer.scene.skyAtmosphere.show = false;\r\n            viewer.scene.globe.showGroundAtmosphere = false;\r\n            \r\n            updateProgress('Cargando imágenes...');\r\n            \r\n            // Usar mapas simplificados pero visibles\r\n            let imageLoadSuccess = false;\r\n            \r\n            try {\r\n              // Intentar usar mapas naturales de la Tierra\r\n              const naturalEarthII = new Cesium.TileMapServiceImageryProvider({\r\n                url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')\r\n              });\r\n              viewer.imageryLayers.addImageryProvider(naturalEarthII);\r\n              imageLoadSuccess = true;\r\n              \r\n              // Añadir capa de países/fronteras\r\n              try {\r\n                const countries = new Cesium.WebMapServiceImageryProvider({\r\n                  url: 'https://ahocevar.com/geoserver/wms',\r\n                  layers: 'ne:ne_10m_admin_0_countries',\r\n                  parameters: {\r\n                    transparent: 'true',\r\n                    format: 'image/png'\r\n                  }\r\n                });\r\n                viewer.imageryLayers.addImageryProvider(countries);\r\n              } catch (e) {\r\n                // No es crítico si esta capa falla\r\n                console.warn('Error cargando capa de países:', e);\r\n              }\r\n            } catch (e) {\r\n              console.warn('Error cargando mapas NaturalEarth:', e);\r\n              try {\r\n                // Alternativa: mapas de Ion\r\n                const ion = new Cesium.IonImageryProvider({ assetId: 3 });\r\n                viewer.imageryLayers.addImageryProvider(ion);\r\n                imageLoadSuccess = true;\r\n              } catch (e2) {\r\n                console.warn('Error cargando imágenes de Ion:', e2);\r\n                try {\r\n                  // Alternativa: mapas de Bing\r\n                  const bing = new Cesium.BingMapsImageryProvider({\r\n                    url: 'https://dev.virtualearth.net',\r\n                    key: 'AipIE-pEoKccx-kC8G3D-45V3hl9hZxC-5vSXbMamybYjvJTXvoOYT7QeMqvFMGQ',\r\n                    mapStyle: Cesium.BingMapsStyle.AERIAL\r\n                  });\r\n                  viewer.imageryLayers.addImageryProvider(bing);\r\n                  imageLoadSuccess = true;\r\n                } catch (e3) {\r\n                  console.error('Error cargando todas las opciones de imágenes:', e3);\r\n                  \r\n                  // Último recurso: cargar textura directamente\r\n                  loadDirectTexture();\r\n                }\r\n              }\r\n            }\r\n            \r\n            // Si después de todo no tenemos imágenes, cargar la textura directamente\r\n            if (!imageLoadSuccess && viewer.imageryLayers.length === 0) {\r\n              loadDirectTexture();\r\n            }\r\n            \r\n            updateProgress('Configurando cámara...');\r\n            \r\n            // Configurar la cámara para una vista más centrada\r\n            viewer.camera.flyTo({\r\n              destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\r\n              orientation: {\r\n                heading: Cesium.Math.toRadians(0.0),\r\n                pitch: Cesium.Math.toRadians(-90.0), // Vista desde arriba para centrar\r\n                roll: 0.0\r\n              },\r\n              duration: 1.0,\r\n              complete: function() {\r\n                updateProgress('Activando características...');\r\n                \r\n                // Activar rotación automática\r\n                startAutoRotation();\r\n                \r\n                // Informar que la carga básica está completa\r\n                window.ReactNativeWebView.postMessage('loaded');\r\n                \r\n                // Ocultar overlay de carga\r\n                document.getElementById('loadingOverlay').style.display = 'none';\r\n              }\r\n            });\r\n            \r\n            // Configurar interacción para móviles\r\n            viewer.scene.screenSpaceCameraController.minimumZoomDistance = 1000000;\r\n            viewer.scene.screenSpaceCameraController.maximumZoomDistance = 25000000;\r\n            \r\n            // Configurar rotación automática\r\n            let autoRotate = true;\r\n            const rotationAxis = new Cesium.Cartesian3(0, 0, 1); // Eje Z (vertical)\r\n            let lastTime = Date.now();\r\n            \r\n            function startAutoRotation() {\r\n              // Detener cualquier rotación anterior si existe\r\n              if (window.rotationInterval) {\r\n                clearInterval(window.rotationInterval);\r\n              }\r\n              \r\n              // Crear una función de animación basada en intervalos para mayor fiabilidad\r\n              window.rotationInterval = setInterval(function() {\r\n                if (!autoRotate) return;\r\n                \r\n                try {\r\n                  // Rotar alrededor del eje Z\r\n                  const now = Date.now();\r\n                  const deltaTime = now - lastTime;\r\n                  lastTime = now;\r\n                  \r\n                  // Rotar con una velocidad fija, sin depender del tiempo para mayor estabilidad\r\n                  const rotationAngle = Cesium.Math.toRadians(0.1); // 0.1 grados por frame\r\n                  \r\n                  // Guardar la posición actual\r\n                  const currentPosition = Cesium.Cartesian3.clone(viewer.camera.position);\r\n                  const currentUp = Cesium.Cartesian3.clone(viewer.camera.up);\r\n                  const center = new Cesium.Cartesian3(0, 0, 0); // Centro de la Tierra\r\n                  \r\n                  // Aplicar rotación\r\n                  viewer.camera.rotate(rotationAxis, rotationAngle);\r\n                  \r\n                  // Asegurar que la cámara sigue mirando hacia el centro\r\n                  viewer.camera.lookAt(\r\n                    center,\r\n                    new Cesium.Cartesian3(0, 0, Cesium.Cartesian3.magnitude(currentPosition))\r\n                  );\r\n                  \r\n                  // Forzar renderizado\r\n                  viewer.scene.requestRender();\r\n                  \r\n                  // Log para depuración\r\n                  const debugDiv = document.getElementById('cesiumDebugInfo');\r\n                  if (debugDiv) {\r\n                    debugDiv.innerHTML += '<br>Rotando...';\r\n                  }\r\n                } catch (e) {\r\n                  console.error('Error en rotación:', e);\r\n                }\r\n              }, 50); // Actualizar cada 50ms para una rotación suave\r\n            }\r\n            \r\n            // Timeout para verificar si realmente tenemos un globo visible\r\n            setTimeout(function() {\r\n              // Verificar si tenemos capas de imagen o si el globo está visible\r\n              if ((viewer.imageryLayers.length === 0 || !viewer.scene.globe.show) && \r\n                  document.getElementById('loadingOverlay').style.display !== 'none') {\r\n                \r\n                console.warn('No se ha detectado un globo visible, aplicando soluciones de respaldo');\r\n                \r\n                // Asegurar que el globo es visible\r\n                viewer.scene.globe.show = true;\r\n                \r\n                // Usar color azul y cargar textura directa\r\n                viewer.scene.globe.baseColor = Cesium.Color.BLUE;\r\n                loadDirectTexture();\r\n                \r\n                // Ocultar overlay después de intentarlo todo\r\n                setTimeout(function() {\r\n                  document.getElementById('loadingOverlay').style.display = 'none';\r\n                  window.ReactNativeWebView.postMessage('loaded');\r\n                }, 3000);\r\n              }\r\n            }, 10000);\r\n            \r\n            // Manejar interacción del usuario\r\n            let touchStarted = false;\r\n            \r\n            viewer.screenSpaceEventHandler.setInputAction(function() {\r\n              autoRotate = false;\r\n              touchStarted = true;\r\n              \r\n              // Agregar evento de debug al tocar\r\n              const debugDiv = document.getElementById('cesiumDebugInfo');\r\n              if (debugDiv) {\r\n                debugDiv.innerHTML += '<br>Touch detected!<br>Globe: ' + viewer.scene.globe.show;\r\n              }\r\n            }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\r\n            \r\n            viewer.screenSpaceEventHandler.setInputAction(function() {\r\n              touchStarted = false;\r\n              setTimeout(function() {\r\n                if (!touchStarted) {\r\n                  autoRotate = true;\r\n                  lastTime = Date.now();\r\n                  startAutoRotation();\r\n                }\r\n              }, 3000);\r\n            }, Cesium.ScreenSpaceEventType.LEFT_UP);\r\n            \r\n            // Botón de reset visible para emergencias\r\n            const resetButton = document.createElement('button');\r\n            resetButton.textContent = 'Reset View';\r\n            resetButton.style.position = 'absolute';\r\n            resetButton.style.bottom = '80px';\r\n            resetButton.style.right = '10px';\r\n            resetButton.style.zIndex = '1000';\r\n            resetButton.style.padding = '8px';\r\n            resetButton.onclick = function() {\r\n              // Reiniciar vista con configuración centrada\r\n              viewer.camera.flyTo({\r\n                destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\r\n                orientation: {\r\n                  heading: Cesium.Math.toRadians(0.0),\r\n                  pitch: Cesium.Math.toRadians(-90.0),\r\n                  roll: 0.0\r\n                },\r\n                duration: 1.0\r\n              });\r\n            };\r\n            document.body.appendChild(resetButton);\r\n            \r\n            // Botón para centrar el globo\r\n            const centerButton = document.createElement('button');\r\n            centerButton.textContent = 'Centrar Globo';\r\n            centerButton.style.position = 'absolute';\r\n            centerButton.style.bottom = '120px';\r\n            centerButton.style.right = '10px';\r\n            centerButton.style.zIndex = '1000';\r\n            centerButton.style.padding = '8px';\r\n            centerButton.onclick = function() {\r\n              // Llamar a la función de centrado\r\n              centerGlobe();\r\n            };\r\n            document.body.appendChild(centerButton);\r\n          } catch (error) {\r\n            console.error('Error al inicializar Cesium:', error);\r\n            window.ReactNativeWebView.postMessage('error:' + error);\r\n          }\r\n        }\r\n        \r\n        // Timeout de seguridad para asegurar que se muestra algo\r\n        setTimeout(function() {\r\n          if (document.getElementById('loadingOverlay').style.display !== 'none') {\r\n            updateProgress('Carga completa (timeout)');\r\n            document.getElementById('loadingOverlay').style.display = 'none';\r\n            window.ReactNativeWebView.postMessage('loaded');\r\n          }\r\n        }, 30000);\r\n        \r\n        // Manejo de errores global\r\n        window.onerror = function(message, source, lineno, colno, error) {\r\n          console.error('Error:', message);\r\n          // Solo reportar errores significativos que no sean de workers\r\n          if (!message.includes('Worker') && !message.includes('importScripts')) {\r\n            window.ReactNativeWebView.postMessage('error:' + message);\r\n          }\r\n          return true;\r\n        };\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `;\r\n\r\n  return (\r\n    <View style={[styles.container, props.style]}>\r\n      {!useFallbackView && (\r\n        <WebView\r\n          ref={webViewRef}\r\n          style={styles.webview}\r\n          originWhitelist={['*']}\r\n          source={{ html: htmlContent }}\r\n          javaScriptEnabled={true}\r\n          domStorageEnabled={true}\r\n          allowFileAccess={true}\r\n          allowUniversalAccessFromFileURLs={true}\r\n          allowFileAccessFromFileURLs={true}\r\n          cacheEnabled={true}\r\n          javaScriptCanOpenWindowsAutomatically={true}\r\n          scrollEnabled={false}\r\n          bounces={false}\r\n          showsHorizontalScrollIndicator={false}\r\n          showsVerticalScrollIndicator={false}\r\n          onShouldStartLoadWithRequest={() => true}\r\n          startInLoadingState={true}\r\n          renderLoading={() => <View />}\r\n          onMessage={(event) => {\r\n            const message = event.nativeEvent.data;\r\n            if (message === 'loaded') {\r\n              console.log('Cesium cargado correctamente');\r\n              setLoading(false);\r\n              setLoadingProgress(100);\r\n              // Limpiar el timeout cuando se carga correctamente\r\n              if (loadTimeoutRef.current) {\r\n                clearTimeout(loadTimeoutRef.current);\r\n              }\r\n            } else if (message.startsWith('error:')) {\r\n              console.error('Error en Cesium WebView:', message.substring(6));\r\n              setError(message.substring(6));\r\n              handleError(message.substring(6));\r\n            }\r\n          }}\r\n          onError={(syntheticEvent) => {\r\n            const { nativeEvent } = syntheticEvent;\r\n            console.error('WebView error:', nativeEvent);\r\n            handleError(`WebView error: ${nativeEvent.description}`);\r\n          }}\r\n          onHttpError={(syntheticEvent) => {\r\n            const { nativeEvent } = syntheticEvent;\r\n            console.error('WebView HTTP error:', nativeEvent);\r\n            handleError(`WebView HTTP error: ${nativeEvent.statusCode}`);\r\n          }}\r\n          onContentProcessDidTerminate={() => {\r\n            console.warn('WebView process terminated, falling back to simple globe');\r\n            handleError('La visualización 3D se cerró inesperadamente');\r\n          }}\r\n        />\r\n      )}\r\n      \r\n      {useFallbackView && (\r\n        <FallbackGlobeView style={props.style} />\r\n      )}\r\n      \r\n      {useFallbackView && (\r\n        <View style={styles.fallbackButtonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.retryButton}\r\n            onPress={retryCesium}\r\n          >\r\n            <Text style={styles.retryButtonText}>Intentar cargar mapa 3D</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n      \r\n      {loading && !useFallbackView && (\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n          <Text style={styles.loadingText}>Cargando globo terráqueo ({loadingProgress}%)...</Text>\r\n          <View style={styles.progressBarContainer}>\r\n            <View style={[styles.progressBar, { width: `${loadingProgress}%` }]} />\r\n          </View>\r\n        </View>\r\n      )}\r\n      \r\n      {error && !useFallbackView && (\r\n        <View style={styles.errorContainer}>\r\n          <Text style={styles.errorText}>Error: {error}</Text>\r\n          <Text style={styles.errorSubtext}>Cambiando a modo alternativo...</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#000',\r\n    position: 'relative',\r\n  },\r\n  webview: {\r\n    flex: 1,\r\n    backgroundColor: 'transparent',\r\n  },\r\n  loadingContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    color: '#fff',\r\n    marginTop: 10,\r\n    fontSize: 16,\r\n  },\r\n  errorContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  errorText: {\r\n    color: '#ff6b6b',\r\n    fontSize: 18,\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n  },\r\n  errorSubtext: {\r\n    color: '#fff',\r\n    fontSize: 14,\r\n    textAlign: 'center',\r\n  },\r\n  fallbackButtonContainer: {\r\n    position: 'absolute',\r\n    top: 20,\r\n    right: 20,\r\n    zIndex: 1000,\r\n  },\r\n  retryButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 5,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n  },\r\n  retryButtonText: {\r\n    color: '#fff',\r\n    fontSize: 14,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  progressBarContainer: {\r\n    height: 10,\r\n    width: 250,\r\n    backgroundColor: 'rgba(255,255,255,0.2)',\r\n    borderRadius: 5,\r\n    overflow: 'hidden',\r\n    marginTop: 15,\r\n    marginHorizontal: 20,\r\n  },\r\n  progressBar: {\r\n    height: '100%',\r\n    backgroundColor: '#4CAF50',\r\n    borderRadius: 5,\r\n  },\r\n});\r\n\r\nexport default GlobeView; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
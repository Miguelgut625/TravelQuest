{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supabase } from \"../../services/supabase\";\nimport { completeMission } from \"../../services/pointsService\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from \"react-native-paper/lib/module/core/theming\";\nimport { completeMission as dispatchCompleteMission } from \"../../features/journey/journeySlice\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar MissionCard = function MissionCard(_ref) {\n  var mission = _ref.mission,\n    onComplete = _ref.onComplete;\n  return _jsxs(TouchableOpacity, {\n    style: [styles.card, mission.completed && styles.completedCard],\n    onPress: function onPress() {\n      return !mission.completed && onComplete();\n    },\n    disabled: mission.completed,\n    children: [_jsxs(View, {\n      style: styles.cardHeader,\n      children: [_jsx(Text, {\n        style: styles.cardTitle,\n        children: mission.challenge.title\n      }), _jsx(Text, {\n        style: [styles.badge, {\n          backgroundColor: mission.completed ? '#4CAF50' : '#FFA000'\n        }],\n        children: mission.completed ? 'Completada' : 'Pendiente'\n      })]\n    }), _jsx(Text, {\n      style: styles.cardDescription,\n      children: mission.challenge.description\n    }), _jsxs(View, {\n      style: styles.cardFooter,\n      children: [_jsxs(Text, {\n        style: styles.difficulty,\n        children: [\"Dificultad: \", mission.challenge.difficulty]\n      }), _jsxs(Text, {\n        style: styles.points,\n        children: [mission.challenge.points, \" puntos\"]\n      })]\n    })]\n  });\n};\nvar CityCard = function CityCard(_ref2) {\n  var cityName = _ref2.cityName,\n    totalMissions = _ref2.totalMissions,\n    completedMissions = _ref2.completedMissions,\n    onPress = _ref2.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: styles.cityCard,\n    onPress: onPress,\n    children: [_jsxs(View, {\n      style: styles.cityCardContent,\n      children: [_jsxs(View, {\n        style: styles.cityInfo,\n        children: [_jsx(Text, {\n          style: styles.cityName,\n          children: cityName\n        }), _jsxs(Text, {\n          style: styles.missionCount,\n          children: [completedMissions, \"/\", totalMissions, \" misiones completadas\"]\n        })]\n      }), _jsx(Ionicons, {\n        name: \"chevron-forward\",\n        size: 24,\n        color: \"#666\"\n      })]\n    }), _jsx(View, {\n      style: styles.progressBar,\n      children: _jsx(View, {\n        style: [styles.progressFill, {\n          width: `${completedMissions / totalMissions * 100}%`\n        }]\n      })\n    })]\n  });\n};\nvar MissionsScreen = function MissionsScreen(_ref3) {\n  var route = _ref3.route;\n  var _ref4 = route.params || {},\n    journeyId = _ref4.journeyId;\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    missions = _useState2[0],\n    setMissions = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userPoints = _useState8[0],\n    setUserPoints = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedCity = _useState10[0],\n    setSelectedCity = _useState10[1];\n  var _useState11 = useState({}),\n    _useState12 = _slicedToArray(_useState11, 2),\n    cityMissions = _useState12[0],\n    setCityMissions = _useState12[1];\n  var dispatch = useDispatch();\n  var theme = useTheme();\n  var fetchMissions = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      if (!(user != null && user.id)) {\n        setError('Usuario no autenticado');\n        setLoading(false);\n        return;\n      }\n      try {\n        var _yield$supabase$from$ = yield supabase.from('journeys').select(`\n          id,\n          description,\n          created_at,\n          cities (\n            name\n          ),\n          journeys_missions (\n            id,\n            completed,\n            challengeId,\n            challenges (\n              id,\n              title,\n              description,\n              difficulty,\n              points\n            )\n          )\n        `).eq('userId', user.id).order('created_at', {\n            ascending: false\n          }),\n          journeys = _yield$supabase$from$.data,\n          journeysError = _yield$supabase$from$.error;\n        if (journeysError) throw journeysError;\n        console.log('Journeys obtenidos:', journeys);\n        if (!journeys || journeys.length === 0) {\n          setError('No hay viajes disponibles');\n          setLoading(false);\n          return;\n        }\n        var allMissions = journeys.flatMap(function (journey) {\n          console.log('Procesando journey:', journey);\n          return journey.journeys_missions.map(function (jm) {\n            var _journey$cities;\n            return {\n              id: jm.id,\n              completed: jm.completed,\n              cityName: ((_journey$cities = journey.cities) == null ? void 0 : _journey$cities.name) || 'Ciudad Desconocida',\n              challenge: {\n                title: jm.challenges.title,\n                description: jm.challenges.description,\n                difficulty: jm.challenges.difficulty,\n                points: jm.challenges.points\n              }\n            };\n          });\n        });\n        console.log('Todas las misiones:', allMissions);\n        var missionsByCity = {};\n        allMissions.forEach(function (mission) {\n          if (!missionsByCity[mission.cityName]) {\n            missionsByCity[mission.cityName] = {\n              completed: [],\n              pending: []\n            };\n          }\n          if (mission.completed) {\n            missionsByCity[mission.cityName].completed.push(mission);\n          } else {\n            missionsByCity[mission.cityName].pending.push(mission);\n          }\n        });\n        setCityMissions(missionsByCity);\n        setMissions(allMissions);\n      } catch (error) {\n        console.error('Error fetching missions:', error);\n        setError('Error al cargar las misiones');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchMissions() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    fetchMissions();\n  }, [journeyId]);\n  var handleCompleteMission = function () {\n    var _ref6 = _asyncToGenerator(function* (missionId) {\n      if (!(user != null && user.id)) return;\n      try {\n        var points = yield completeMission(missionId, user.id);\n        setUserPoints(function (prev) {\n          return prev + points;\n        });\n        var updatedMissions = missions.map(function (mission) {\n          return mission.id === missionId ? _objectSpread(_objectSpread({}, mission), {}, {\n            completed: true\n          }) : mission;\n        });\n        setMissions(updatedMissions);\n        var newCityMissions = _objectSpread({}, cityMissions);\n        Object.keys(newCityMissions).forEach(function (cityName) {\n          var mission = newCityMissions[cityName].pending.find(function (m) {\n            return m.id === missionId;\n          });\n          if (mission) {\n            newCityMissions[cityName].pending = newCityMissions[cityName].pending.filter(function (m) {\n              return m.id !== missionId;\n            });\n            newCityMissions[cityName].completed.push(_objectSpread(_objectSpread({}, mission), {}, {\n              completed: true\n            }));\n          }\n        });\n        setCityMissions(newCityMissions);\n        Alert.alert('¡Misión Completada!', `Has ganado ${points} puntos por completar esta misión.`);\n      } catch (error) {\n        console.error('Error completing mission:', error);\n        Alert.alert('Error', 'No se pudo completar la misión. Por favor, intenta de nuevo.');\n      }\n    });\n    return function handleCompleteMission(_x) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var handleMissionComplete = function handleMissionComplete(missionId) {\n    dispatch(dispatchCompleteMission(missionId));\n  };\n  if (loading) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Cargando misiones...\"\n      })]\n    });\n  }\n  if (error) {\n    return _jsxs(View, {\n      style: styles.errorContainer,\n      children: [_jsx(Text, {\n        style: styles.errorText,\n        children: error\n      }), _jsx(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: fetchMissions,\n        children: _jsx(Text, {\n          style: styles.retryButtonText,\n          children: \"Reintentar\"\n        })\n      })]\n    });\n  }\n  if (!selectedCity) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.header,\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"Tus Ciudades\"\n        }), _jsxs(Text, {\n          style: styles.pointsText,\n          children: [\"Puntos: \", userPoints]\n        })]\n      }), _jsx(ScrollView, {\n        style: styles.citiesList,\n        children: Object.entries(cityMissions).map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n            cityName = _ref8[0],\n            missions = _ref8[1];\n          return _jsx(CityCard, {\n            cityName: cityName,\n            totalMissions: missions.completed.length + missions.pending.length,\n            completedMissions: missions.completed.length,\n            onPress: function onPress() {\n              return setSelectedCity(cityName);\n            }\n          }, cityName);\n        })\n      })]\n    });\n  }\n  var cityData = cityMissions[selectedCity];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsxs(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: function onPress() {\n          return setSelectedCity(null);\n        },\n        children: [_jsx(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#333\"\n        }), _jsx(Text, {\n          style: styles.backButtonText,\n          children: \"Ciudades\"\n        })]\n      }), _jsxs(Text, {\n        style: styles.pointsText,\n        children: [\"Puntos: \", userPoints]\n      })]\n    }), _jsx(Text, {\n      style: styles.cityTitle,\n      children: selectedCity\n    }), _jsxs(ScrollView, {\n      style: styles.missionsList,\n      children: [cityData.pending.length > 0 && _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Misiones Pendientes\"\n        }), cityData.pending.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {\n              return handleCompleteMission(mission.id);\n            }\n          }, mission.id);\n        })]\n      }), cityData.completed.length > 0 && _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.completedDivider,\n          children: [_jsx(View, {\n            style: styles.dividerLine\n          }), _jsx(Text, {\n            style: styles.completedText,\n            children: \"Completadas\"\n          }), _jsx(View, {\n            style: styles.dividerLine\n          })]\n        }), cityData.completed.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {}\n          }, mission.id);\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  backButtonText: {\n    fontSize: 16,\n    marginLeft: 5,\n    color: '#333'\n  },\n  cityTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  loadingText: {\n    marginTop: 10,\n    color: '#666'\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    color: 'red',\n    textAlign: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  pointsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#4CAF50'\n  },\n  citiesList: {\n    flex: 1\n  },\n  cityCard: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 15,\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3\n  },\n  cityCardContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cityInfo: {\n    flex: 1\n  },\n  cityName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 5\n  },\n  missionCount: {\n    fontSize: 14,\n    color: '#666'\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 2,\n    overflow: 'hidden'\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#4CAF50'\n  },\n  missionsList: {\n    flex: 1\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginBottom: 15\n  },\n  completedDivider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#4CAF50'\n  },\n  completedText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n    marginHorizontal: 10,\n    fontSize: 16\n  },\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  completedCard: {\n    opacity: 0.8\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flex: 1\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 15,\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  cardDescription: {\n    color: '#666',\n    marginBottom: 10\n  },\n  cardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  difficulty: {\n    color: '#666',\n    fontSize: 12\n  },\n  points: {\n    color: '#4CAF50',\n    fontWeight: 'bold'\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  retryButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  }\n});\nexport default MissionsScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","ActivityIndicator","Alert","ScrollView","useSelector","useDispatch","supabase","completeMission","Ionicons","useTheme","dispatchCompleteMission","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MissionCard","_ref","mission","onComplete","style","styles","card","completed","completedCard","onPress","disabled","children","cardHeader","cardTitle","challenge","title","badge","backgroundColor","cardDescription","description","cardFooter","difficulty","points","CityCard","_ref2","cityName","totalMissions","completedMissions","cityCard","cityCardContent","cityInfo","missionCount","name","size","color","progressBar","progressFill","width","MissionsScreen","_ref3","route","_ref4","params","journeyId","_useSelector","state","auth","user","_useState","_useState2","_slicedToArray","missions","setMissions","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","userPoints","setUserPoints","_useState9","_useState10","selectedCity","setSelectedCity","_useState11","_useState12","cityMissions","setCityMissions","dispatch","theme","fetchMissions","_ref5","_asyncToGenerator","id","_yield$supabase$from$","from","select","eq","order","ascending","journeys","data","journeysError","console","log","length","allMissions","flatMap","journey","journeys_missions","map","jm","_journey$cities","cities","challenges","missionsByCity","forEach","pending","push","apply","arguments","handleCompleteMission","_ref6","missionId","prev","updatedMissions","_objectSpread","newCityMissions","Object","keys","find","m","filter","alert","_x","handleMissionComplete","loadingContainer","loadingText","errorContainer","errorText","retryButton","retryButtonText","container","header","pointsText","citiesList","entries","_ref7","_ref8","cityData","backButton","backButtonText","cityTitle","missionsList","sectionTitle","completedDivider","dividerLine","completedText","create","flex","padding","flexDirection","justifyContent","alignItems","marginBottom","fontSize","marginLeft","fontWeight","marginTop","textAlign","borderRadius","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","overflow","marginVertical","marginHorizontal","opacity","paddingHorizontal","paddingVertical"],"sources":["C:/Users/PC/TravelQuest/src/screens/main/MissionsScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, Alert, ScrollView } from 'react-native';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { supabase } from '../../services/supabase';\r\nimport { completeMission } from '../../services/pointsService';\r\nimport { RouteProp } from '@react-navigation/native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { Card, ProgressBar, useTheme, Surface } from 'react-native-paper';\r\nimport { JourneyMission } from '../../types/journey';\r\nimport { completeMission as dispatchCompleteMission } from '../../features/journey/journeySlice';\r\n\r\ntype MissionsScreenRouteProp = RouteProp<{\r\n  Missions: {\r\n    journeyId: string;\r\n    challenges: JourneyMission[];\r\n  };\r\n}, 'Missions'>;\r\n\r\ninterface MissionsScreenProps {\r\n  route: MissionsScreenRouteProp;\r\n}\r\n\r\ninterface CityMissions {\r\n  [cityName: string]: {\r\n    completed: JourneyMission[];\r\n    pending: JourneyMission[];\r\n  };\r\n}\r\n\r\ninterface Journey {\r\n  id: string;\r\n  description: string;\r\n  created_at: string;\r\n  cities?: {\r\n    name: string;\r\n  };\r\n  journeys_missions: {\r\n    id: string;\r\n    completed: boolean;\r\n    challengeId: string;\r\n    challenges: {\r\n      id: string;\r\n      title: string;\r\n      description: string;\r\n      difficulty: string;\r\n      points: number;\r\n    };\r\n  }[];\r\n}\r\n\r\nconst MissionCard = ({ mission, onComplete }: { mission: JourneyMission; onComplete: () => void }) => (\r\n  <TouchableOpacity\r\n    style={[styles.card, mission.completed && styles.completedCard]}\r\n    onPress={() => !mission.completed && onComplete()}\r\n    disabled={mission.completed}\r\n  >\r\n    <View style={styles.cardHeader}>\r\n      <Text style={styles.cardTitle}>{mission.challenge.title}</Text>\r\n      <Text style={[styles.badge, { backgroundColor: mission.completed ? '#4CAF50' : '#FFA000' }]}>\r\n        {mission.completed ? 'Completada' : 'Pendiente'}\r\n      </Text>\r\n    </View>\r\n    <Text style={styles.cardDescription}>{mission.challenge.description}</Text>\r\n    <View style={styles.cardFooter}>\r\n      <Text style={styles.difficulty}>Dificultad: {mission.challenge.difficulty}</Text>\r\n      <Text style={styles.points}>{mission.challenge.points} puntos</Text>\r\n    </View>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst CityCard = ({ cityName, totalMissions, completedMissions, onPress }: {\r\n  cityName: string;\r\n  totalMissions: number;\r\n  completedMissions: number;\r\n  onPress: () => void;\r\n}) => (\r\n  <TouchableOpacity style={styles.cityCard} onPress={onPress}>\r\n    <View style={styles.cityCardContent}>\r\n      <View style={styles.cityInfo}>\r\n        <Text style={styles.cityName}>{cityName}</Text>\r\n        <Text style={styles.missionCount}>\r\n          {completedMissions}/{totalMissions} misiones completadas\r\n        </Text>\r\n      </View>\r\n      <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\r\n    </View>\r\n    <View style={styles.progressBar}>\r\n      <View\r\n        style={[\r\n          styles.progressFill,\r\n          { width: `${(completedMissions / totalMissions) * 100}%` }\r\n        ]}\r\n      />\r\n    </View>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst MissionsScreen = ({ route }: MissionsScreenProps) => {\r\n  const { journeyId } = route.params || {};\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [missions, setMissions] = useState<JourneyMission[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [userPoints, setUserPoints] = useState(0);\r\n  const [selectedCity, setSelectedCity] = useState<string | null>(null);\r\n  const [cityMissions, setCityMissions] = useState<CityMissions>({});\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n\r\n  const fetchMissions = async () => {\r\n    if (!user?.id) {\r\n      setError('Usuario no autenticado');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: journeys, error: journeysError } = await supabase\r\n        .from('journeys')\r\n        .select(`\r\n          id,\r\n          description,\r\n          created_at,\r\n          cities (\r\n            name\r\n          ),\r\n          journeys_missions (\r\n            id,\r\n            completed,\r\n            challengeId,\r\n            challenges (\r\n              id,\r\n              title,\r\n              description,\r\n              difficulty,\r\n              points\r\n            )\r\n          )\r\n        `)\r\n        .eq('userId', user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (journeysError) throw journeysError;\r\n\r\n      console.log('Journeys obtenidos:', journeys);\r\n\r\n      if (!journeys || journeys.length === 0) {\r\n        setError('No hay viajes disponibles');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const allMissions = journeys.flatMap((journey: Journey) => {\r\n        console.log('Procesando journey:', journey);\r\n        return journey.journeys_missions.map((jm) => ({\r\n          id: jm.id,\r\n          completed: jm.completed,\r\n          cityName: journey.cities?.name || 'Ciudad Desconocida',\r\n          challenge: {\r\n            title: jm.challenges.title,\r\n            description: jm.challenges.description,\r\n            difficulty: jm.challenges.difficulty,\r\n            points: jm.challenges.points\r\n          }\r\n        }));\r\n      });\r\n\r\n      console.log('Todas las misiones:', allMissions);\r\n\r\n      // Organizar misiones por ciudad\r\n      const missionsByCity: CityMissions = {};\r\n      allMissions.forEach((mission: JourneyMission) => {\r\n        if (!missionsByCity[mission.cityName]) {\r\n          missionsByCity[mission.cityName] = {\r\n            completed: [],\r\n            pending: []\r\n          };\r\n        }\r\n        if (mission.completed) {\r\n          missionsByCity[mission.cityName].completed.push(mission);\r\n        } else {\r\n          missionsByCity[mission.cityName].pending.push(mission);\r\n        }\r\n      });\r\n\r\n      setCityMissions(missionsByCity);\r\n      setMissions(allMissions);\r\n    } catch (error) {\r\n      console.error('Error fetching missions:', error);\r\n      setError('Error al cargar las misiones');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMissions();\r\n  }, [journeyId]);\r\n\r\n  const handleCompleteMission = async (missionId: string) => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      const points = await completeMission(missionId, user.id);\r\n      setUserPoints(prev => prev + points);\r\n\r\n      // Actualizar el estado local\r\n      const updatedMissions = missions.map(mission =>\r\n        mission.id === missionId ? { ...mission, completed: true } : mission\r\n      );\r\n      setMissions(updatedMissions);\r\n\r\n      // Actualizar cityMissions\r\n      const newCityMissions = { ...cityMissions };\r\n      Object.keys(newCityMissions).forEach(cityName => {\r\n        const mission = newCityMissions[cityName].pending.find(m => m.id === missionId);\r\n        if (mission) {\r\n          newCityMissions[cityName].pending = newCityMissions[cityName].pending.filter(m => m.id !== missionId);\r\n          newCityMissions[cityName].completed.push({ ...mission, completed: true });\r\n        }\r\n      });\r\n      setCityMissions(newCityMissions);\r\n\r\n      Alert.alert(\r\n        '¡Misión Completada!',\r\n        `Has ganado ${points} puntos por completar esta misión.`\r\n      );\r\n    } catch (error) {\r\n      console.error('Error completing mission:', error);\r\n      Alert.alert(\r\n        'Error',\r\n        'No se pudo completar la misión. Por favor, intenta de nuevo.'\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleMissionComplete = (missionId: string) => {\r\n    dispatch(dispatchCompleteMission(missionId));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n        <Text style={styles.loadingText}>Cargando misiones...</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <View style={styles.errorContainer}>\r\n        <Text style={styles.errorText}>{error}</Text>\r\n        <TouchableOpacity style={styles.retryButton} onPress={fetchMissions}>\r\n          <Text style={styles.retryButtonText}>Reintentar</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (!selectedCity) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>Tus Ciudades</Text>\r\n          <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n        </View>\r\n        <ScrollView style={styles.citiesList}>\r\n          {Object.entries(cityMissions).map(([cityName, missions]) => (\r\n            <CityCard\r\n              key={cityName}\r\n              cityName={cityName}\r\n              totalMissions={missions.completed.length + missions.pending.length}\r\n              completedMissions={missions.completed.length}\r\n              onPress={() => setSelectedCity(cityName)}\r\n            />\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const cityData = cityMissions[selectedCity];\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <TouchableOpacity\r\n          style={styles.backButton}\r\n          onPress={() => setSelectedCity(null)}\r\n        >\r\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\r\n          <Text style={styles.backButtonText}>Ciudades</Text>\r\n        </TouchableOpacity>\r\n        <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n      </View>\r\n\r\n      <Text style={styles.cityTitle}>{selectedCity}</Text>\r\n\r\n      <ScrollView style={styles.missionsList}>\r\n        {cityData.pending.length > 0 && (\r\n          <>\r\n            <Text style={styles.sectionTitle}>Misiones Pendientes</Text>\r\n            {cityData.pending.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => handleCompleteMission(mission.id)}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {cityData.completed.length > 0 && (\r\n          <>\r\n            <View style={styles.completedDivider}>\r\n              <View style={styles.dividerLine} />\r\n              <Text style={styles.completedText}>Completadas</Text>\r\n              <View style={styles.dividerLine} />\r\n            </View>\r\n            {cityData.completed.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => { }}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  backButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  backButtonText: {\r\n    fontSize: 16,\r\n    marginLeft: 5,\r\n    color: '#333',\r\n  },\r\n  cityTitle: {\r\n    fontSize: 28,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 20,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  loadingText: {\r\n    marginTop: 10,\r\n    color: '#666',\r\n  },\r\n  errorContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n  },\r\n  pointsText: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#4CAF50',\r\n  },\r\n  citiesList: {\r\n    flex: 1,\r\n  },\r\n  cityCard: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 15,\r\n    padding: 15,\r\n    marginBottom: 15,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 3,\r\n    elevation: 3,\r\n  },\r\n  cityCardContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cityInfo: {\r\n    flex: 1,\r\n  },\r\n  cityName: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 5,\r\n  },\r\n  missionCount: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n  },\r\n  progressBar: {\r\n    height: 4,\r\n    backgroundColor: '#E0E0E0',\r\n    borderRadius: 2,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  missionsList: {\r\n    flex: 1,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#666',\r\n    marginBottom: 15,\r\n  },\r\n  completedDivider: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 20,\r\n  },\r\n  dividerLine: {\r\n    flex: 1,\r\n    height: 1,\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  completedText: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n    marginHorizontal: 10,\r\n    fontSize: 16,\r\n  },\r\n  card: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    marginBottom: 10,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  completedCard: {\r\n    opacity: 0.8,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    flex: 1,\r\n  },\r\n  badge: {\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n    borderRadius: 15,\r\n    color: 'white',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n  cardDescription: {\r\n    color: '#666',\r\n    marginBottom: 10,\r\n  },\r\n  cardFooter: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  difficulty: {\r\n    color: '#666',\r\n    fontSize: 12,\r\n  },\r\n  points: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n  },\r\n  retryButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n  retryButtonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default MissionsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
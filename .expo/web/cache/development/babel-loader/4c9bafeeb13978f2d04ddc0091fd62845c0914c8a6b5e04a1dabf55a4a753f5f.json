{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/travelquest/image/upload';\nvar CLOUDINARY_UPLOAD_PRESET = 'travelquest_app';\nexport var uploadImageToCloudinary = function () {\n  var _ref = _asyncToGenerator(function* (uri, missionId) {\n    try {\n      var formData = new FormData();\n      var filename = uri.split('/').pop() || 'photo.jpg';\n      var localUri = uri;\n      if (Platform.OS === 'web') {\n        var _response = yield fetch(uri);\n        var blob = yield _response.blob();\n        formData.append('file', blob, filename);\n      } else {\n        var match = /\\.(\\w+)$/.exec(filename);\n        var type = match ? `image/${match[1]}` : 'image/jpeg';\n        formData.append('file', {\n          uri: localUri,\n          type: type,\n          name: filename\n        });\n      }\n      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\n      formData.append('folder', 'missions');\n      formData.append('public_id', `mission_${missionId}_${Date.now()}`);\n      var response = yield fetch(CLOUDINARY_URL, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Error al subir imagen: ${response.statusText}`);\n      }\n      var data = yield response.json();\n      return data.secure_url;\n    } catch (error) {\n      console.error('Error subiendo imagen a Cloudinary:', error);\n      throw error;\n    }\n  });\n  return function uploadImageToCloudinary(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CLOUDINARY_URL","CLOUDINARY_UPLOAD_PRESET","uploadImageToCloudinary","_ref","_asyncToGenerator","uri","missionId","formData","FormData","filename","split","pop","localUri","Platform","OS","response","fetch","blob","append","match","exec","type","name","Date","now","method","body","ok","Error","statusText","data","json","secure_url","error","console","_x","_x2","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/cloudinaryService.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\n\r\n// Configuración de Cloudinary\r\nconst CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/travelquest/image/upload';\r\nconst CLOUDINARY_UPLOAD_PRESET = 'travelquest_app';\r\n\r\n/**\r\n * Sube una imagen a Cloudinary\r\n * @param uri URI de la imagen local\r\n * @param missionId ID de la misión asociada a la imagen\r\n * @returns URL de la imagen subida a Cloudinary\r\n */\r\nexport const uploadImageToCloudinary = async (uri: string, missionId: string): Promise<string> => {\r\n  try {\r\n    // Preparar el formulario para la subida\r\n    const formData = new FormData();\r\n    \r\n    // Adaptamos la URI para web vs nativo\r\n    const filename = uri.split('/').pop() || 'photo.jpg';\r\n    let localUri = uri;\r\n    \r\n    if (Platform.OS === 'web') {\r\n      // Para web, podemos usar la URI directamente como Blob\r\n      const response = await fetch(uri);\r\n      const blob = await response.blob();\r\n      formData.append('file', blob, filename);\r\n    } else {\r\n      // Para nativo, necesitamos formatear la URI y tipo MIME\r\n      const match = /\\.(\\w+)$/.exec(filename);\r\n      const type = match ? `image/${match[1]}` : 'image/jpeg';\r\n      \r\n      formData.append('file', {\r\n        // @ts-ignore - Esto es necesario porque React Native y TypeScript manejan FormData de manera diferente\r\n        uri: localUri,\r\n        type,\r\n        name: filename,\r\n      } as any);\r\n    }\r\n    \r\n    // Añadir preset y metadatos\r\n    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n    formData.append('folder', 'missions');\r\n    formData.append('public_id', `mission_${missionId}_${Date.now()}`);\r\n    \r\n    // Realizar la solicitud\r\n    const response = await fetch(CLOUDINARY_URL, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error al subir imagen: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.secure_url;\r\n  } catch (error) {\r\n    console.error('Error subiendo imagen a Cloudinary:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":";;AAGA,IAAMA,cAAc,GAAG,0DAA0D;AACjF,IAAMC,wBAAwB,GAAG,iBAAiB;AAQlD,OAAO,IAAMC,uBAAuB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,GAAW,EAAEC,SAAiB,EAAsB;IAChG,IAAI;MAEF,IAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAG/B,IAAMC,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,IAAI,WAAW;MACpD,IAAIC,QAAQ,GAAGP,GAAG;MAElB,IAAIQ,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QAEzB,IAAMC,SAAQ,SAASC,KAAK,CAACX,GAAG,CAAC;QACjC,IAAMY,IAAI,SAASF,SAAQ,CAACE,IAAI,CAAC,CAAC;QAClCV,QAAQ,CAACW,MAAM,CAAC,MAAM,EAAED,IAAI,EAAER,QAAQ,CAAC;MACzC,CAAC,MAAM;QAEL,IAAMU,KAAK,GAAG,UAAU,CAACC,IAAI,CAACX,QAAQ,CAAC;QACvC,IAAMY,IAAI,GAAGF,KAAK,GAAG,SAASA,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,YAAY;QAEvDZ,QAAQ,CAACW,MAAM,CAAC,MAAM,EAAE;UAEtBb,GAAG,EAAEO,QAAQ;UACbS,IAAI,EAAJA,IAAI;UACJC,IAAI,EAAEb;QACR,CAAQ,CAAC;MACX;MAGAF,QAAQ,CAACW,MAAM,CAAC,eAAe,EAAEjB,wBAAwB,CAAC;MAC1DM,QAAQ,CAACW,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC;MACrCX,QAAQ,CAACW,MAAM,CAAC,WAAW,EAAE,WAAWZ,SAAS,IAAIiB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC;MAGlE,IAAMT,QAAQ,SAASC,KAAK,CAAChB,cAAc,EAAE;QAC3CyB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEnB;MACR,CAAC,CAAC;MAEF,IAAI,CAACQ,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0Bb,QAAQ,CAACc,UAAU,EAAE,CAAC;MAClE;MAEA,IAAMC,IAAI,SAASf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,UAAU;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAhDY/B,uBAAuBA,CAAAiC,EAAA,EAAAC,GAAA;IAAA,OAAAjC,IAAA,CAAAkC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgDnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
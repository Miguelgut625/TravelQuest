{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supabase } from \"../../services/supabase\";\nimport { completeMission } from \"../../services/pointsService\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from \"react-native-paper/lib/module/core/theming\";\nimport { completeMission as dispatchCompleteMission } from \"../../features/journey/journeySlice\";\nimport ImageUploadModal from \"../../components/ImageUploadModal\";\nimport { setRefreshJournal } from \"../../features/journalSlice\";\nimport { createJournalEntry } from \"../../services/journalService\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar getTimeRemaining = function getTimeRemaining(endDate) {\n  var now = new Date();\n  var end = new Date(endDate);\n  var diff = end.getTime() - now.getTime();\n  if (diff <= 0) {\n    return {\n      isExpired: true,\n      text: 'Tiempo expirado'\n    };\n  }\n  var days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  var hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  var minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n  if (days > 0) {\n    return {\n      isExpired: false,\n      text: `${days} dÃ­as restantes`\n    };\n  } else if (hours > 0) {\n    return {\n      isExpired: false,\n      text: `${hours} horas restantes`\n    };\n  } else {\n    return {\n      isExpired: false,\n      text: `${minutes} minutos restantes`\n    };\n  }\n};\nvar MissionCard = function MissionCard(_ref) {\n  var mission = _ref.mission,\n    onComplete = _ref.onComplete;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showUploadModal = _useState2[0],\n    setShowUploadModal = _useState2[1];\n  var timeRemaining = getTimeRemaining(mission.end_date);\n  var isExpired = timeRemaining.isExpired && !mission.completed;\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    completingMission = _useState4[0],\n    setCompletingMission = _useState4[1];\n  var handleMissionPress = function handleMissionPress() {\n    if (!mission.completed && !isExpired) {\n      setShowUploadModal(true);\n    }\n  };\n  var handleUploadSuccess = function handleUploadSuccess(imageUrl) {\n    setShowUploadModal(false);\n    onComplete(imageUrl);\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(TouchableOpacity, {\n      style: [styles.card, mission.completed && styles.completedCard, isExpired && styles.expiredCard],\n      onPress: handleMissionPress,\n      disabled: mission.completed || isExpired || completingMission,\n      children: [_jsxs(View, {\n        style: styles.cardHeader,\n        children: [_jsx(Text, {\n          style: styles.cardTitle,\n          children: mission.challenge.title\n        }), _jsxs(View, {\n          style: styles.badgeContainer,\n          children: [_jsx(Text, {\n            style: [styles.badge, {\n              backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000'\n            }],\n            children: mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'\n          }), _jsx(Text, {\n            style: [styles.timeRemaining, isExpired && styles.expiredTime],\n            children: timeRemaining.text\n          })]\n        })]\n      }), _jsx(Text, {\n        style: styles.cardDescription,\n        children: mission.challenge.description\n      }), _jsxs(View, {\n        style: styles.cardFooter,\n        children: [_jsxs(Text, {\n          style: styles.difficulty,\n          children: [\"Dificultad: \", mission.challenge.difficulty]\n        }), _jsxs(Text, {\n          style: styles.points,\n          children: [mission.challenge.points, \" puntos\"]\n        })]\n      }), completingMission && _jsxs(View, {\n        style: styles.loadingOverlay,\n        children: [_jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"#FFFFFF\"\n        }), _jsx(Text, {\n          style: styles.loadingText,\n          children: \"Completando misi\\xF3n...\"\n        })]\n      })]\n    }), _jsx(ImageUploadModal, {\n      visible: showUploadModal,\n      missionId: mission.id,\n      missionTitle: mission.challenge.title,\n      onClose: function onClose() {\n        return setShowUploadModal(false);\n      },\n      onSuccess: handleUploadSuccess\n    })]\n  });\n};\nvar CityCard = function CityCard(_ref2) {\n  var cityName = _ref2.cityName,\n    totalMissions = _ref2.totalMissions,\n    completedMissions = _ref2.completedMissions,\n    expiredMissions = _ref2.expiredMissions,\n    onPress = _ref2.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: styles.cityCard,\n    onPress: onPress,\n    children: [_jsxs(View, {\n      style: styles.cityCardContent,\n      children: [_jsxs(View, {\n        style: styles.cityInfo,\n        children: [_jsx(Text, {\n          style: styles.cityName,\n          children: cityName\n        }), _jsxs(Text, {\n          style: styles.missionCount,\n          children: [completedMissions, \"/\", totalMissions, \" misiones completadas\"]\n        })]\n      }), _jsx(Ionicons, {\n        name: \"chevron-forward\",\n        size: 24,\n        color: \"#666\"\n      })]\n    }), _jsx(View, {\n      style: styles.progressBar,\n      children: _jsx(View, {\n        style: [styles.progressFill, {\n          width: `${completedMissions / totalMissions * 100}%`\n        }]\n      })\n    })]\n  });\n};\nvar MissionsScreen = function MissionsScreen(_ref3) {\n  var route = _ref3.route,\n    navigation = _ref3.navigation;\n  var _ref4 = route.params || {},\n    journeyId = _ref4.journeyId;\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    missions = _useState6[0],\n    setMissions = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    error = _useState10[0],\n    setError = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    completingMission = _useState12[0],\n    setCompletingMission = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    userPoints = _useState14[0],\n    setUserPoints = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    selectedCity = _useState16[0],\n    setSelectedCity = _useState16[1];\n  var dispatch = useDispatch();\n  var theme = useTheme();\n  var fetchMissions = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      if (!(user != null && user.id)) {\n        setError('Usuario no autenticado');\n        setLoading(false);\n        return;\n      }\n      try {\n        var _yield$supabase$from$ = yield supabase.from('journeys').select(`\n          id,\n          description,\n          created_at,\n          cities (\n            name\n          ),\n          journeys_missions!inner (\n            id,\n            completed,\n            challengeId,\n            end_date,\n            challenges!inner (\n              id,\n              title,\n              description,\n              difficulty,\n              points\n            )\n          )\n        `).eq('userId', user.id).order('created_at', {\n            ascending: false\n          }),\n          journeys = _yield$supabase$from$.data,\n          journeysError = _yield$supabase$from$.error;\n        if (journeysError) throw journeysError;\n        if (!journeys || journeys.length === 0) {\n          setError('No hay viajes disponibles');\n          setLoading(false);\n          return;\n        }\n        var allMissions = journeys.flatMap(function (journey) {\n          return journey.journeys_missions.map(function (jm) {\n            var _journey$cities;\n            return {\n              id: jm.id,\n              completed: jm.completed,\n              cityName: ((_journey$cities = journey.cities) == null ? void 0 : _journey$cities.name) || 'Ciudad Desconocida',\n              end_date: jm.end_date,\n              challenge: {\n                title: jm.challenges.title,\n                description: jm.challenges.description,\n                difficulty: jm.challenges.difficulty,\n                points: jm.challenges.points\n              }\n            };\n          });\n        });\n        var missionsByCity = {};\n        allMissions.forEach(function (mission) {\n          if (!missionsByCity[mission.cityName]) {\n            missionsByCity[mission.cityName] = {\n              completed: [],\n              pending: [],\n              expired: []\n            };\n          }\n          if (mission.completed) {\n            missionsByCity[mission.cityName].completed.push(mission);\n          } else {\n            missionsByCity[mission.cityName].pending.push(mission);\n          }\n        });\n        setMissions(missionsByCity);\n      } catch (error) {\n        console.error('Error fetching missions:', error);\n        setError('Error al cargar las misiones');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchMissions() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    fetchMissions();\n  }, [journeyId]);\n  var handleCompleteMission = function () {\n    var _ref6 = _asyncToGenerator(function* (missionId, imageUrl) {\n      try {\n        setCompletingMission(true);\n        console.log('Completando misiÃ³n:', {\n          missionId: missionId,\n          imageUrl: imageUrl\n        });\n        if (!(user != null && user.id)) {\n          throw new Error('Usuario no autenticado');\n        }\n        yield createJournalEntry({\n          userId: user.id,\n          missionId: missionId,\n          photos: [imageUrl || ''],\n          title: 'MisiÃ³n completada',\n          content: 'MisiÃ³n completada con Ã©xito',\n          cityId: selectedCity || 'Ciudad Desconocida'\n        });\n        var points = yield completeMission(missionId, user.id, imageUrl);\n        console.log('MisiÃ³n completada, puntos:', points);\n        var updatedMissions = _objectSpread({}, missions);\n        var missionFound = false;\n        for (var city in updatedMissions) {\n          if (!updatedMissions[city]) {\n            console.warn(`Ciudad ${city} no tiene estructura de misiones`);\n            continue;\n          }\n          if (updatedMissions[city].pending) {\n            var pendingIndex = updatedMissions[city].pending.findIndex(function (m) {\n              return m.id === missionId;\n            });\n            if (pendingIndex !== -1) {\n              var mission = _objectSpread(_objectSpread({}, updatedMissions[city].pending[pendingIndex]), {}, {\n                completed: true\n              });\n              updatedMissions[city].pending.splice(pendingIndex, 1);\n              updatedMissions[city].completed.push(mission);\n              missionFound = true;\n              break;\n            }\n          }\n          if (!missionFound && updatedMissions[city].expired) {\n            var expiredIndex = updatedMissions[city].expired.findIndex(function (m) {\n              return m.id === missionId;\n            });\n            if (expiredIndex !== -1) {\n              var _mission = _objectSpread(_objectSpread({}, updatedMissions[city].expired[expiredIndex]), {}, {\n                completed: true\n              });\n              updatedMissions[city].expired.splice(expiredIndex, 1);\n              updatedMissions[city].completed.push(_mission);\n              missionFound = true;\n              break;\n            }\n          }\n          if (!missionFound && updatedMissions[city].completed) {\n            var completedIndex = updatedMissions[city].completed.findIndex(function (m) {\n              return m.id === missionId;\n            });\n            if (completedIndex !== -1) {\n              console.log('La misiÃ³n ya estaba completada');\n              missionFound = true;\n              break;\n            }\n          }\n        }\n        if (!missionFound) {\n          console.warn('No se encontrÃ³ la misiÃ³n con ID:', missionId);\n        }\n        setMissions(updatedMissions);\n        dispatch(dispatchCompleteMission(missionId));\n        Alert.alert('MisiÃ³n Completada', `Â¡Felicidades! Has completado la misiÃ³n y has ganado ${points} puntos.\\n\\nÂ¿Quieres ver tu entrada en el diario de viaje?`, [{\n          text: 'Ver Diario',\n          onPress: function onPress() {\n            if (typeof dispatch === 'function') {\n              dispatch(setRefreshJournal(true));\n            }\n            navigation.navigate('Journal', {\n              refresh: true\n            });\n          }\n        }, {\n          text: 'Continuar',\n          style: 'cancel'\n        }]);\n      } catch (error) {\n        console.error('Error completando misiÃ³n:', error);\n        Alert.alert('Error', 'No se pudo completar la misiÃ³n');\n      } finally {\n        setCompletingMission(false);\n      }\n    });\n    return function handleCompleteMission(_x, _x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  if (loading) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Cargando misiones...\"\n      })]\n    });\n  }\n  if (error) {\n    return _jsxs(View, {\n      style: styles.errorContainer,\n      children: [_jsx(Text, {\n        style: styles.errorText,\n        children: error\n      }), _jsx(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: fetchMissions,\n        children: _jsx(Text, {\n          style: styles.retryButtonText,\n          children: \"Reintentar\"\n        })\n      })]\n    });\n  }\n  if (!selectedCity) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.header,\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"Tus Ciudades\"\n        }), _jsxs(Text, {\n          style: styles.pointsText,\n          children: [\"Puntos: \", userPoints]\n        })]\n      }), _jsx(ScrollView, {\n        style: styles.citiesList,\n        children: Object.entries(missions).map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n            cityName = _ref8[0],\n            missions = _ref8[1];\n          return _jsx(CityCard, {\n            cityName: cityName,\n            totalMissions: missions.completed.length + missions.pending.length,\n            completedMissions: missions.completed.length,\n            expiredMissions: missions.expired.length,\n            onPress: function onPress() {\n              return setSelectedCity(cityName);\n            }\n          }, cityName);\n        })\n      })]\n    });\n  }\n  var cityData = missions[selectedCity];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsxs(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: function onPress() {\n          return setSelectedCity(null);\n        },\n        children: [_jsx(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#333\"\n        }), _jsx(Text, {\n          style: styles.backButtonText,\n          children: \"Ciudades\"\n        })]\n      }), _jsxs(Text, {\n        style: styles.pointsText,\n        children: [\"Puntos: \", userPoints]\n      })]\n    }), _jsx(Text, {\n      style: styles.cityTitle,\n      children: selectedCity\n    }), _jsxs(ScrollView, {\n      style: styles.missionsList,\n      children: [cityData.pending.length > 0 && _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Misiones Pendientes\"\n        }), cityData.pending.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete(imageUrl) {\n              return handleCompleteMission(mission.id, imageUrl);\n            }\n          }, mission.id);\n        })]\n      }), cityData.expired.length > 0 && _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.completedDivider,\n          children: [_jsx(View, {\n            style: styles.dividerLine\n          }), _jsx(Text, {\n            style: [styles.completedText, {\n              color: '#f44336'\n            }],\n            children: \"Expiradas\"\n          }), _jsx(View, {\n            style: styles.dividerLine\n          })]\n        }), cityData.expired.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {}\n          }, mission.id);\n        })]\n      }), cityData.completed.length > 0 && _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.completedDivider,\n          children: [_jsx(View, {\n            style: styles.dividerLine\n          }), _jsx(Text, {\n            style: styles.completedText,\n            children: \"Completadas\"\n          }), _jsx(View, {\n            style: styles.dividerLine\n          })]\n        }), cityData.completed.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {}\n          }, mission.id);\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  backButtonText: {\n    fontSize: 16,\n    marginLeft: 5,\n    color: '#333'\n  },\n  cityTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  loadingText: {\n    marginTop: 10,\n    color: '#666'\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    color: 'red',\n    textAlign: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  pointsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#4CAF50'\n  },\n  citiesList: {\n    flex: 1\n  },\n  cityCard: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 15,\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3\n  },\n  cityCardContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cityInfo: {\n    flex: 1\n  },\n  cityName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 5\n  },\n  missionCount: {\n    fontSize: 14,\n    color: '#666'\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 2,\n    overflow: 'hidden'\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#4CAF50'\n  },\n  missionsList: {\n    flex: 1\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginBottom: 15\n  },\n  completedDivider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#4CAF50'\n  },\n  completedText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n    marginHorizontal: 10,\n    fontSize: 16\n  },\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  completedCard: {\n    opacity: 0.8\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flex: 1\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 15,\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  badgeContainer: {\n    flexDirection: 'column',\n    alignItems: 'flex-end'\n  },\n  cardDescription: {\n    color: '#666',\n    marginBottom: 10\n  },\n  cardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  difficulty: {\n    color: '#666',\n    fontSize: 12\n  },\n  points: {\n    color: '#4CAF50',\n    fontWeight: 'bold'\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  retryButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  },\n  expiredCard: {\n    borderColor: '#f44336',\n    borderWidth: 1\n  },\n  timeRemaining: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 4\n  },\n  expiredTime: {\n    color: '#f44336'\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 8\n  }\n});\nexport default MissionsScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","ActivityIndicator","Alert","ScrollView","useSelector","useDispatch","supabase","completeMission","Ionicons","useTheme","dispatchCompleteMission","ImageUploadModal","setRefreshJournal","createJournalEntry","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","getTimeRemaining","endDate","now","Date","end","diff","getTime","isExpired","text","days","Math","floor","hours","minutes","MissionCard","_ref","mission","onComplete","_useState","_useState2","_slicedToArray","showUploadModal","setShowUploadModal","timeRemaining","end_date","completed","_useState3","_useState4","completingMission","setCompletingMission","handleMissionPress","handleUploadSuccess","imageUrl","children","style","styles","card","completedCard","expiredCard","onPress","disabled","cardHeader","cardTitle","challenge","title","badgeContainer","badge","backgroundColor","expiredTime","cardDescription","description","cardFooter","difficulty","points","loadingOverlay","size","color","loadingText","visible","missionId","id","missionTitle","onClose","onSuccess","CityCard","_ref2","cityName","totalMissions","completedMissions","expiredMissions","cityCard","cityCardContent","cityInfo","missionCount","name","progressBar","progressFill","width","MissionsScreen","_ref3","route","navigation","_ref4","params","journeyId","_useSelector","state","auth","user","_useState5","_useState6","missions","setMissions","_useState7","_useState8","loading","setLoading","_useState9","_useState10","error","setError","_useState11","_useState12","_useState13","_useState14","userPoints","setUserPoints","_useState15","_useState16","selectedCity","setSelectedCity","dispatch","theme","fetchMissions","_ref5","_asyncToGenerator","_yield$supabase$from$","from","select","eq","order","ascending","journeys","data","journeysError","length","allMissions","flatMap","journey","journeys_missions","map","jm","_journey$cities","cities","challenges","missionsByCity","forEach","pending","expired","push","console","apply","arguments","handleCompleteMission","_ref6","log","Error","userId","photos","content","cityId","updatedMissions","_objectSpread","missionFound","city","warn","pendingIndex","findIndex","m","splice","expiredIndex","completedIndex","alert","navigate","refresh","_x","_x2","loadingContainer","errorContainer","errorText","retryButton","retryButtonText","container","header","pointsText","citiesList","Object","entries","_ref7","_ref8","cityData","backButton","backButtonText","cityTitle","missionsList","sectionTitle","completedDivider","dividerLine","completedText","create","flex","padding","flexDirection","justifyContent","alignItems","marginBottom","fontSize","marginLeft","fontWeight","marginTop","textAlign","borderRadius","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","overflow","marginVertical","marginHorizontal","opacity","paddingHorizontal","paddingVertical","borderColor","borderWidth","position","top","left","right","bottom"],"sources":["C:/Users/migue/TravelQuest/src/screens/main/MissionsScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, Alert, ScrollView } from 'react-native';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { supabase } from '../../services/supabase';\r\nimport { completeMission } from '../../services/pointsService';\r\nimport { RouteProp } from '@react-navigation/native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { Card, ProgressBar, useTheme, Surface } from 'react-native-paper';\r\nimport { completeMission as dispatchCompleteMission } from '../../features/journey/journeySlice';\r\nimport ImageUploadModal from '../../components/ImageUploadModal';\r\nimport { setRefreshJournal } from '../../features/journalSlice';\r\nimport { createJournalEntry } from '../../services/journalService';\r\n\r\ntype MissionsScreenRouteProp = RouteProp<{\r\n  Missions: {\r\n    journeyId: string;\r\n    challenges: JourneyMission[];\r\n  };\r\n}, 'Missions'>;\r\n\r\ninterface MissionsScreenProps {\r\n  route: MissionsScreenRouteProp;\r\n  navigation: any;\r\n}\r\n\r\ninterface CityMissions {\r\n  [cityName: string]: {\r\n    completed: JourneyMission[];\r\n    pending: JourneyMission[];\r\n    expired: JourneyMission[];\r\n  };\r\n}\r\n\r\ninterface JourneyMission {\r\n  id: string;\r\n  completed: boolean;\r\n  cityName: string;\r\n  end_date: string;\r\n  challenge: {\r\n    title: string;\r\n    description: string;\r\n    difficulty: string;\r\n    points: number;\r\n  };\r\n}\r\n\r\ninterface Journey {\r\n  id: string;\r\n  description: string;\r\n  created_at: string;\r\n  cities?: {\r\n    name: string;\r\n  };\r\n  journeys_missions: {\r\n    id: string;\r\n    completed: boolean;\r\n    challengeId: string;\r\n    end_date: string;\r\n    challenges: {\r\n      id: string;\r\n      title: string;\r\n      description: string;\r\n      difficulty: string;\r\n      points: number;\r\n    };\r\n  }[];\r\n}\r\n\r\nconst getTimeRemaining = (endDate: string) => {\r\n  const now = new Date();\r\n  const end = new Date(endDate);\r\n  const diff = end.getTime() - now.getTime();\r\n  \r\n  if (diff <= 0) {\r\n    return {\r\n      isExpired: true,\r\n      text: 'Tiempo expirado'\r\n    };\r\n  }\r\n\r\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n  if (days > 0) {\r\n    return {\r\n      isExpired: false,\r\n      text: `${days} dÃ­as restantes`\r\n    };\r\n  } else if (hours > 0) {\r\n    return {\r\n      isExpired: false,\r\n      text: `${hours} horas restantes`\r\n    };\r\n  } else {\r\n    return {\r\n      isExpired: false,\r\n      text: `${minutes} minutos restantes`\r\n    };\r\n  }\r\n};\r\n\r\nconst MissionCard = ({ mission, onComplete }: { mission: JourneyMission; onComplete: (imageUrl?: string) => void }) => {\r\n  const [showUploadModal, setShowUploadModal] = useState(false);\r\n  const timeRemaining = getTimeRemaining(mission.end_date);\r\n  const isExpired = timeRemaining.isExpired && !mission.completed;\r\n  const [completingMission, setCompletingMission] = useState(false);\r\n\r\n  const handleMissionPress = () => {\r\n    if (!mission.completed && !isExpired) {\r\n      setShowUploadModal(true);\r\n    }\r\n  };\r\n\r\n  const handleUploadSuccess = (imageUrl: string) => {\r\n    // Cerrar el modal\r\n    setShowUploadModal(false);\r\n    // Llamar a la funciÃ³n onComplete que manejarÃ¡ el proceso de completar la misiÃ³n\r\n    onComplete(imageUrl);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity\r\n        style={[\r\n          styles.card,\r\n          mission.completed && styles.completedCard,\r\n          isExpired && styles.expiredCard\r\n        ]}\r\n        onPress={handleMissionPress}\r\n        disabled={mission.completed || isExpired || completingMission}\r\n      >\r\n        <View style={styles.cardHeader}>\r\n          <Text style={styles.cardTitle}>{mission.challenge.title}</Text>\r\n          <View style={styles.badgeContainer}>\r\n            <Text style={[\r\n              styles.badge,\r\n              { backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000' }\r\n            ]}>\r\n              {mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'}\r\n            </Text>\r\n            <Text style={[\r\n              styles.timeRemaining,\r\n              isExpired && styles.expiredTime\r\n            ]}>\r\n              {timeRemaining.text}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <Text style={styles.cardDescription}>{mission.challenge.description}</Text>\r\n        <View style={styles.cardFooter}>\r\n          <Text style={styles.difficulty}>Dificultad: {mission.challenge.difficulty}</Text>\r\n          <Text style={styles.points}>{mission.challenge.points} puntos</Text>\r\n        </View>\r\n\r\n        {completingMission && (\r\n          <View style={styles.loadingOverlay}>\r\n            <ActivityIndicator size=\"large\" color=\"#FFFFFF\" />\r\n            <Text style={styles.loadingText}>Completando misiÃ³n...</Text>\r\n          </View>\r\n        )}\r\n      </TouchableOpacity>\r\n\r\n      <ImageUploadModal\r\n        visible={showUploadModal}\r\n        missionId={mission.id}\r\n        missionTitle={mission.challenge.title}\r\n        onClose={() => setShowUploadModal(false)}\r\n        onSuccess={handleUploadSuccess}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst CityCard = ({ cityName, totalMissions, completedMissions, expiredMissions, onPress }: { \r\n  cityName: string; \r\n  totalMissions: number;\r\n  completedMissions: number;\r\n  expiredMissions?: number;\r\n  onPress: () => void;\r\n}) => (\r\n  <TouchableOpacity style={styles.cityCard} onPress={onPress}>\r\n    <View style={styles.cityCardContent}>\r\n      <View style={styles.cityInfo}>\r\n        <Text style={styles.cityName}>{cityName}</Text>\r\n        <Text style={styles.missionCount}>\r\n          {completedMissions}/{totalMissions} misiones completadas\r\n        </Text>\r\n      </View>\r\n      <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\r\n    </View>\r\n    <View style={styles.progressBar}>\r\n      <View \r\n        style={[\r\n          styles.progressFill, \r\n          { width: `${(completedMissions / totalMissions) * 100}%` }\r\n        ]} \r\n      />\r\n    </View>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst MissionsScreen = ({ route, navigation }: MissionsScreenProps) => {\r\n  const { journeyId } = route.params || {};\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [missions, setMissions] = useState<CityMissions>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [completingMission, setCompletingMission] = useState(false);\r\n  const [userPoints, setUserPoints] = useState(0);\r\n  const [selectedCity, setSelectedCity] = useState<string | null>(null);\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n\r\n  const fetchMissions = async () => {\r\n    if (!user?.id) {\r\n      setError('Usuario no autenticado');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: journeys, error: journeysError } = await supabase\r\n        .from('journeys')\r\n        .select(`\r\n          id,\r\n          description,\r\n          created_at,\r\n          cities (\r\n            name\r\n          ),\r\n          journeys_missions!inner (\r\n            id,\r\n            completed,\r\n            challengeId,\r\n            end_date,\r\n            challenges!inner (\r\n              id,\r\n              title,\r\n              description,\r\n              difficulty,\r\n              points\r\n            )\r\n          )\r\n        `)\r\n        .eq('userId', user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (journeysError) throw journeysError;\r\n\r\n      if (!journeys || journeys.length === 0) {\r\n        setError('No hay viajes disponibles');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const allMissions = journeys.flatMap((journey: Journey) => \r\n        journey.journeys_missions.map((jm) => ({\r\n          id: jm.id,\r\n          completed: jm.completed,\r\n          cityName: journey.cities?.name || 'Ciudad Desconocida',\r\n          end_date: jm.end_date,\r\n          challenge: {\r\n            title: jm.challenges.title,\r\n            description: jm.challenges.description,\r\n            difficulty: jm.challenges.difficulty,\r\n            points: jm.challenges.points\r\n          }\r\n        }))\r\n      );\r\n\r\n      // Organizar misiones por ciudad\r\n      const missionsByCity: CityMissions = {};\r\n      allMissions.forEach((mission: JourneyMission) => {\r\n        if (!missionsByCity[mission.cityName]) {\r\n          missionsByCity[mission.cityName] = {\r\n            completed: [],\r\n            pending: [],\r\n            expired: []\r\n          };\r\n        }\r\n        if (mission.completed) {\r\n          missionsByCity[mission.cityName].completed.push(mission);\r\n        } else {\r\n          missionsByCity[mission.cityName].pending.push(mission);\r\n        }\r\n      });\r\n\r\n      setMissions(missionsByCity);\r\n    } catch (error) {\r\n      console.error('Error fetching missions:', error);\r\n      setError('Error al cargar las misiones');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMissions();\r\n  }, [journeyId]);\r\n\r\n  const handleCompleteMission = async (missionId: string, imageUrl?: string) => {\r\n    try {\r\n      setCompletingMission(true);\r\n\r\n      console.log('Completando misiÃ³n:', { missionId, imageUrl });\r\n\r\n      if (!user?.id) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      // Crear entrada en el diario\r\n      await createJournalEntry({\r\n        userId: user.id,\r\n        missionId: missionId,\r\n        photos: [imageUrl || ''],\r\n        title: 'MisiÃ³n completada',\r\n        content: 'MisiÃ³n completada con Ã©xito',\r\n        cityId: selectedCity || 'Ciudad Desconocida'\r\n      });\r\n\r\n      // Completar la misiÃ³n\r\n      const points = await completeMission(missionId, user.id, imageUrl);\r\n\r\n      console.log('MisiÃ³n completada, puntos:', points);\r\n\r\n      // Actualizar la lista de misiones localmente\r\n      const updatedMissions = { ...missions };\r\n\r\n      // Buscar la misiÃ³n en todas las ciudades\r\n      let missionFound = false;\r\n\r\n      for (const city in updatedMissions) {\r\n        // Verificar que updatedMissions[city] existe y tiene la estructura esperada\r\n        if (!updatedMissions[city]) {\r\n          console.warn(`Ciudad ${city} no tiene estructura de misiones`);\r\n          continue;\r\n        }\r\n\r\n        // Buscar en misiones pendientes\r\n        if (updatedMissions[city].pending) {\r\n          const pendingIndex = updatedMissions[city].pending.findIndex(m => m.id === missionId);\r\n          if (pendingIndex !== -1) {\r\n            // Encontramos la misiÃ³n en pendientes, moverla a completadas\r\n            const mission = { ...updatedMissions[city].pending[pendingIndex], completed: true };\r\n            updatedMissions[city].pending.splice(pendingIndex, 1);\r\n            updatedMissions[city].completed.push(mission);\r\n            missionFound = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Buscar en misiones expiradas (por si acaso)\r\n        if (!missionFound && updatedMissions[city].expired) {\r\n          const expiredIndex = updatedMissions[city].expired.findIndex(m => m.id === missionId);\r\n          if (expiredIndex !== -1) {\r\n            // Encontramos la misiÃ³n en expiradas, moverla a completadas\r\n            const mission = { ...updatedMissions[city].expired[expiredIndex], completed: true };\r\n            updatedMissions[city].expired.splice(expiredIndex, 1);\r\n            updatedMissions[city].completed.push(mission);\r\n            missionFound = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // No es necesario buscar en completadas, pero por si acaso\r\n        if (!missionFound && updatedMissions[city].completed) {\r\n          const completedIndex = updatedMissions[city].completed.findIndex(m => m.id === missionId);\r\n          if (completedIndex !== -1) {\r\n            console.log('La misiÃ³n ya estaba completada');\r\n            missionFound = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!missionFound) {\r\n        console.warn('No se encontrÃ³ la misiÃ³n con ID:', missionId);\r\n      }\r\n\r\n      setMissions(updatedMissions);\r\n      dispatch(dispatchCompleteMission(missionId));\r\n\r\n      // Alerta de Ã©xito con puntos\r\n      Alert.alert(\r\n        'MisiÃ³n Completada',\r\n        `Â¡Felicidades! Has completado la misiÃ³n y has ganado ${points} puntos.\\n\\nÂ¿Quieres ver tu entrada en el diario de viaje?`,\r\n        [\r\n          {\r\n            text: 'Ver Diario',\r\n            onPress: () => {\r\n              // Para Redux\r\n              if (typeof dispatch === 'function') {\r\n                dispatch(setRefreshJournal(true));\r\n              }\r\n              navigation.navigate('Journal', { refresh: true });\r\n            }\r\n          },\r\n          {\r\n            text: 'Continuar',\r\n            style: 'cancel'\r\n          }\r\n        ]\r\n      );\r\n\r\n    } catch (error) {\r\n      console.error('Error completando misiÃ³n:', error);\r\n      Alert.alert('Error', 'No se pudo completar la misiÃ³n');\r\n    } finally {\r\n      setCompletingMission(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n        <Text style={styles.loadingText}>Cargando misiones...</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <View style={styles.errorContainer}>\r\n        <Text style={styles.errorText}>{error}</Text>\r\n        <TouchableOpacity style={styles.retryButton} onPress={fetchMissions}>\r\n          <Text style={styles.retryButtonText}>Reintentar</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (!selectedCity) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>Tus Ciudades</Text>\r\n          <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n        </View>\r\n        <ScrollView style={styles.citiesList}>\r\n          {Object.entries(missions).map(([cityName, missions]) => (\r\n            <CityCard\r\n              key={cityName}\r\n              cityName={cityName}\r\n              totalMissions={missions.completed.length + missions.pending.length}\r\n              completedMissions={missions.completed.length}\r\n              expiredMissions={missions.expired.length}\r\n              onPress={() => setSelectedCity(cityName)}\r\n            />\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const cityData = missions[selectedCity];\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <TouchableOpacity \r\n          style={styles.backButton} \r\n          onPress={() => setSelectedCity(null)}\r\n        >\r\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\r\n          <Text style={styles.backButtonText}>Ciudades</Text>\r\n        </TouchableOpacity>\r\n        <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n      </View>\r\n      \r\n      <Text style={styles.cityTitle}>{selectedCity}</Text>\r\n      \r\n      <ScrollView style={styles.missionsList}>\r\n        {cityData.pending.length > 0 && (\r\n          <>\r\n            <Text style={styles.sectionTitle}>Misiones Pendientes</Text>\r\n            {cityData.pending.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={(imageUrl) => handleCompleteMission(mission.id, imageUrl)}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {cityData.expired.length > 0 && (\r\n          <>\r\n            <View style={styles.completedDivider}>\r\n              <View style={styles.dividerLine} />\r\n              <Text style={[styles.completedText, { color: '#f44336' }]}>Expiradas</Text>\r\n              <View style={styles.dividerLine} />\r\n            </View>\r\n            {cityData.expired.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => {}}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {cityData.completed.length > 0 && (\r\n          <>\r\n            <View style={styles.completedDivider}>\r\n              <View style={styles.dividerLine} />\r\n              <Text style={styles.completedText}>Completadas</Text>\r\n              <View style={styles.dividerLine} />\r\n            </View>\r\n            {cityData.completed.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => {}}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  backButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  backButtonText: {\r\n    fontSize: 16,\r\n    marginLeft: 5,\r\n    color: '#333',\r\n  },\r\n  cityTitle: {\r\n    fontSize: 28,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 20,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  loadingText: {\r\n    marginTop: 10,\r\n    color: '#666',\r\n  },\r\n  errorContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n  },\r\n  pointsText: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#4CAF50',\r\n  },\r\n  citiesList: {\r\n    flex: 1,\r\n  },\r\n  cityCard: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 15,\r\n    padding: 15,\r\n    marginBottom: 15,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 3,\r\n    elevation: 3,\r\n  },\r\n  cityCardContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cityInfo: {\r\n    flex: 1,\r\n  },\r\n  cityName: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 5,\r\n  },\r\n  missionCount: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n  },\r\n  progressBar: {\r\n    height: 4,\r\n    backgroundColor: '#E0E0E0',\r\n    borderRadius: 2,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  missionsList: {\r\n    flex: 1,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#666',\r\n    marginBottom: 15,\r\n  },\r\n  completedDivider: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 20,\r\n  },\r\n  dividerLine: {\r\n    flex: 1,\r\n    height: 1,\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  completedText: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n    marginHorizontal: 10,\r\n    fontSize: 16,\r\n  },\r\n  card: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    marginBottom: 10,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  completedCard: {\r\n    opacity: 0.8,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    flex: 1,\r\n  },\r\n  badge: {\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n    borderRadius: 15,\r\n    color: 'white',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n  badgeContainer: {\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-end',\r\n  },\r\n  cardDescription: {\r\n    color: '#666',\r\n    marginBottom: 10,\r\n  },\r\n  cardFooter: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  difficulty: {\r\n    color: '#666',\r\n    fontSize: 12,\r\n  },\r\n  points: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n  },\r\n  retryButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n  retryButtonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  expiredCard: {\r\n    borderColor: '#f44336',\r\n    borderWidth: 1,\r\n  },\r\n  timeRemaining: {\r\n    fontSize: 12,\r\n    color: '#666',\r\n    marginTop: 4,\r\n  },\r\n  expiredTime: {\r\n    color: '#f44336',\r\n  },\r\n  loadingOverlay: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderRadius: 8,\r\n  },\r\n});\r\n\r\nexport default MissionsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
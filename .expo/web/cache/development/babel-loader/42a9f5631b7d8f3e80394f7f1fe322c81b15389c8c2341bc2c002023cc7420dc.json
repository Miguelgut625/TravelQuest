{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nimport { createJournalEntry } from \"./journalService\";\nexport var getUserPoints = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('users').select('points').eq('id', userId).maybeSingle(),\n        data = _yield$supabase$from$.data,\n        error = _yield$supabase$from$.error;\n      if (error) throw error;\n      return (data == null ? void 0 : data.points) || 0;\n    } catch (error) {\n      console.error('Error obteniendo puntos del usuario:', error);\n      return 0;\n    }\n  });\n  return function getUserPoints(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addPointsToUser = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, points) {\n    try {\n      var currentPoints = yield getUserPoints(userId);\n      var _yield$supabase$from$2 = yield supabase.from('users').update({\n          points: currentPoints + points,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId),\n        error = _yield$supabase$from$2.error;\n      if (error) throw error;\n      return currentPoints + points;\n    } catch (error) {\n      console.error('Error añadiendo puntos al usuario:', error);\n      throw error;\n    }\n  });\n  return function addPointsToUser(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var deductPointsFromUser = function () {\n  var _ref3 = _asyncToGenerator(function* (userId, points) {\n    try {\n      var currentPoints = yield getUserPoints(userId);\n      if (currentPoints < points) {\n        throw new Error('No hay suficientes puntos para realizar esta acción');\n      }\n      var _yield$supabase$from$3 = yield supabase.from('users').update({\n          points: currentPoints - points,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId),\n        error = _yield$supabase$from$3.error;\n      if (error) throw error;\n      return currentPoints - points;\n    } catch (error) {\n      console.error('Error descontando puntos del usuario:', error);\n      throw error;\n    }\n  });\n  return function deductPointsFromUser(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var completeMission = function () {\n  var _ref4 = _asyncToGenerator(function* (missionId, userId, imageUrl) {\n    console.log('Iniciando completeMission con parámetros:', {\n      missionId: missionId,\n      userId: userId,\n      imageUrl: imageUrl\n    });\n    try {\n      if (!missionId || !userId) {\n        console.error('Parámetros inválidos:', {\n          missionId: missionId,\n          userId: userId\n        });\n        throw new Error('Parámetros inválidos para completar misión');\n      }\n      console.log('Obteniendo datos de la misión...');\n      var _yield$supabase$from$4 = yield supabase.from('journeys_missions').select(`\n                id,\n                journeyId,\n                challengeId,\n                completed,\n                challenges (\n                    id,\n                    title,\n                    points\n                )\n            `).eq('id', missionId).single(),\n        missionData = _yield$supabase$from$4.data,\n        missionError = _yield$supabase$from$4.error;\n      if (missionError || !missionData) {\n        console.error('Error al obtener datos de la misión:', missionError);\n        throw missionError || new Error('No se encontró la misión');\n      }\n      console.log('Datos de misión obtenidos:', missionData);\n      if (missionData.completed) {\n        console.warn('La misión ya está completada');\n        return missionData.challenges.points;\n      }\n      console.log('Marcando misión como completada...');\n      var updateData = {\n        completed: true,\n        completed_at: new Date().toISOString()\n      };\n      if (imageUrl) {\n        console.log('Añadiendo URL de imagen a picture_url:', imageUrl);\n        try {\n          updateData.picture_url = imageUrl;\n          var _yield$supabase$from$5 = yield supabase.from('journeys_missions').update(updateData).eq('id', missionId),\n            error = _yield$supabase$from$5.error;\n          if (error) {\n            console.error('Error al actualizar con picture_url:', error.message);\n            delete updateData.picture_url;\n            var _yield$supabase$from$6 = yield supabase.from('journeys_missions').update({\n                completed: true,\n                completed_at: new Date().toISOString()\n              }).eq('id', missionId),\n              error2 = _yield$supabase$from$6.error;\n            if (error2) throw error2;\n          }\n        } catch (error) {\n          console.warn('Error con la columna de imagen pero continuando:', error.message);\n        }\n      } else {\n        console.log('Actualizando sin imagen...');\n        var _yield$supabase$from$7 = yield supabase.from('journeys_missions').update({\n            completed: true,\n            completed_at: new Date().toISOString()\n          }).eq('id', missionId),\n          _error = _yield$supabase$from$7.error;\n        if (_error) throw _error;\n      }\n      var points = missionData.challenges.points;\n      console.log('Añadiendo puntos al usuario:', points);\n      yield addPointsToUser(userId, points);\n      if (imageUrl) {\n        try {\n          var _journeyData$cities;\n          console.log('Creando entrada en el diario...');\n          var _yield$supabase$from$8 = yield supabase.from('journeys').select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `).eq('id', missionData.journeyId).single(),\n            journeyData = _yield$supabase$from$8.data,\n            journeyError = _yield$supabase$from$8.error;\n          if (journeyError) {\n            console.warn('Error obteniendo datos de journey:', journeyError);\n            return points;\n          }\n          console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\n          yield createJournalEntry({\n            userId: userId,\n            cityId: journeyData.cityId,\n            missionId: missionId,\n            title: `Misión completada: ${missionData.challenges.title}`,\n            content: `He completado esta misión en ${((_journeyData$cities = journeyData.cities) == null ? void 0 : _journeyData$cities.name) || 'mi viaje'}.`,\n            photos: [imageUrl]\n          });\n          console.log('Entrada de diario creada exitosamente');\n        } catch (error) {\n          console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\n        }\n      }\n      console.log('Misión completada exitosamente, retornando puntos:', points);\n      return points;\n    } catch (error) {\n      console.error('Error en completeMission:', error);\n      throw error;\n    }\n  });\n  return function completeMission(_x6, _x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","createJournalEntry","getUserPoints","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","maybeSingle","data","error","points","console","_x","apply","arguments","addPointsToUser","_ref2","currentPoints","_yield$supabase$from$2","update","updated_at","Date","toISOString","_x2","_x3","deductPointsFromUser","_ref3","Error","_yield$supabase$from$3","_x4","_x5","completeMission","_ref4","missionId","imageUrl","log","_yield$supabase$from$4","single","missionData","missionError","completed","warn","challenges","updateData","completed_at","picture_url","_yield$supabase$from$5","message","_yield$supabase$from$6","error2","_yield$supabase$from$7","_journeyData$cities","_yield$supabase$from$8","journeyId","journeyData","journeyError","cityId","title","content","cities","name","photos","_x6","_x7","_x8"],"sources":["C:/Users/migue/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { createJournalEntry } from './journalService';\r\n\r\nexport const getUserPoints = async (userId: string) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('users')\r\n            .select('points')\r\n            .eq('id', userId)\r\n            .maybeSingle();\r\n\r\n        if (error) throw error;\r\n\r\n        return data?.points || 0;\r\n    } catch (error) {\r\n        console.error('Error obteniendo puntos del usuario:', error);\r\n        return 0; // Retornamos 0 en caso de error\r\n    }\r\n};\r\n\r\nexport const addPointsToUser = async (userId: string, points: number) => {\r\n    try {\r\n        // Primero obtenemos los puntos actuales\r\n        const currentPoints = await getUserPoints(userId);\r\n\r\n        // Actualizamos los puntos\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({\r\n                points: currentPoints + points,\r\n                updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId);\r\n\r\n        if (error) throw error;\r\n\r\n        return currentPoints + points;\r\n    } catch (error) {\r\n        console.error('Error añadiendo puntos al usuario:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deductPointsFromUser = async (userId: string, points: number) => {\r\n    try {\r\n        // Primero obtenemos los puntos actuales\r\n        const currentPoints = await getUserPoints(userId);\r\n        \r\n        // Verificamos que el usuario tenga suficientes puntos\r\n        if (currentPoints < points) {\r\n            throw new Error('No hay suficientes puntos para realizar esta acción');\r\n        }\r\n\r\n        // Actualizamos los puntos\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({\r\n                points: currentPoints - points,\r\n                updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId);\r\n\r\n        if (error) throw error;\r\n\r\n        return currentPoints - points;\r\n    } catch (error) {\r\n        console.error('Error descontando puntos del usuario:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const completeMission = async (missionId: string, userId: string, imageUrl?: string) => {\r\n    console.log('Iniciando completeMission con parámetros:', { missionId, userId, imageUrl });\r\n    \r\n    try {\r\n        // Verificar que tenemos los datos necesarios\r\n        if (!missionId || !userId) {\r\n            console.error('Parámetros inválidos:', { missionId, userId });\r\n            throw new Error('Parámetros inválidos para completar misión');\r\n        }\r\n        \r\n        // Obtener datos de la misión para asignar puntos\r\n        console.log('Obteniendo datos de la misión...');\r\n        const { data: missionData, error: missionError } = await supabase\r\n            .from('journeys_missions')\r\n            .select(`\r\n                id,\r\n                journeyId,\r\n                challengeId,\r\n                completed,\r\n                challenges (\r\n                    id,\r\n                    title,\r\n                    points\r\n                )\r\n            `)\r\n            .eq('id', missionId)\r\n            .single();\r\n\r\n        if (missionError || !missionData) {\r\n            console.error('Error al obtener datos de la misión:', missionError);\r\n            throw missionError || new Error('No se encontró la misión');\r\n        }\r\n\r\n        console.log('Datos de misión obtenidos:', missionData);\r\n\r\n        // Verificar que la misión no esté ya completada\r\n        if (missionData.completed) {\r\n            console.warn('La misión ya está completada');\r\n            return missionData.challenges.points;\r\n        }\r\n\r\n        // Marcar la misión como completada\r\n        console.log('Marcando misión como completada...');\r\n        \r\n        // Preparar datos para la actualización\r\n        const updateData: any = {\r\n            completed: true,\r\n            completed_at: new Date().toISOString()\r\n        };\r\n        \r\n        // Añadir URL de imagen si existe - CORREGIDO para usar directamente picture_url\r\n        if (imageUrl) {\r\n            console.log('Añadiendo URL de imagen a picture_url:', imageUrl);\r\n            \r\n            try {\r\n                // Usar directamente picture_url\r\n                updateData.picture_url = imageUrl;\r\n                const { error } = await supabase\r\n                    .from('journeys_missions')\r\n                    .update(updateData)\r\n                    .eq('id', missionId);\r\n                    \r\n                if (error) {\r\n                    console.error('Error al actualizar con picture_url:', error.message);\r\n                    // Si falla, actualizar sin la imagen\r\n                    delete updateData.picture_url;\r\n                    const { error: error2 } = await supabase\r\n                        .from('journeys_missions')\r\n                        .update({ completed: true, completed_at: new Date().toISOString() })\r\n                        .eq('id', missionId);\r\n                        \r\n                    if (error2) throw error2;\r\n                }\r\n            } catch (error: any) {\r\n                console.warn('Error con la columna de imagen pero continuando:', error.message);\r\n            }\r\n        } else {\r\n            // Si no hay imagen, solo actualizar el estado completado\r\n            console.log('Actualizando sin imagen...');\r\n            const { error } = await supabase\r\n                .from('journeys_missions')\r\n                .update({ completed: true, completed_at: new Date().toISOString() })\r\n                .eq('id', missionId);\r\n                \r\n            if (error) throw error;\r\n        }\r\n        \r\n        // Añadir los puntos al usuario\r\n        const points = missionData.challenges.points;\r\n        console.log('Añadiendo puntos al usuario:', points);\r\n        await addPointsToUser(userId, points);\r\n        \r\n        // Si hay una imagen, intentamos agregar una entrada al diario\r\n        if (imageUrl) {\r\n            try {\r\n                console.log('Creando entrada en el diario...');\r\n                // Obtener información de la ciudad\r\n                const { data: journeyData, error: journeyError } = await supabase\r\n                    .from('journeys')\r\n                    .select(`\r\n                        id,\r\n                        cityId,\r\n                        cities (name)\r\n                    `)\r\n                    .eq('id', missionData.journeyId)\r\n                    .single();\r\n\r\n                if (journeyError) {\r\n                    console.warn('Error obteniendo datos de journey:', journeyError);\r\n                    return points; // Retornamos puntos y no creamos entrada en el diario\r\n                }\r\n                \r\n                // Crear entrada en el diario\r\n                console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\r\n                \r\n                await createJournalEntry({\r\n                    userId: userId,\r\n                    cityId: journeyData.cityId,\r\n                    missionId: missionId,\r\n                    title: `Misión completada: ${missionData.challenges.title}`,\r\n                    content: `He completado esta misión en ${journeyData.cities?.name || 'mi viaje'}.`,\r\n                    photos: [imageUrl]\r\n                });\r\n                \r\n                console.log('Entrada de diario creada exitosamente');\r\n            } catch (error) {\r\n                console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\r\n                // No lanzamos el error para no interrumpir el flujo\r\n            }\r\n        }\r\n\r\n        console.log('Misión completada exitosamente, retornando puntos:', points);\r\n        return points;\r\n    } catch (error) {\r\n        console.error('Error en completeMission:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
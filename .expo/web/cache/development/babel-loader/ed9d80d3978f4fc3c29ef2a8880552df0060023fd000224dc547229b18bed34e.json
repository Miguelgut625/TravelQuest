{"ast":null,"code":"import { CLOUDINARY_CONFIG } from '../config/cloudinary';\nconst CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\nconst CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\nexport const isCloudinaryConfigured = () => {\n  return !!CLOUDINARY_CONFIG.CLOUD_NAME && !!CLOUDINARY_CONFIG.UPLOAD_PRESET;\n};\nexport const getCloudinaryConfigInfo = () => {\n  const isConfigured = isCloudinaryConfigured();\n  return {\n    isConfigured,\n    usingFallback: __DEV__ && !isConfigured,\n    cloudName: CLOUDINARY_CONFIG.CLOUD_NAME,\n    uploadPreset: CLOUDINARY_CONFIG.UPLOAD_PRESET\n  };\n};\nconst isBase64Image = uri => {\n  return uri.startsWith('data:image');\n};\nexport const uploadImageToCloudinary = async (imageUri, missionId) => {\n  if (!isCloudinaryConfigured()) {\n    if (__DEV__) {\n      console.warn('Cloudinary no está configurado. En modo de desarrollo, retornando URI local.');\n      return imageUri;\n    }\n    throw new Error('Cloudinary no está configurado correctamente');\n  }\n  try {\n    let formData = new FormData();\n    if (imageUri.startsWith('data:image')) {\n      formData.append('file', imageUri);\n    } else {\n      const filename = imageUri.split('/').pop() || `mission_${missionId}_${Date.now()}`;\n      const file = {\n        uri: imageUri,\n        type: 'image/jpeg',\n        name: filename\n      };\n      formData.append('file', file);\n    }\n    formData.append('upload_preset', CLOUDINARY_CONFIG.UPLOAD_PRESET);\n    if (CLOUDINARY_CONFIG.FOLDER) {\n      formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\n    }\n    if (CLOUDINARY_CONFIG.TRANSFORMATION) {\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH) {\n        formData.append('width', CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH.toString());\n      }\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT) {\n        formData.append('height', CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT.toString());\n      }\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY) {\n        formData.append('quality', CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY.toString());\n      }\n    }\n    const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.CLOUD_NAME}/upload`;\n    console.log('Intentando subir imagen a:', cloudinaryUrl);\n    const response = await fetch(cloudinaryUrl, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error en la respuesta de Cloudinary (${response.status}): ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('Imagen subida exitosamente a Cloudinary:', data.secure_url);\n    return data.secure_url;\n  } catch (error) {\n    console.error('Error subiendo imagen a Cloudinary:', error);\n    if (__DEV__) {\n      console.warn('En modo desarrollo, retornando URI local como fallback.');\n      return imageUri;\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["CLOUDINARY_CONFIG","CLOUDINARY_CLOUD_NAME","CLOUD_NAME","CLOUDINARY_UPLOAD_PRESET","UPLOAD_PRESET","CLOUDINARY_URL","isCloudinaryConfigured","getCloudinaryConfigInfo","isConfigured","usingFallback","__DEV__","cloudName","uploadPreset","isBase64Image","uri","startsWith","uploadImageToCloudinary","imageUri","missionId","console","warn","Error","formData","FormData","append","filename","split","pop","Date","now","file","type","name","FOLDER","TRANSFORMATION","WIDTH","toString","HEIGHT","QUALITY","cloudinaryUrl","log","response","fetch","method","body","ok","errorText","text","status","data","json","secure_url","error"],"sources":["C:/Users/Dani/TravelQuest/src/services/cloudinaryService.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\nimport { CLOUDINARY_CONFIG } from '../config/cloudinary';\r\n\r\n// Configuración de Cloudinary\r\nconst CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\r\nconst CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\r\n\r\n/**\r\n * Verifica si la configuración de Cloudinary es válida\r\n * @returns {boolean} true si la configuración es válida\r\n */\r\nexport const isCloudinaryConfigured = () => {\r\n  return !!CLOUDINARY_CONFIG.CLOUD_NAME && !!CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\n};\r\n\r\n/**\r\n * Obtiene detalles sobre la configuración actual de Cloudinary\r\n * @returns Objeto con información sobre el estado de la configuración\r\n */\r\nexport const getCloudinaryConfigInfo = () => {\r\n  const isConfigured = isCloudinaryConfigured();\r\n  \r\n  return {\r\n    isConfigured,\r\n    usingFallback: __DEV__ && !isConfigured,\r\n    cloudName: CLOUDINARY_CONFIG.CLOUD_NAME,\r\n    uploadPreset: CLOUDINARY_CONFIG.UPLOAD_PRESET\r\n  };\r\n};\r\n\r\n/**\r\n * Comprueba si una URL es una imagen en formato base64\r\n */\r\nconst isBase64Image = (uri: string): boolean => {\r\n  return uri.startsWith('data:image');\r\n};\r\n\r\n/**\r\n * Sube una imagen a Cloudinary\r\n * @param uri URI de la imagen local\r\n * @param missionId ID de la misión asociada a la imagen\r\n * @returns URL de la imagen subida a Cloudinary\r\n */\r\nexport const uploadImageToCloudinary = async (imageUri: string, missionId: string): Promise<string> => {\r\n  // Verificar si Cloudinary está configurado\r\n  if (!isCloudinaryConfigured()) {\r\n    if (__DEV__) {\r\n      console.warn('Cloudinary no está configurado. En modo de desarrollo, retornando URI local.');\r\n      return imageUri;\r\n    }\r\n    throw new Error('Cloudinary no está configurado correctamente');\r\n  }\r\n\r\n  try {\r\n    // Convertir URI a base64 para plataformas web\r\n    let formData = new FormData();\r\n    \r\n    // En web, el URI puede ser una cadena base64\r\n    if (imageUri.startsWith('data:image')) {\r\n      formData.append('file', imageUri);\r\n    } else {\r\n      // En dispositivos móviles, creamos un objeto de archivo\r\n      const filename = imageUri.split('/').pop() || `mission_${missionId}_${Date.now()}`;\r\n      \r\n      // Crear un objeto de archivo para supabase\r\n      const file = {\r\n        uri: imageUri,\r\n        type: 'image/jpeg',\r\n        name: filename\r\n      };\r\n      \r\n      // @ts-ignore - TypeScript no reconoce correctamente el tipo para React Native\r\n      formData.append('file', file);\r\n    }\r\n    \r\n    // Añadir parámetros para Cloudinary\r\n    formData.append('upload_preset', CLOUDINARY_CONFIG.UPLOAD_PRESET);\r\n    \r\n    // Añadir carpeta si está configurada\r\n    if (CLOUDINARY_CONFIG.FOLDER) {\r\n      formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\r\n    }\r\n    \r\n    // Añadir transformaciones si están configuradas\r\n    if (CLOUDINARY_CONFIG.TRANSFORMATION) {\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH) {\r\n        formData.append('width', CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH.toString());\r\n      }\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT) {\r\n        formData.append('height', CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT.toString());\r\n      }\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY) {\r\n        formData.append('quality', CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY.toString());\r\n      }\r\n    }\r\n    \r\n    // Crear URL para la subida a Cloudinary\r\n    const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.CLOUD_NAME}/upload`;\r\n    console.log('Intentando subir imagen a:', cloudinaryUrl);\r\n    \r\n    // Realizar la solicitud\r\n    const response = await fetch(cloudinaryUrl, {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n    \r\n    // Verificar respuesta\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error en la respuesta de Cloudinary (${response.status}): ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Imagen subida exitosamente a Cloudinary:', data.secure_url);\r\n    \r\n    return data.secure_url;\r\n  } catch (error: any) {\r\n    console.error('Error subiendo imagen a Cloudinary:', error);\r\n    \r\n    if (__DEV__) {\r\n      console.warn('En modo desarrollo, retornando URI local como fallback.');\r\n      return imageUri;\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
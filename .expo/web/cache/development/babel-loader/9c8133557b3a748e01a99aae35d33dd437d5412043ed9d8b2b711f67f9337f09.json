{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\TravelQuest\\\\src\\\\screens\\\\main\\\\MissionsScreen.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supabase } from '../../services/supabase';\nimport { completeMission } from '../../services/pointsService';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from 'react-native-paper';\nimport { completeMission as dispatchCompleteMission } from '../../features/journey/journeySlice';\nimport ImageUploadModal from '../../components/ImageUploadModal';\nimport { setRefreshJournal } from '../../features/journalSlice';\nimport { createJournalEntry } from '../../services/journalService';\nimport MissionCompletedModal from '../../components/MissionCompletedModal';\nimport CompletingMissionModal from '../../components/CompletingMissionModal';\nimport NotificationService from '../../services/NotificationService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getTimeRemaining = endDate => {\n  const now = new Date();\n  const end = new Date(endDate);\n  const diff = end.getTime() - now.getTime();\n  if (diff <= 0) {\n    return {\n      isExpired: true,\n      text: 'Tiempo expirado'\n    };\n  }\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n  if (days > 0) {\n    return {\n      isExpired: false,\n      text: `${days} dÃ­as restantes`\n    };\n  } else if (hours > 0) {\n    return {\n      isExpired: false,\n      text: `${hours} horas restantes`\n    };\n  } else {\n    return {\n      isExpired: false,\n      text: `${minutes} minutos restantes`\n    };\n  }\n};\nconst MissionCard = ({\n  mission,\n  onComplete\n}) => {\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const timeRemaining = getTimeRemaining(mission.end_date);\n  const isExpired = timeRemaining.isExpired && !mission.completed;\n  const handleMissionPress = () => {\n    if (!mission.completed && !isExpired) {\n      setShowUploadModal(true);\n    }\n  };\n  const handleUploadSuccess = imageUrl => {\n    setShowUploadModal(false);\n    onComplete(imageUrl);\n  };\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(TouchableOpacity, {\n      style: [styles.card, mission.completed && styles.completedCard, isExpired && styles.expiredCard],\n      onPress: handleMissionPress,\n      disabled: mission.completed || isExpired,\n      children: [_jsxDEV(View, {\n        style: styles.cardHeader,\n        children: [_jsxDEV(Text, {\n          style: styles.cardTitle,\n          children: mission.challenge.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.badgeContainer,\n          children: [_jsxDEV(Text, {\n            style: [styles.badge, {\n              backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000'\n            }],\n            children: mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: [styles.timeRemaining, isExpired && styles.expiredTime],\n            children: timeRemaining.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.cardDescription,\n        children: mission.challenge.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.cardFooter,\n        children: [_jsxDEV(Text, {\n          style: styles.difficulty,\n          children: [\"Dificultad: \", mission.challenge.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.points,\n          children: [mission.challenge.points, \" puntos\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), _jsxDEV(ImageUploadModal, {\n      visible: showUploadModal,\n      missionId: mission.id,\n      missionTitle: mission.challenge.title,\n      onClose: () => setShowUploadModal(false),\n      onSuccess: handleUploadSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nconst CityCard = ({\n  cityName,\n  totalMissions,\n  completedMissions,\n  expiredMissions,\n  onPress\n}) => _jsxDEV(TouchableOpacity, {\n  style: styles.cityCard,\n  onPress: onPress,\n  children: [_jsxDEV(View, {\n    style: styles.cityCardContent,\n    children: [_jsxDEV(View, {\n      style: styles.cityInfo,\n      children: [_jsxDEV(Text, {\n        style: styles.cityName,\n        children: cityName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.missionCount,\n        children: [completedMissions, \"/\", totalMissions, \" misiones completadas\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), _jsxDEV(Ionicons, {\n      name: \"chevron-forward\",\n      size: 24,\n      color: \"#666\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this), _jsxDEV(View, {\n    style: styles.progressBar,\n    children: _jsxDEV(View, {\n      style: [styles.progressFill, {\n        width: `${completedMissions / totalMissions * 100}%`\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 193,\n  columnNumber: 3\n}, this);\nconst MissionsScreenComponent = ({\n  route,\n  navigation\n}) => {\n  const {\n    journeyId\n  } = route.params || {};\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const [missions, setMissions] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [completingMission, setCompletingMission] = useState(false);\n  const [missionCompleted, setMissionCompleted] = useState(false);\n  const [completedMissionInfo, setCompletedMissionInfo] = useState(null);\n  const [userPoints, setUserPoints] = useState(0);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const fetchMissions = async () => {\n    if (!user?.id) {\n      setError('Usuario no autenticado');\n      setLoading(false);\n      return;\n    }\n    try {\n      const {\n        data: ownJourneys,\n        error: ownJourneysError\n      } = await supabase.from('journeys').select(`\n          id,\n          description,\n          created_at,\n          cities (\n            name\n          ),\n          journeys_missions!inner (\n            id,\n            completed,\n            challengeId,\n            end_date,\n            challenges!inner (\n              id,\n              title,\n              description,\n              difficulty,\n              points\n            )\n          )\n        `).eq('userId', user.id);\n      if (ownJourneysError) throw ownJourneysError;\n      const {\n        data: sharedJourneys,\n        error: sharedJourneysError\n      } = await supabase.from('journeys_shared').select(`\n          journeyId,\n          journeys:journeyId (\n            id,\n            description,\n            created_at,\n            cities (\n              name\n            ),\n            journeys_missions!inner (\n              id,\n              completed,\n              challengeId,\n              end_date,\n              challenges!inner (\n                id,\n                title,\n                description,\n                difficulty,\n                points\n              )\n            )\n          )\n        `).eq('sharedWithUserId', user.id);\n      if (sharedJourneysError) throw sharedJourneysError;\n      const allJourneys = [...(ownJourneys || []), ...(sharedJourneys?.map(sj => sj.journeys) || [])];\n      if (!allJourneys || allJourneys.length === 0) {\n        setError('No hay viajes disponibles');\n        setLoading(false);\n        return;\n      }\n      const allMissions = allJourneys.flatMap(journey => journey.journeys_missions.map(jm => ({\n        id: jm.id,\n        completed: jm.completed,\n        cityName: journey.cities?.name || 'Ciudad Desconocida',\n        end_date: jm.end_date,\n        challenge: {\n          title: jm.challenges.title,\n          description: jm.challenges.description,\n          difficulty: jm.challenges.difficulty,\n          points: jm.challenges.points\n        }\n      })));\n      const missionsByCity = {};\n      allMissions.forEach(mission => {\n        if (!missionsByCity[mission.cityName]) {\n          missionsByCity[mission.cityName] = {\n            completed: [],\n            pending: [],\n            expired: []\n          };\n        }\n        if (mission.completed) {\n          missionsByCity[mission.cityName].completed.push(mission);\n        } else {\n          const timeRemaining = getTimeRemaining(mission.end_date);\n          if (timeRemaining.isExpired) {\n            missionsByCity[mission.cityName].expired.push(mission);\n          } else {\n            missionsByCity[mission.cityName].pending.push(mission);\n          }\n        }\n      });\n      setMissions(missionsByCity);\n    } catch (error) {\n      console.error('Error fetching missions:', error);\n      setError('Error al cargar las misiones');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchInitialPoints = async () => {\n    if (!user?.id) return;\n    try {\n      const {\n        data: pointsData,\n        error\n      } = await supabase.from('users').select('points').eq('id', user.id).single();\n      if (error) throw error;\n      if (pointsData) {\n        setUserPoints(pointsData.points || 0);\n      }\n    } catch (error) {\n      console.error('Error al cargar puntos:', error);\n    }\n  };\n  const checkExpiringMissions = async () => {\n    if (!user?.id) return;\n    try {\n      const {\n        data: missions,\n        error\n      } = await supabase.from('journeys_missions').select(`\n          id,\n          end_date,\n          completed,\n          journeys (\n            description\n          )\n        `).eq('completed', false).not('end_date', 'is', null);\n      if (error) throw error;\n      const now = new Date();\n      missions?.forEach(mission => {\n        const endDate = new Date(mission.end_date);\n        const hoursLeft = Math.floor((endDate.getTime() - now.getTime()) / (1000 * 60 * 60));\n        if (hoursLeft <= 24 && hoursLeft > 0) {\n          NotificationService.getInstance().notifyJourneyEnding(user.id, mission.journeys.description, hoursLeft);\n        }\n      });\n    } catch (error) {\n      console.error('Error al verificar misiones por expirar:', error);\n    }\n  };\n  useEffect(() => {\n    fetchMissions();\n    fetchInitialPoints();\n    checkExpiringMissions();\n    const interval = setInterval(checkExpiringMissions, 60 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [journeyId]);\n  const handleCompleteMission = async (missionId, imageUrl) => {\n    try {\n      setCompletingMission(true);\n      let foundMissionTitle = '';\n      let foundMissionPoints = 0;\n      let foundCityName = '';\n      let foundMission = null;\n      Object.keys(missions).forEach(cityName => {\n        const pending = missions[cityName].pending;\n        const mission = pending.find(m => m.id === missionId);\n        if (mission) {\n          foundMissionTitle = mission.challenge.title;\n          foundMissionPoints = mission.challenge.points;\n          foundCityName = cityName;\n          foundMission = mission;\n        }\n      });\n      if (!foundMissionTitle || !foundCityName || !foundMission) {\n        throw new Error('MisiÃ³n no encontrada');\n      }\n      setCompletedMissionInfo({\n        title: foundMissionTitle,\n        points: foundMissionPoints,\n        cityName: foundCityName\n      });\n      const result = await completeMission(missionId, user?.id || '', imageUrl);\n      if (!result.success) {\n        throw new Error('Error al completar la misiÃ³n');\n      }\n      if (imageUrl) {\n        await createJournalEntry({\n          userId: user?.id || '',\n          cityId: foundCityName || '',\n          missionId: missionId,\n          title: `MisiÃ³n completada: ${foundMissionTitle}`,\n          content: `He completado la misiÃ³n \"${foundMissionTitle}\" en ${foundCityName}. Â¡ConseguÃ­ ${foundMissionPoints} puntos!`,\n          photos: [imageUrl],\n          tags: [foundCityName || '', 'MisiÃ³n completada']\n        });\n      }\n      setMissions(prev => {\n        const updatedMissions = Object.assign({}, prev);\n        const city = updatedMissions[foundCityName];\n        const pendingIndex = city.pending.findIndex(m => m.id === missionId);\n        if (pendingIndex !== -1) {\n          const completedMission = Object.assign({}, city.pending[pendingIndex], {\n            completed: true\n          });\n          city.pending.splice(pendingIndex, 1);\n          city.completed.push(completedMission);\n        }\n        return updatedMissions;\n      });\n      setUserPoints(prev => prev + foundMissionPoints);\n      dispatch(dispatchCompleteMission(missionId));\n      dispatch(setRefreshJournal(true));\n      setMissionCompleted(true);\n      await fetchMissions();\n    } catch (error) {\n      console.error('Error al completar la misiÃ³n:', error);\n      Alert.alert('Error', 'No se pudo completar la misiÃ³n. IntÃ©ntalo de nuevo.');\n      setMissionCompleted(false);\n    } finally {\n      setCompletingMission(false);\n    }\n  };\n  useEffect(() => {\n    if (missionCompleted) {\n      const timer = setTimeout(() => {\n        setMissionCompleted(false);\n        navigation.navigate('Journal', {\n          refresh: true\n        });\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [missionCompleted, navigation]);\n  if (loading) {\n    return _jsxDEV(View, {\n      style: styles.loadingContainer,\n      children: [_jsxDEV(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.loadingText,\n        children: \"Cargando misiones...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return _jsxDEV(View, {\n      style: styles.errorContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.errorText,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), _jsxDEV(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: fetchMissions,\n        children: _jsxDEV(Text, {\n          style: styles.retryButtonText,\n          children: \"Reintentar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this);\n  }\n  if (!selectedCity) {\n    return _jsxDEV(View, {\n      style: styles.container,\n      children: [_jsxDEV(View, {\n        style: styles.header,\n        children: [_jsxDEV(Text, {\n          style: styles.title,\n          children: \"Tus Ciudades\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.pointsText,\n          children: [\"Puntos: \", userPoints]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), _jsxDEV(ScrollView, {\n        style: styles.citiesList,\n        children: Object.entries(missions).map(([cityName, missions]) => _jsxDEV(CityCard, {\n          cityName: cityName,\n          totalMissions: missions.completed.length + missions.pending.length,\n          completedMissions: missions.completed.length,\n          expiredMissions: missions.expired.length,\n          onPress: () => setSelectedCity(cityName)\n        }, cityName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this);\n  }\n  const cityData = missions[selectedCity];\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: () => setSelectedCity(null),\n        children: [_jsxDEV(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#333\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.backButtonText,\n          children: \"Ciudades\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.pointsText,\n        children: [\"Puntos: \", userPoints]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      style: styles.cityTitle,\n      children: selectedCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this), _jsxDEV(ScrollView, {\n      style: styles.missionsList,\n      children: [cityData.pending.length > 0 && _jsxDEV(_Fragment, {\n        children: [_jsxDEV(Text, {\n          style: styles.sectionTitle,\n          children: \"Misiones Pendientes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this), cityData.pending.map(mission => _jsxDEV(MissionCard, {\n          mission: mission,\n          onComplete: imageUrl => handleCompleteMission(mission.id, imageUrl)\n        }, mission.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true), cityData.expired.length > 0 && _jsxDEV(_Fragment, {\n        children: [_jsxDEV(View, {\n          style: styles.completedDivider,\n          children: [_jsxDEV(View, {\n            style: styles.dividerLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }, this), _jsxDEV(Text, {\n            style: [styles.completedText, {\n              color: '#f44336'\n            }],\n            children: \"Expiradas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 15\n          }, this), _jsxDEV(View, {\n            style: styles.dividerLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 13\n        }, this), cityData.expired.map(mission => _jsxDEV(MissionCard, {\n          mission: mission,\n          onComplete: () => {}\n        }, mission.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true), cityData.completed.length > 0 && _jsxDEV(_Fragment, {\n        children: [_jsxDEV(View, {\n          style: styles.completedDivider,\n          children: [_jsxDEV(View, {\n            style: styles.dividerLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this), _jsxDEV(Text, {\n            style: styles.completedText,\n            children: \"Completadas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 15\n          }, this), _jsxDEV(View, {\n            style: styles.dividerLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this), cityData.completed.map(mission => _jsxDEV(MissionCard, {\n          mission: mission,\n          onComplete: () => {}\n        }, mission.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this), _jsxDEV(MissionCompletedModal, {\n      visible: missionCompleted,\n      missionInfo: completedMissionInfo,\n      onFinished: () => {\n        setMissionCompleted(false);\n        navigation.navigate('Journal', {\n          refresh: true\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 7\n    }, this), _jsxDEV(CompletingMissionModal, {\n      visible: completingMission && !missionCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 581,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  backButtonText: {\n    fontSize: 16,\n    marginLeft: 5,\n    color: '#333'\n  },\n  cityTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  loadingText: {\n    marginTop: 10,\n    color: '#666'\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    color: 'red',\n    textAlign: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  pointsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#4CAF50'\n  },\n  citiesList: {\n    flex: 1\n  },\n  cityCard: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 15,\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3\n  },\n  cityCardContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cityInfo: {\n    flex: 1\n  },\n  cityName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 5\n  },\n  missionCount: {\n    fontSize: 14,\n    color: '#666'\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 2,\n    overflow: 'hidden'\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#4CAF50'\n  },\n  missionsList: {\n    flex: 1\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginBottom: 15\n  },\n  completedDivider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#4CAF50'\n  },\n  completedText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n    marginHorizontal: 10,\n    fontSize: 16\n  },\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  completedCard: {\n    opacity: 0.8\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flex: 1\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 15,\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  badgeContainer: {\n    flexDirection: 'column',\n    alignItems: 'flex-end'\n  },\n  cardDescription: {\n    color: '#666',\n    marginBottom: 10\n  },\n  cardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  difficulty: {\n    color: '#666',\n    fontSize: 12\n  },\n  points: {\n    color: '#4CAF50',\n    fontWeight: 'bold'\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  retryButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  },\n  expiredCard: {\n    borderColor: '#f44336',\n    borderWidth: 1\n  },\n  timeRemaining: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 4\n  },\n  expiredTime: {\n    color: '#f44336'\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 8\n  },\n  shareIcon: {\n    padding: 5\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modalContent: {\n    width: '80%',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 20,\n    maxHeight: '80%'\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 10\n  },\n  friendItem: {\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc'\n  },\n  friendName: {\n    fontSize: 16\n  },\n  friendPoints: {\n    fontSize: 14,\n    color: '#666'\n  },\n  cancelButton: {\n    marginTop: 10,\n    backgroundColor: '#f44336',\n    padding: 10,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  cancelButtonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\nconst MissionsScreen = props => {\n  return _jsxDEV(MissionsScreenComponent, Object.assign({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 929,\n    columnNumber: 10\n  }, this);\n};\nexport default MissionsScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","ActivityIndicator","Alert","ScrollView","useSelector","useDispatch","supabase","completeMission","Ionicons","useTheme","dispatchCompleteMission","ImageUploadModal","setRefreshJournal","createJournalEntry","MissionCompletedModal","CompletingMissionModal","NotificationService","jsxDEV","_jsxDEV","Fragment","_Fragment","getTimeRemaining","endDate","now","Date","end","diff","getTime","isExpired","text","days","Math","floor","hours","minutes","MissionCard","mission","onComplete","showUploadModal","setShowUploadModal","timeRemaining","end_date","completed","handleMissionPress","handleUploadSuccess","imageUrl","children","style","styles","card","completedCard","expiredCard","onPress","disabled","cardHeader","cardTitle","challenge","title","fileName","_jsxFileName","lineNumber","columnNumber","badgeContainer","badge","backgroundColor","expiredTime","cardDescription","description","cardFooter","difficulty","points","visible","missionId","id","missionTitle","onClose","onSuccess","CityCard","cityName","totalMissions","completedMissions","expiredMissions","cityCard","cityCardContent","cityInfo","missionCount","name","size","color","progressBar","progressFill","width","MissionsScreenComponent","route","navigation","journeyId","params","user","state","auth","missions","setMissions","loading","setLoading","error","setError","completingMission","setCompletingMission","missionCompleted","setMissionCompleted","completedMissionInfo","setCompletedMissionInfo","userPoints","setUserPoints","selectedCity","setSelectedCity","dispatch","theme","fetchMissions","data","ownJourneys","ownJourneysError","from","select","eq","sharedJourneys","sharedJourneysError","allJourneys","map","sj","journeys","length","allMissions","flatMap","journey","journeys_missions","jm","cities","challenges","missionsByCity","forEach","pending","expired","push","console","fetchInitialPoints","pointsData","single","checkExpiringMissions","not","hoursLeft","getInstance","notifyJourneyEnding","interval","setInterval","clearInterval","handleCompleteMission","foundMissionTitle","foundMissionPoints","foundCityName","foundMission","Object","keys","find","m","Error","result","success","userId","cityId","content","photos","tags","prev","updatedMissions","assign","city","pendingIndex","findIndex","completedMission","splice","alert","timer","setTimeout","navigate","refresh","clearTimeout","loadingContainer","loadingText","errorContainer","errorText","retryButton","retryButtonText","container","header","pointsText","citiesList","entries","cityData","backButton","backButtonText","cityTitle","missionsList","sectionTitle","completedDivider","dividerLine","completedText","missionInfo","onFinished","create","flex","padding","flexDirection","justifyContent","alignItems","marginBottom","fontSize","marginLeft","fontWeight","marginTop","textAlign","borderRadius","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","overflow","marginVertical","marginHorizontal","opacity","paddingHorizontal","paddingVertical","borderColor","borderWidth","loadingOverlay","position","top","left","right","bottom","shareIcon","modalOverlay","modalContent","maxHeight","modalTitle","friendItem","borderBottomWidth","borderBottomColor","friendName","friendPoints","cancelButton","cancelButtonText","MissionsScreen","props"],"sources":["C:/Users/Admin/TravelQuest/src/screens/main/MissionsScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, Alert, ScrollView } from 'react-native';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { supabase } from '../../services/supabase';\r\nimport { completeMission } from '../../services/pointsService';\r\nimport { RouteProp } from '@react-navigation/native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { Card, ProgressBar, useTheme, Surface } from 'react-native-paper';\r\nimport { completeMission as dispatchCompleteMission } from '../../features/journey/journeySlice';\r\nimport ImageUploadModal from '../../components/ImageUploadModal';\r\nimport { setRefreshJournal } from '../../features/journalSlice';\r\nimport { createJournalEntry } from '../../services/journalService';\r\nimport MissionCompletedModal from '../../components/MissionCompletedModal';\r\nimport CompletingMissionModal from '../../components/CompletingMissionModal';\r\nimport NotificationService from '../../services/NotificationService';\r\n\r\ntype MissionsScreenRouteProp = RouteProp<{\r\n  Missions: {\r\n    journeyId: string;\r\n    challenges: JourneyMission[];\r\n  };\r\n}, 'Missions'>;\r\n\r\ninterface MissionsScreenProps {\r\n  route: MissionsScreenRouteProp;\r\n  navigation: any;\r\n}\r\n\r\ninterface CityMissions {\r\n  [cityName: string]: {\r\n    completed: JourneyMission[];\r\n    pending: JourneyMission[];\r\n    expired: JourneyMission[];\r\n  };\r\n}\r\n\r\ninterface JourneyMission {\r\n  id: string;\r\n  completed: boolean;\r\n  cityName: string;\r\n  end_date: string;\r\n  challenge: {\r\n    title: string;\r\n    description: string;\r\n    difficulty: string;\r\n    points: number;\r\n  };\r\n}\r\n\r\ninterface Journey {\r\n  id: string;\r\n  description: string;\r\n  created_at: string;\r\n  cities?: {\r\n    name: string;\r\n  };\r\n  journeys_missions: {\r\n    id: string;\r\n    completed: boolean;\r\n    challengeId: string;\r\n    end_date: string;\r\n    challenges: {\r\n      id: string;\r\n      title: string;\r\n      description: string;\r\n      difficulty: string;\r\n      points: number;\r\n    };\r\n  }[];\r\n}\r\n\r\ninterface SharedJourney {\r\n  journeyId: string;\r\n  journeys: Journey;\r\n}\r\n\r\ninterface ExpiringMission {\r\n  id: string;\r\n  end_date: string;\r\n  completed: boolean;\r\n  journeys: {\r\n    description: string;\r\n  };\r\n}\r\n\r\nconst getTimeRemaining = (endDate: string) => {\r\n  const now = new Date();\r\n  const end = new Date(endDate);\r\n  const diff = end.getTime() - now.getTime();\r\n\r\n  if (diff <= 0) {\r\n    return {\r\n      isExpired: true,\r\n      text: 'Tiempo expirado'\r\n    };\r\n  }\r\n\r\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n  if (days > 0) {\r\n    return {\r\n      isExpired: false,\r\n      text: `${days} dÃ­as restantes`\r\n    };\r\n  } else if (hours > 0) {\r\n    return {\r\n      isExpired: false,\r\n      text: `${hours} horas restantes`\r\n    };\r\n  } else {\r\n    return {\r\n      isExpired: false,\r\n      text: `${minutes} minutos restantes`\r\n    };\r\n  }\r\n};\r\n\r\nconst MissionCard = ({ mission, onComplete }: {\r\n  mission: JourneyMission;\r\n  onComplete: (imageUrl?: string) => void;\r\n}) => {\r\n  const [showUploadModal, setShowUploadModal] = useState(false);\r\n  const timeRemaining = getTimeRemaining(mission.end_date);\r\n  const isExpired = timeRemaining.isExpired && !mission.completed;\r\n\r\n  const handleMissionPress = () => {\r\n    if (!mission.completed && !isExpired) {\r\n      setShowUploadModal(true);\r\n    }\r\n  };\r\n\r\n  const handleUploadSuccess = (imageUrl: string) => {\r\n    setShowUploadModal(false);\r\n    onComplete(imageUrl);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity\r\n        style={[\r\n          styles.card,\r\n          mission.completed && styles.completedCard,\r\n          isExpired && styles.expiredCard\r\n        ]}\r\n        onPress={handleMissionPress}\r\n        disabled={mission.completed || isExpired}\r\n      >\r\n        <View style={styles.cardHeader}>\r\n          <Text style={styles.cardTitle}>{mission.challenge.title}</Text>\r\n          <View style={styles.badgeContainer}>\r\n            <Text style={[\r\n              styles.badge,\r\n              { backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000' }\r\n            ]}>\r\n              {mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'}\r\n            </Text>\r\n            <Text style={[\r\n              styles.timeRemaining,\r\n              isExpired && styles.expiredTime\r\n            ]}>\r\n              {timeRemaining.text}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <Text style={styles.cardDescription}>{mission.challenge.description}</Text>\r\n        <View style={styles.cardFooter}>\r\n          <Text style={styles.difficulty}>Dificultad: {mission.challenge.difficulty}</Text>\r\n          <Text style={styles.points}>{mission.challenge.points} puntos</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n\r\n      <ImageUploadModal\r\n        visible={showUploadModal}\r\n        missionId={mission.id}\r\n        missionTitle={mission.challenge.title}\r\n        onClose={() => setShowUploadModal(false)}\r\n        onSuccess={handleUploadSuccess}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst CityCard = ({ cityName, totalMissions, completedMissions, expiredMissions, onPress }: {\r\n  cityName: string;\r\n  totalMissions: number;\r\n  completedMissions: number;\r\n  expiredMissions?: number;\r\n  onPress: () => void;\r\n}) => (\r\n  <TouchableOpacity style={styles.cityCard} onPress={onPress}>\r\n    <View style={styles.cityCardContent}>\r\n      <View style={styles.cityInfo}>\r\n        <Text style={styles.cityName}>{cityName}</Text>\r\n        <Text style={styles.missionCount}>\r\n          {completedMissions}/{totalMissions} misiones completadas\r\n        </Text>\r\n      </View>\r\n      <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\r\n    </View>\r\n    <View style={styles.progressBar}>\r\n      <View\r\n        style={[\r\n          styles.progressFill,\r\n          { width: `${(completedMissions / totalMissions) * 100}%` }\r\n        ]}\r\n      />\r\n    </View>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst MissionsScreenComponent = ({ route, navigation }: MissionsScreenProps) => {\r\n  const { journeyId } = route.params || {};\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [missions, setMissions] = useState<CityMissions>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [completingMission, setCompletingMission] = useState(false);\r\n  const [missionCompleted, setMissionCompleted] = useState(false);\r\n  const [completedMissionInfo, setCompletedMissionInfo] = useState<{\r\n    title: string;\r\n    points: number;\r\n    cityName: string;\r\n  } | null>(null);\r\n  const [userPoints, setUserPoints] = useState(0);\r\n  const [selectedCity, setSelectedCity] = useState<string | null>(null);\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n\r\n  const fetchMissions = async () => {\r\n    if (!user?.id) {\r\n      setError('Usuario no autenticado');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Primero obtenemos los journeys propios del usuario\r\n      const { data: ownJourneys, error: ownJourneysError } = await supabase\r\n        .from('journeys')\r\n        .select(`\r\n          id,\r\n          description,\r\n          created_at,\r\n          cities (\r\n            name\r\n          ),\r\n          journeys_missions!inner (\r\n            id,\r\n            completed,\r\n            challengeId,\r\n            end_date,\r\n            challenges!inner (\r\n              id,\r\n              title,\r\n              description,\r\n              difficulty,\r\n              points\r\n            )\r\n          )\r\n        `)\r\n        .eq('userId', user.id);\r\n\r\n      if (ownJourneysError) throw ownJourneysError;\r\n\r\n      // Luego obtenemos los journeys compartidos con el usuario\r\n      const { data: sharedJourneys, error: sharedJourneysError } = await supabase\r\n        .from('journeys_shared')\r\n        .select(`\r\n          journeyId,\r\n          journeys:journeyId (\r\n            id,\r\n            description,\r\n            created_at,\r\n            cities (\r\n              name\r\n            ),\r\n            journeys_missions!inner (\r\n              id,\r\n              completed,\r\n              challengeId,\r\n              end_date,\r\n              challenges!inner (\r\n                id,\r\n                title,\r\n                description,\r\n                difficulty,\r\n                points\r\n              )\r\n            )\r\n          )\r\n        `)\r\n        .eq('sharedWithUserId', user.id);\r\n\r\n      if (sharedJourneysError) throw sharedJourneysError;\r\n\r\n      // Combinamos los journeys propios y compartidos\r\n      const allJourneys = [\r\n        ...(ownJourneys || []),\r\n        ...(sharedJourneys?.map((sj: SharedJourney) => sj.journeys) || [])\r\n      ];\r\n\r\n      if (!allJourneys || allJourneys.length === 0) {\r\n        setError('No hay viajes disponibles');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const allMissions = allJourneys.flatMap((journey: Journey) =>\r\n        journey.journeys_missions.map((jm) => ({\r\n          id: jm.id,\r\n          completed: jm.completed,\r\n          cityName: journey.cities?.name || 'Ciudad Desconocida',\r\n          end_date: jm.end_date,\r\n          challenge: {\r\n            title: jm.challenges.title,\r\n            description: jm.challenges.description,\r\n            difficulty: jm.challenges.difficulty,\r\n            points: jm.challenges.points\r\n          }\r\n        }))\r\n      );\r\n\r\n      // Organizar misiones por ciudad\r\n      const missionsByCity: CityMissions = {};\r\n      allMissions.forEach((mission: JourneyMission) => {\r\n        if (!missionsByCity[mission.cityName]) {\r\n          missionsByCity[mission.cityName] = {\r\n            completed: [],\r\n            pending: [],\r\n            expired: []\r\n          };\r\n        }\r\n        if (mission.completed) {\r\n          missionsByCity[mission.cityName].completed.push(mission);\r\n        } else {\r\n          const timeRemaining = getTimeRemaining(mission.end_date);\r\n          if (timeRemaining.isExpired) {\r\n            missionsByCity[mission.cityName].expired.push(mission);\r\n          } else {\r\n            missionsByCity[mission.cityName].pending.push(mission);\r\n          }\r\n        }\r\n      });\r\n\r\n      setMissions(missionsByCity);\r\n    } catch (error) {\r\n      console.error('Error fetching missions:', error);\r\n      setError('Error al cargar las misiones');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInitialPoints = async () => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      const { data: pointsData, error } = await supabase\r\n        .from('users')\r\n        .select('points')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      if (pointsData) {\r\n        setUserPoints(pointsData.points || 0);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cargar puntos:', error);\r\n    }\r\n  };\r\n\r\n  const checkExpiringMissions = async () => {\r\n    if (!user?.id) return;\r\n\r\n    try {\r\n      const { data: missions, error } = await supabase\r\n        .from('journeys_missions')\r\n        .select(`\r\n          id,\r\n          end_date,\r\n          completed,\r\n          journeys (\r\n            description\r\n          )\r\n        `)\r\n        .eq('completed', false)\r\n        .not('end_date', 'is', null);\r\n\r\n      if (error) throw error;\r\n\r\n      const now = new Date();\r\n      missions?.forEach((mission: ExpiringMission) => {\r\n        const endDate = new Date(mission.end_date);\r\n        const hoursLeft = Math.floor((endDate.getTime() - now.getTime()) / (1000 * 60 * 60));\r\n\r\n        // Notificar cuando queden 24 horas o menos\r\n        if (hoursLeft <= 24 && hoursLeft > 0) {\r\n          NotificationService.getInstance().notifyJourneyEnding(\r\n            user.id,\r\n            mission.journeys.description,\r\n            hoursLeft\r\n          );\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error al verificar misiones por expirar:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMissions();\r\n    fetchInitialPoints();\r\n\r\n    // Verificar misiones por expirar al cargar y cada hora\r\n    checkExpiringMissions();\r\n    const interval = setInterval(checkExpiringMissions, 60 * 60 * 1000); // Cada hora\r\n\r\n    return () => clearInterval(interval);\r\n  }, [journeyId]);\r\n\r\n  const handleCompleteMission = async (missionId: string, imageUrl?: string) => {\r\n    try {\r\n      setCompletingMission(true);\r\n\r\n      // Encontrar la misiÃ³n en el estado local\r\n      let foundMissionTitle = '';\r\n      let foundMissionPoints = 0;\r\n      let foundCityName = '';\r\n      let foundMission: JourneyMission | null = null;\r\n\r\n      Object.keys(missions).forEach((cityName) => {\r\n        const pending = missions[cityName].pending;\r\n        const mission = pending.find((m) => m.id === missionId);\r\n        if (mission) {\r\n          foundMissionTitle = mission.challenge.title;\r\n          foundMissionPoints = mission.challenge.points;\r\n          foundCityName = cityName;\r\n          foundMission = mission;\r\n        }\r\n      });\r\n\r\n      if (!foundMissionTitle || !foundCityName || !foundMission) {\r\n        throw new Error('MisiÃ³n no encontrada');\r\n      }\r\n\r\n      // Guardar informaciÃ³n de la misiÃ³n antes de completarla\r\n      setCompletedMissionInfo({\r\n        title: foundMissionTitle,\r\n        points: foundMissionPoints,\r\n        cityName: foundCityName\r\n      });\r\n\r\n      // Completar misiÃ³n en la base de datos\r\n      const result = await completeMission(\r\n        missionId,\r\n        user?.id || '',\r\n        imageUrl\r\n      );\r\n\r\n      if (!result.success) {\r\n        throw new Error('Error al completar la misiÃ³n');\r\n      }\r\n\r\n      // Crear entrada en el diario para esta misiÃ³n completada\r\n      if (imageUrl) {\r\n        await createJournalEntry({\r\n          userId: user?.id || '',\r\n          cityId: foundCityName || '',\r\n          missionId: missionId,\r\n          title: `MisiÃ³n completada: ${foundMissionTitle}`,\r\n          content: `He completado la misiÃ³n \"${foundMissionTitle}\" en ${foundCityName}. Â¡ConseguÃ­ ${foundMissionPoints} puntos!`,\r\n          photos: [imageUrl],\r\n          tags: [foundCityName || '', 'MisiÃ³n completada']\r\n        });\r\n      }\r\n\r\n      // Actualizar el estado local\r\n      setMissions((prev) => {\r\n        const updatedMissions = { ...prev };\r\n        const city = updatedMissions[foundCityName];\r\n\r\n        // Encontrar y eliminar la misiÃ³n de pendientes\r\n        const pendingIndex = city.pending.findIndex((m) => m.id === missionId);\r\n        if (pendingIndex !== -1) {\r\n          const completedMission = {\r\n            ...city.pending[pendingIndex],\r\n            completed: true\r\n          };\r\n          city.pending.splice(pendingIndex, 1);\r\n          city.completed.push(completedMission);\r\n        }\r\n\r\n        return updatedMissions;\r\n      });\r\n\r\n      // Actualizar la UI de puntos\r\n      setUserPoints((prev) => prev + foundMissionPoints);\r\n\r\n      // Actualizar el estado global\r\n      dispatch(dispatchCompleteMission(missionId));\r\n      dispatch(setRefreshJournal(true));\r\n\r\n      // Mostrar el modal de misiÃ³n completada\r\n      setMissionCompleted(true);\r\n\r\n      // Recargar las misiones para asegurar que el estado estÃ¡ actualizado\r\n      await fetchMissions();\r\n\r\n    } catch (error) {\r\n      console.error('Error al completar la misiÃ³n:', error);\r\n      Alert.alert('Error', 'No se pudo completar la misiÃ³n. IntÃ©ntalo de nuevo.');\r\n      setMissionCompleted(false);\r\n    } finally {\r\n      setCompletingMission(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (missionCompleted) {\r\n      // Si la misiÃ³n se completÃ³, programar la navegaciÃ³n al diario\r\n      const timer = setTimeout(() => {\r\n        setMissionCompleted(false);\r\n        navigation.navigate('Journal', { refresh: true });\r\n      }, 3000);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [missionCompleted, navigation]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n        <Text style={styles.loadingText}>Cargando misiones...</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <View style={styles.errorContainer}>\r\n        <Text style={styles.errorText}>{error}</Text>\r\n        <TouchableOpacity style={styles.retryButton} onPress={fetchMissions}>\r\n          <Text style={styles.retryButtonText}>Reintentar</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (!selectedCity) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>Tus Ciudades</Text>\r\n          <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n        </View>\r\n        <ScrollView style={styles.citiesList}>\r\n          {Object.entries(missions).map(([cityName, missions]) => (\r\n            <CityCard\r\n              key={cityName}\r\n              cityName={cityName}\r\n              totalMissions={missions.completed.length + missions.pending.length}\r\n              completedMissions={missions.completed.length}\r\n              expiredMissions={missions.expired.length}\r\n              onPress={() => setSelectedCity(cityName)}\r\n            />\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const cityData = missions[selectedCity];\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <TouchableOpacity\r\n          style={styles.backButton}\r\n          onPress={() => setSelectedCity(null)}\r\n        >\r\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\r\n          <Text style={styles.backButtonText}>Ciudades</Text>\r\n        </TouchableOpacity>\r\n        <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\r\n      </View>\r\n\r\n      <Text style={styles.cityTitle}>{selectedCity}</Text>\r\n\r\n      <ScrollView style={styles.missionsList}>\r\n        {cityData.pending.length > 0 && (\r\n          <>\r\n            <Text style={styles.sectionTitle}>Misiones Pendientes</Text>\r\n            {cityData.pending.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={(imageUrl) => handleCompleteMission(mission.id, imageUrl)}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {cityData.expired.length > 0 && (\r\n          <>\r\n            <View style={styles.completedDivider}>\r\n              <View style={styles.dividerLine} />\r\n              <Text style={[styles.completedText, { color: '#f44336' }]}>Expiradas</Text>\r\n              <View style={styles.dividerLine} />\r\n            </View>\r\n            {cityData.expired.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => { }}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {cityData.completed.length > 0 && (\r\n          <>\r\n            <View style={styles.completedDivider}>\r\n              <View style={styles.dividerLine} />\r\n              <Text style={styles.completedText}>Completadas</Text>\r\n              <View style={styles.dividerLine} />\r\n            </View>\r\n            {cityData.completed.map(mission => (\r\n              <MissionCard\r\n                key={mission.id}\r\n                mission={mission}\r\n                onComplete={() => { }}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n      </ScrollView>\r\n\r\n      {/* Modal de misiÃ³n completada */}\r\n      <MissionCompletedModal\r\n        visible={missionCompleted}\r\n        missionInfo={completedMissionInfo}\r\n        onFinished={() => {\r\n          setMissionCompleted(false);\r\n          navigation.navigate('Journal', { refresh: true });\r\n        }}\r\n      />\r\n\r\n      {/* Modal de carga durante el proceso */}\r\n      <CompletingMissionModal\r\n        visible={completingMission && !missionCompleted}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  backButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  backButtonText: {\r\n    fontSize: 16,\r\n    marginLeft: 5,\r\n    color: '#333',\r\n  },\r\n  cityTitle: {\r\n    fontSize: 28,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 20,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  loadingText: {\r\n    marginTop: 10,\r\n    color: '#666',\r\n  },\r\n  errorContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n  },\r\n  pointsText: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#4CAF50',\r\n  },\r\n  citiesList: {\r\n    flex: 1,\r\n  },\r\n  cityCard: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 15,\r\n    padding: 15,\r\n    marginBottom: 15,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 3,\r\n    elevation: 3,\r\n  },\r\n  cityCardContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cityInfo: {\r\n    flex: 1,\r\n  },\r\n  cityName: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 5,\r\n  },\r\n  missionCount: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n  },\r\n  progressBar: {\r\n    height: 4,\r\n    backgroundColor: '#E0E0E0',\r\n    borderRadius: 2,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  missionsList: {\r\n    flex: 1,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: '#666',\r\n    marginBottom: 15,\r\n  },\r\n  completedDivider: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 20,\r\n  },\r\n  dividerLine: {\r\n    flex: 1,\r\n    height: 1,\r\n    backgroundColor: '#4CAF50',\r\n  },\r\n  completedText: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n    marginHorizontal: 10,\r\n    fontSize: 16,\r\n  },\r\n  card: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    marginBottom: 10,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  completedCard: {\r\n    opacity: 0.8,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    flex: 1,\r\n  },\r\n  badge: {\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n    borderRadius: 15,\r\n    color: 'white',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n  badgeContainer: {\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-end',\r\n  },\r\n  cardDescription: {\r\n    color: '#666',\r\n    marginBottom: 10,\r\n  },\r\n  cardFooter: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  difficulty: {\r\n    color: '#666',\r\n    fontSize: 12,\r\n  },\r\n  points: {\r\n    color: '#4CAF50',\r\n    fontWeight: 'bold',\r\n  },\r\n  retryButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n  },\r\n  retryButtonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  expiredCard: {\r\n    borderColor: '#f44336',\r\n    borderWidth: 1,\r\n  },\r\n  timeRemaining: {\r\n    fontSize: 12,\r\n    color: '#666',\r\n    marginTop: 4,\r\n  },\r\n  expiredTime: {\r\n    color: '#f44336',\r\n  },\r\n  loadingOverlay: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderRadius: 8,\r\n  },\r\n  shareIcon: {\r\n    padding: 5,\r\n  },\r\n  modalOverlay: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(0,0,0,0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  modalContent: {\r\n    width: '80%',\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 20,\r\n    maxHeight: '80%'\r\n  },\r\n  modalTitle: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10\r\n  },\r\n  friendItem: {\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc'\r\n  },\r\n  friendName: {\r\n    fontSize: 16\r\n  },\r\n  friendPoints: {\r\n    fontSize: 14,\r\n    color: '#666'\r\n  },\r\n  cancelButton: {\r\n    marginTop: 10,\r\n    backgroundColor: '#f44336',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    alignItems: 'center'\r\n  },\r\n  cancelButtonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n});\r\n\r\nconst MissionsScreen = (props: any) => {\r\n  return <MissionsScreenComponent {...props} />;\r\n};\r\n\r\nexport default MissionsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
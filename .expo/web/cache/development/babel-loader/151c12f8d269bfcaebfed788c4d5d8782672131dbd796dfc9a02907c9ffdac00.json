{"ast":null,"code":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useSelector } from 'react-redux';\nimport LoginScreen from \"../screens/auth/LoginScreen\";\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\nimport ForgotPasswordScreen from \"../screens/auth/ForgotPasswordScreen\";\nimport VerifyCodeScreen from \"../screens/auth/VerifyCodeScreen\";\nimport ResetPasswordScreen from \"../screens/auth/ResetPasswordScreen\";\nimport VerifyEmailScreen from \"../screens/auth/VerifyEmailScreen\";\nimport MapScreen from \"../screens/main/MapScreen\";\nimport MissionsScreen from \"../screens/main/MissionsScreen\";\nimport JournalScreen from \"../screens/main/JournalScreen\";\nimport ProfileScreen from \"../screens/main/ProfileScreen\";\nimport LeaderboardScreen from \"../screens/main/LeaderboardScreen\";\nimport FriendsScreen from \"../screens/main/FriendsScreen\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ChatScreen from \"../screens/main/ChatScreen\";\nimport ConversationsScreen from \"../screens/main/ConversationsScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar MainFlow = function MainFlow() {\n  var theme = useTheme();\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"TabNavigator\",\n      component: TabNavigator,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Chat\",\n      component: ChatScreen,\n      options: {\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: 'white'\n      }\n    })]\n  });\n};\nvar TabNavigator = function TabNavigator() {\n  var theme = useTheme();\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === 'Map') {\n            iconName = focused ? 'map' : 'map-outline';\n          } else if (route.name === 'Missions') {\n            iconName = focused ? 'list' : 'list-outline';\n          } else if (route.name === 'Journal') {\n            iconName = focused ? 'book' : 'book-outline';\n          } else if (route.name === 'Friends') {\n            iconName = focused ? 'people' : 'people-outline';\n          } else if (route.name === 'Leaderboard') {\n            iconName = focused ? 'trophy' : 'trophy-outline';\n          } else if (route.name === 'Profile') {\n            iconName = focused ? 'person' : 'person-outline';\n          } else if (route.name === 'Conversations') {\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: theme.colors.primary,\n        tabBarInactiveTintColor: 'gray'\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Map\",\n      component: MapScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Missions\",\n      component: MissionsScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Journal\",\n      component: JournalScreen,\n      initialParams: {\n        refresh: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Friends\",\n      component: FriendsScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Conversations\",\n      component: ConversationsScreen,\n      options: {\n        title: 'Mensajes'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Leaderboard\",\n      component: LeaderboardScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen\n    })]\n  });\n};\nvar AppNavigator = function AppNavigator() {\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    authState = _useSelector.authState;\n  var theme = useTheme();\n  if (authState === 'loading') {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: theme.colors.primary\n      })\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: authState === 'authenticated' ? _jsx(MainFlow, {}) : _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Register\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ForgotPassword\",\n        component: ForgotPasswordScreen\n      }), _jsx(Stack.Screen, {\n        name: \"VerifyCode\",\n        component: VerifyCodeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"VerifyEmail\",\n        component: VerifyEmailScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ResetPassword\",\n        component: ResetPasswordScreen\n      })]\n    })\n  });\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","NavigationContainer","createNativeStackNavigator","useSelector","LoginScreen","RegisterScreen","ForgotPasswordScreen","VerifyCodeScreen","ResetPasswordScreen","VerifyEmailScreen","MapScreen","MissionsScreen","JournalScreen","ProfileScreen","LeaderboardScreen","FriendsScreen","createBottomTabNavigator","Ionicons","useTheme","View","ActivityIndicator","ChatScreen","ConversationsScreen","jsx","_jsx","jsxs","_jsxs","Stack","Tab","MainFlow","theme","Navigator","children","Screen","name","component","TabNavigator","options","headerShown","headerStyle","backgroundColor","colors","primary","headerTintColor","screenOptions","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","tabBarActiveTintColor","tabBarInactiveTintColor","initialParams","refresh","title","AppNavigator","_useSelector","state","auth","authState","style","flex","justifyContent","alignItems"],"sources":["C:/Users/migue/TravelQuest/src/navigation/AppNavigator.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../features/store';\r\nimport LoginScreen from '../screens/auth/LoginScreen';\r\nimport RegisterScreen from '../screens/auth/RegisterScreen';\r\nimport ForgotPasswordScreen from '../screens/auth/ForgotPasswordScreen';\r\nimport VerifyCodeScreen from '../screens/auth/VerifyCodeScreen';\r\nimport ResetPasswordScreen from '../screens/auth/ResetPasswordScreen';\r\nimport VerifyEmailScreen from '../screens/auth/VerifyEmailScreen';\r\nimport MapScreen from '../screens/main/MapScreen';\r\nimport MissionsScreen from '../screens/main/MissionsScreen';\r\nimport JournalScreen from '../screens/main/JournalScreen';\r\nimport ProfileScreen from '../screens/main/ProfileScreen';\r\nimport LeaderboardScreen from '../screens/main/LeaderboardScreen';\r\nimport FriendsScreen from '../screens/main/FriendsScreen';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useTheme } from 'react-native-paper';\r\nimport { View, ActivityIndicator } from 'react-native';\r\nimport ChatScreen from '../screens/main/ChatScreen';\r\nimport ConversationsScreen from '../screens/main/ConversationsScreen';\r\n\r\n// Define los parámetros para las pestañas principales\r\nexport type TabParamList = {\r\n  Map: undefined;\r\n  Missions: {\r\n    journeyId?: string;\r\n    challenges?: any[];\r\n  };\r\n  Journal: {\r\n    refresh?: boolean;\r\n  };\r\n  Profile: undefined;\r\n  Leaderboard: undefined;\r\n  Friends: undefined;\r\n  Conversations: undefined;\r\n  Chat: {\r\n    friendId: string;\r\n    friendName: string;\r\n  };\r\n};\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Tab = createBottomTabNavigator<TabParamList>();\r\n\r\n// Creamos un componente para el flujo principal que incluya el chat\r\nconst MainFlow = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen \r\n        name=\"TabNavigator\" \r\n        component={TabNavigator} \r\n        options={{ headerShown: false }}\r\n      />\r\n      <Stack.Screen \r\n        name=\"Chat\" \r\n        component={ChatScreen}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: theme.colors.primary,\r\n          },\r\n          headerTintColor: 'white',\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\n// Componente separado para el navegador de pestañas\r\nconst TabNavigator = () => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName;\r\n\r\n          if (route.name === 'Map') {\r\n            iconName = focused ? 'map' : 'map-outline';\r\n          } else if (route.name === 'Missions') {\r\n            iconName = focused ? 'list' : 'list-outline';\r\n          } else if (route.name === 'Journal') {\r\n            iconName = focused ? 'book' : 'book-outline';\r\n          } else if (route.name === 'Friends') {\r\n            iconName = focused ? 'people' : 'people-outline';\r\n          } else if (route.name === 'Leaderboard') {\r\n            iconName = focused ? 'trophy' : 'trophy-outline';\r\n          } else if (route.name === 'Profile') {\r\n            iconName = focused ? 'person' : 'person-outline';\r\n          } else if (route.name === 'Conversations') {\r\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\r\n          }\r\n          \r\n          return <Ionicons name={iconName as any} size={size} color={color} />;\r\n        },\r\n        tabBarActiveTintColor: theme.colors.primary,\r\n        tabBarInactiveTintColor: 'gray',\r\n      })}\r\n    >\r\n      <Tab.Screen name=\"Map\" component={MapScreen} />\r\n      <Tab.Screen name=\"Missions\" component={MissionsScreen} />\r\n      <Tab.Screen name=\"Journal\" component={JournalScreen} initialParams={{ refresh: false }} />\r\n      <Tab.Screen name=\"Friends\" component={FriendsScreen} />\r\n      <Tab.Screen\r\n        name=\"Conversations\"\r\n        component={ConversationsScreen}\r\n        options={{\r\n          title: 'Mensajes'\r\n        }}\r\n      />\r\n      <Tab.Screen name=\"Leaderboard\" component={LeaderboardScreen} />\r\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nconst AppNavigator = () => {\r\n  const { authState } = useSelector((state: RootState) => state.auth);\r\n  const theme = useTheme();\r\n\r\n  // Si el estado de autenticación es 'loading', mostrar un indicador de carga\r\n  if (authState === 'loading') {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      {authState === 'authenticated' ? (\r\n        <MainFlow />\r\n      ) : (\r\n        <Stack.Navigator\r\n          screenOptions={{\r\n            headerShown: false,\r\n          }}\r\n        >\r\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n          <Stack.Screen name=\"Register\" component={RegisterScreen} />\r\n          <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\r\n          <Stack.Screen name=\"VerifyCode\" component={VerifyCodeScreen} />\r\n          <Stack.Screen name=\"VerifyEmail\" component={VerifyEmailScreen} />\r\n          <Stack.Screen name=\"ResetPassword\" component={ResetPasswordScreen} />\r\n        </Stack.Navigator>\r\n      )}\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default AppNavigator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
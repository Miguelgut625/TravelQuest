{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\TravelQuest\\\\src\\\\components\\\\NotificationTest.tsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { NotificationService } from '../services/NotificationService';\nimport { useAppSelector } from '../features/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationTest = () => {\n  const userId = useAppSelector(state => state.auth.user?.id);\n  const [loading, setLoading] = useState(false);\n  const testLocalNotification = async () => {\n    try {\n      setLoading(true);\n      await NotificationService.scheduleNotification('Prueba de Notificación Local', 'Esta es una notificación local de prueba', {\n        test: true\n      });\n      Alert.alert('Éxito', 'Notificación local programada');\n    } catch (error) {\n      console.error('Error al programar notificación local:', error);\n      Alert.alert('Error', 'No se pudo programar la notificación local');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const testDatabaseNotification = async () => {\n    if (!userId) {\n      Alert.alert('Error', 'No hay usuario autenticado');\n      return;\n    }\n    try {\n      setLoading(true);\n      await NotificationService.createNotification(userId, 'Prueba de Notificación en Base de Datos', 'Esta es una notificación guardada en la base de datos', 'test', {\n        test: true\n      });\n      Alert.alert('Éxito', 'Notificación guardada en la base de datos');\n    } catch (error) {\n      console.error('Error al crear notificación en base de datos:', error);\n      Alert.alert('Error', 'No se pudo guardar la notificación en la base de datos');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const testPushNotification = async () => {\n    try {\n      setLoading(true);\n      const token = await NotificationService.registerForPushNotificationsAsync();\n      if (token) {\n        Alert.alert('Éxito', `Token de notificación push: ${token}`);\n      } else {\n        Alert.alert('Error', 'No se pudo obtener el token de notificación push');\n      }\n    } catch (error) {\n      console.error('Error al registrar notificaciones push:', error);\n      Alert.alert('Error', 'No se pudo registrar para notificaciones push');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Prueba de Notificaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), _jsxDEV(View, {\n      style: styles.buttonContainer,\n      children: _jsxDEV(Button, {\n        title: loading ? \"Cargando...\" : \"Probar Notificación Local\",\n        onPress: testLocalNotification,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), _jsxDEV(View, {\n      style: styles.buttonContainer,\n      children: _jsxDEV(Button, {\n        title: loading ? \"Cargando...\" : \"Probar Notificación en Base de Datos\",\n        onPress: testDatabaseNotification,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), _jsxDEV(View, {\n      style: styles.buttonContainer,\n      children: _jsxDEV(Button, {\n        title: loading ? \"Cargando...\" : \"Registrar para Notificaciones Push\",\n        onPress: testPushNotification,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    margin: 16,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    marginVertical: 8\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","Button","StyleSheet","Alert","NotificationService","useAppSelector","jsxDEV","_jsxDEV","NotificationTest","userId","state","auth","user","id","loading","setLoading","testLocalNotification","scheduleNotification","test","alert","error","console","testDatabaseNotification","createNotification","testPushNotification","token","registerForPushNotificationsAsync","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","buttonContainer","onPress","disabled","create","padding","backgroundColor","borderRadius","margin","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","marginBottom","textAlign","marginVertical"],"sources":["C:/Users/PC/TravelQuest/src/components/NotificationTest.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, StyleSheet, Alert } from 'react-native';\r\nimport { NotificationService } from '../services/NotificationService';\r\nimport { useAppSelector } from '../features/hooks';\r\n\r\nexport const NotificationTest = () => {\r\n    const userId = useAppSelector(state => state.auth.user?.id);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const testLocalNotification = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await NotificationService.scheduleNotification(\r\n                'Prueba de Notificación Local',\r\n                'Esta es una notificación local de prueba',\r\n                { test: true }\r\n            );\r\n            Alert.alert('Éxito', 'Notificación local programada');\r\n        } catch (error) {\r\n            console.error('Error al programar notificación local:', error);\r\n            Alert.alert('Error', 'No se pudo programar la notificación local');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const testDatabaseNotification = async () => {\r\n        if (!userId) {\r\n            Alert.alert('Error', 'No hay usuario autenticado');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            await NotificationService.createNotification(\r\n                userId,\r\n                'Prueba de Notificación en Base de Datos',\r\n                'Esta es una notificación guardada en la base de datos',\r\n                'test',\r\n                { test: true }\r\n            );\r\n            Alert.alert('Éxito', 'Notificación guardada en la base de datos');\r\n        } catch (error) {\r\n            console.error('Error al crear notificación en base de datos:', error);\r\n            Alert.alert('Error', 'No se pudo guardar la notificación en la base de datos');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const testPushNotification = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const token = await NotificationService.registerForPushNotificationsAsync();\r\n            if (token) {\r\n                Alert.alert('Éxito', `Token de notificación push: ${token}`);\r\n            } else {\r\n                Alert.alert('Error', 'No se pudo obtener el token de notificación push');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error al registrar notificaciones push:', error);\r\n            Alert.alert('Error', 'No se pudo registrar para notificaciones push');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>Prueba de Notificaciones</Text>\r\n\r\n            <View style={styles.buttonContainer}>\r\n                <Button\r\n                    title={loading ? \"Cargando...\" : \"Probar Notificación Local\"}\r\n                    onPress={testLocalNotification}\r\n                    disabled={loading}\r\n                />\r\n            </View>\r\n\r\n            <View style={styles.buttonContainer}>\r\n                <Button\r\n                    title={loading ? \"Cargando...\" : \"Probar Notificación en Base de Datos\"}\r\n                    onPress={testDatabaseNotification}\r\n                    disabled={loading}\r\n                />\r\n            </View>\r\n\r\n            <View style={styles.buttonContainer}>\r\n                <Button\r\n                    title={loading ? \"Cargando...\" : \"Registrar para Notificaciones Push\"}\r\n                    onPress={testPushNotification}\r\n                    disabled={loading}\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 16,\r\n        backgroundColor: '#fff',\r\n        borderRadius: 8,\r\n        margin: 16,\r\n        shadowColor: '#000',\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.1,\r\n        shadowRadius: 3,\r\n        elevation: 2,\r\n    },\r\n    title: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginBottom: 16,\r\n        textAlign: 'center',\r\n    },\r\n    buttonContainer: {\r\n        marginVertical: 8,\r\n    },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
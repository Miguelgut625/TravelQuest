{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nexport var getFriends = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('friends').select('user2Id').eq('user1Id', userId),\n        friendData = _yield$supabase$from$.data,\n        friendError = _yield$supabase$from$.error;\n      if (friendError) throw friendError;\n      var friendsDetails = yield Promise.all(friendData.map(function () {\n        var _ref2 = _asyncToGenerator(function* (friend) {\n          var _yield$supabase$from$2 = yield supabase.from('users').select('username, points').eq('id', friend.user2Id).single(),\n            userData = _yield$supabase$from$2.data,\n            userError = _yield$supabase$from$2.error;\n          if (userError) {\n            console.error('Error fetching user data:', userError);\n            return null;\n          }\n          return {\n            user2_id: friend.user2Id,\n            username: userData.username,\n            points: userData.points\n          };\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      return friendsDetails.filter(function (friend) {\n        return friend !== null;\n      });\n    } catch (error) {\n      console.error('Error fetching friends:', error);\n      return [];\n    }\n  });\n  return function getFriends(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getFriendRequests = function () {\n  var _ref3 = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$3 = yield supabase.from('friend_requests').select(`\n        id,\n        sender_id,\n        created_at,\n        users!friend_requests_sender_id_fkey (\n          id,\n          username\n        )\n      `).eq('receiver_id', userId).eq('status', 'pending'),\n        data = _yield$supabase$from$3.data,\n        error = _yield$supabase$from$3.error;\n      if (error) throw error;\n      return data.map(function (request) {\n        return {\n          id: request.id,\n          senderId: request.sender_id,\n          username: request.users.username,\n          createdAt: request.created_at\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching friend requests:', error);\n      return [];\n    }\n  });\n  return function getFriendRequests(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var sendFriendRequest = function () {\n  var _ref4 = _asyncToGenerator(function* (senderId, receiverId) {\n    try {\n      var _yield$supabase$from$4 = yield supabase.from('friend_requests').insert({\n          sender_id: senderId,\n          receiver_id: receiverId,\n          status: 'pending'\n        }),\n        data = _yield$supabase$from$4.data,\n        error = _yield$supabase$from$4.error;\n      if (error) throw error;\n      return {\n        success: true,\n        data: data\n      };\n    } catch (error) {\n      console.error('Error sending friend request:', error);\n      return {\n        success: false,\n        error: error\n      };\n    }\n  });\n  return function sendFriendRequest(_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var acceptFriendRequest = function () {\n  var _ref5 = _asyncToGenerator(function* (requestId) {\n    try {\n      var _yield$supabase$from$5 = yield supabase.from('friend_requests').select('sender_id, receiver_id').eq('id', requestId).single(),\n        requestData = _yield$supabase$from$5.data,\n        requestError = _yield$supabase$from$5.error;\n      if (requestError) throw requestError;\n      var senderId = requestData.sender_id;\n      var receiverId = requestData.receiver_id;\n      var _yield$supabase$from$6 = yield supabase.from('friend_requests').update({\n          status: 'accepted'\n        }).eq('id', requestId),\n        updateError = _yield$supabase$from$6.error;\n      if (updateError) throw updateError;\n      var _yield$supabase$from$7 = yield supabase.from('friends').insert({\n          user1Id: senderId,\n          user2Id: receiverId\n        }),\n        friendError1 = _yield$supabase$from$7.error;\n      if (friendError1) throw friendError1;\n      var _yield$supabase$from$8 = yield supabase.from('friends').insert({\n          user1Id: receiverId,\n          user2Id: senderId\n        }),\n        friendError2 = _yield$supabase$from$8.error;\n      if (friendError2) throw friendError2;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error accepting friend request:', error);\n      return {\n        success: false,\n        error: error\n      };\n    }\n  });\n  return function acceptFriendRequest(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var rejectFriendRequest = function () {\n  var _ref6 = _asyncToGenerator(function* (requestId) {\n    try {\n      var _yield$supabase$from$9 = yield supabase.from('friend_requests').update({\n          status: 'rejected'\n        }).eq('id', requestId),\n        error = _yield$supabase$from$9.error;\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error rejecting friend request:', error);\n      return {\n        success: false,\n        error: error\n      };\n    }\n  });\n  return function rejectFriendRequest(_x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","getFriends","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","friendData","data","friendError","error","friendsDetails","Promise","all","map","_ref2","friend","_yield$supabase$from$2","user2Id","single","userData","userError","console","user2_id","username","points","_x2","apply","arguments","filter","_x","getFriendRequests","_ref3","_yield$supabase$from$3","request","id","senderId","sender_id","users","createdAt","created_at","_x3","sendFriendRequest","_ref4","receiverId","_yield$supabase$from$4","insert","receiver_id","status","success","_x4","_x5","acceptFriendRequest","_ref5","requestId","_yield$supabase$from$5","requestData","requestError","_yield$supabase$from$6","update","updateError","_yield$supabase$from$7","user1Id","friendError1","_yield$supabase$from$8","friendError2","_x6","rejectFriendRequest","_ref6","_yield$supabase$from$9","_x7"],"sources":["C:/Users/migue/TravelQuest/src/services/friendService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\n// Función para obtener todos los amigos de un usuario\r\nexport const getFriends = async (userId: string) => {\r\n  try {\r\n    const { data: friendData, error: friendError } = await supabase\r\n      .from('friends')\r\n      .select('user2Id')\r\n      .eq('user1Id', userId);\r\n\r\n    if (friendError) throw friendError;\r\n\r\n    // Obtener detalles de cada amigo\r\n    const friendsDetails = await Promise.all(\r\n      friendData.map(async (friend: { user2Id: string }) => {\r\n        const { data: userData, error: userError } = await supabase\r\n          .from('users')\r\n          .select('username, points')\r\n          .eq('id', friend.user2Id)\r\n          .single();\r\n\r\n        if (userError) {\r\n          console.error('Error fetching user data:', userError);\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          user2_id: friend.user2Id,\r\n          username: userData.username,\r\n          points: userData.points\r\n        };\r\n      })\r\n    );\r\n\r\n    // Filtrar los amigos que no se pudieron obtener\r\n    return friendsDetails.filter((friend) => friend !== null);\r\n  } catch (error) {\r\n    console.error('Error fetching friends:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Función para obtener todas las solicitudes de amistad pendientes\r\nexport const getFriendRequests = async (userId: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('friend_requests')\r\n      .select(`\r\n        id,\r\n        sender_id,\r\n        created_at,\r\n        users!friend_requests_sender_id_fkey (\r\n          id,\r\n          username\r\n        )\r\n      `)\r\n      .eq('receiver_id', userId)\r\n      .eq('status', 'pending');\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map((request: any) => ({\r\n      id: request.id,\r\n      senderId: request.sender_id,\r\n      username: request.users.username,\r\n      createdAt: request.created_at\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching friend requests:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Función para enviar una solicitud de amistad\r\nexport const sendFriendRequest = async (senderId: string, receiverId: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('friend_requests')\r\n      .insert({\r\n        sender_id: senderId,\r\n        receiver_id: receiverId,\r\n        status: 'pending'\r\n      });\r\n\r\n    if (error) throw error;\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error('Error sending friend request:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n// Función para aceptar una solicitud de amistad\r\nexport const acceptFriendRequest = async (requestId: string) => {\r\n  try {\r\n    // 1. Obtener información de la solicitud\r\n    const { data: requestData, error: requestError } = await supabase\r\n      .from('friend_requests')\r\n      .select('sender_id, receiver_id')\r\n      .eq('id', requestId)\r\n      .single();\r\n\r\n    if (requestError) throw requestError;\r\n\r\n    const senderId = requestData.sender_id;\r\n    const receiverId = requestData.receiver_id;\r\n\r\n    // 2. Iniciar una transacción para realizar todas las operaciones\r\n    // Supabase no soporta transacciones directamente, así que hacemos las operaciones en secuencia\r\n\r\n    // 3. Actualizar el estado de la solicitud a 'accepted'\r\n    const { error: updateError } = await supabase\r\n      .from('friend_requests')\r\n      .update({ status: 'accepted' })\r\n      .eq('id', requestId);\r\n\r\n    if (updateError) throw updateError;\r\n\r\n    // 4. Crear relación de amistad bidireccional (A es amigo de B y B es amigo de A)\r\n    // Primero: el remitente es amigo del receptor\r\n    const { error: friendError1 } = await supabase\r\n      .from('friends')\r\n      .insert({\r\n        user1Id: senderId,\r\n        user2Id: receiverId\r\n      });\r\n\r\n    if (friendError1) throw friendError1;\r\n\r\n    // Segundo: el receptor es amigo del remitente\r\n    const { error: friendError2 } = await supabase\r\n      .from('friends')\r\n      .insert({\r\n        user1Id: receiverId,\r\n        user2Id: senderId\r\n      });\r\n\r\n    if (friendError2) throw friendError2;\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error accepting friend request:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n// Función para rechazar una solicitud de amistad\r\nexport const rejectFriendRequest = async (requestId: string) => {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('friend_requests')\r\n      .update({ status: 'rejected' })\r\n      .eq('id', requestId);\r\n\r\n    if (error) throw error;\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error rejecting friend request:', error);\r\n    return { success: false, error };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
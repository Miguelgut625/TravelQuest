{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nvar _require = require(\"@google/generative-ai\"),\n  GoogleGenerativeAI = _require.GoogleGenerativeAI;\nvar genAI = new GoogleGenerativeAI(\"AIzaSyB4PuDOYXgbH9egme1UCO0CiRcOV4kVfMM\");\nvar getOrCreateUser = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('users').select('id').eq('id', userId).single(),\n        existingUser = _yield$supabase$from$.data,\n        searchError = _yield$supabase$from$.error;\n      if (searchError && searchError.code !== 'PGRST116') {\n        throw searchError;\n      }\n      if (existingUser) {\n        return existingUser.id;\n      }\n      var _yield$supabase$from$2 = yield supabase.from('users').insert([{\n          id: userId,\n          email: `${userId}@temp.com`,\n          username: `user_${userId.slice(0, 8)}`,\n          password: 'temp_password'\n        }]).select('id').single(),\n        newUser = _yield$supabase$from$2.data,\n        insertError = _yield$supabase$from$2.error;\n      if (insertError) throw insertError;\n      return newUser.id;\n    } catch (error) {\n      console.error('Error al obtener/crear el usuario:', error);\n      throw error;\n    }\n  });\n  return function getOrCreateUser(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getOrCreateCity = function () {\n  var _ref2 = _asyncToGenerator(function* (cityName) {\n    try {\n      var _yield$supabase$from$3 = yield supabase.from('cities').select('id').eq('name', cityName).single(),\n        existingCity = _yield$supabase$from$3.data,\n        searchError = _yield$supabase$from$3.error;\n      if (searchError && searchError.code !== 'PGRST116') {\n        throw searchError;\n      }\n      if (existingCity) {\n        return existingCity.id;\n      }\n      var _yield$supabase$from$4 = yield supabase.from('cities').insert([{\n          name: cityName\n        }]).select('id').single(),\n        newCity = _yield$supabase$from$4.data,\n        insertError = _yield$supabase$from$4.error;\n      if (insertError) throw insertError;\n      return newCity.id;\n    } catch (error) {\n      console.error('Error al obtener/crear la ciudad:', error);\n      throw error;\n    }\n  });\n  return function getOrCreateCity(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getExistingChallenges = function () {\n  var _ref3 = _asyncToGenerator(function* (cityId, count, userId) {\n    try {\n      var _yield$supabase$from$5 = yield supabase.from('challenges').select('*').eq('cityId', cityId),\n        challenges = _yield$supabase$from$5.data,\n        error = _yield$supabase$from$5.error;\n      if (error) throw error;\n      if (!challenges || challenges.length === 0) {\n        return null;\n      }\n      var _yield$supabase$from$6 = yield supabase.from('journeys').select('id').eq('userId', userId),\n        userJourneys = _yield$supabase$from$6.data,\n        journeysError = _yield$supabase$from$6.error;\n      if (journeysError) throw journeysError;\n      if (!userJourneys || userJourneys.length === 0) {\n        if (challenges.length >= 10) {\n          var shuffled = challenges.sort(function () {\n            return 0.5 - Math.random();\n          });\n          return shuffled.slice(0, count);\n        }\n        return null;\n      }\n      var _yield$supabase$from$7 = yield supabase.from('journeys_missions').select('challengeId').in('journeyId', userJourneys.map(function (j) {\n          return j.id;\n        })).in('challengeId', challenges.map(function (c) {\n          return c.id;\n        })),\n        userChallenges = _yield$supabase$from$7.data,\n        userError = _yield$supabase$from$7.error;\n      if (userError) throw userError;\n      var userChallengeIds = new Set((userChallenges == null ? void 0 : userChallenges.map(function (uc) {\n        return uc.challengeId;\n      })) || []);\n      var availableChallenges = challenges.filter(function (c) {\n        return !userChallengeIds.has(c.id);\n      });\n      if (availableChallenges.length >= 10) {\n        var _shuffled = availableChallenges.sort(function () {\n          return 0.5 - Math.random();\n        });\n        return _shuffled.slice(0, count);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error obteniendo desafíos existentes:', error);\n      throw error;\n    }\n  });\n  return function getExistingChallenges(_x3, _x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var generateMission = function () {\n  var _ref4 = _asyncToGenerator(function* (cityName, duration, missionCount, userId, startDate, endDate) {\n    try {\n      console.log('generateMission recibió fechas:', {\n        startDate: startDate,\n        endDate: endDate,\n        duration: duration\n      });\n      var validStartDate = startDate instanceof Date ? startDate : new Date();\n      var validEndDate = endDate instanceof Date ? endDate : new Date(Date.now() + duration * 24 * 60 * 60 * 1000);\n      var startIsoString = validStartDate.toISOString();\n      var endIsoString = validEndDate.toISOString();\n      console.log('Fechas validadas para misiones:', {\n        startIsoString: startIsoString,\n        endIsoString: endIsoString\n      });\n      console.log('Iniciando generación de misión:', {\n        cityName: cityName,\n        duration: duration,\n        missionCount: missionCount,\n        userId: userId,\n        startDate: startDate,\n        endDate: endDate\n      });\n      yield getOrCreateUser(userId);\n      var cityId = yield getOrCreateCity(cityName);\n      console.log('CityId obtenido/creado:', cityId);\n      var _yield$supabase$from$8 = yield supabase.from('journeys').insert([{\n          userId: userId,\n          cityId: cityId,\n          description: `Viaje a ${cityName} por ${duration} días`,\n          created_at: new Date().toISOString(),\n          start_date: startIsoString,\n          end_date: endIsoString\n        }]).select('id').single(),\n        journey = _yield$supabase$from$8.data,\n        journeyError = _yield$supabase$from$8.error;\n      if (journeyError) {\n        console.error('Error creando journey:', journeyError);\n        throw journeyError;\n      }\n      console.log('Journey creado:', journey);\n      var existingChallenges = yield getExistingChallenges(cityId, missionCount, userId);\n      console.log('Desafíos existentes encontrados:', existingChallenges);\n      var challenges;\n      if (existingChallenges && existingChallenges.length > 0) {\n        console.log('Usando desafíos existentes');\n        challenges = existingChallenges;\n      } else {\n        console.log('Generando nuevos desafíos');\n        var model = genAI.getGenerativeModel({\n          model: \"gemini-1.5-flash\"\n        });\n        var prompt = `Genera ${missionCount} misiones en ${cityName} que se puedan completar en ${duration} días. Devuelve un objeto JSON con la siguiente estructura exacta:\n{\n  \"misiones\": [\n    {\n      \"Título\": \"Título de la misión\",\n      \"Descripción\": \"Descripción detallada de la misión incluyendo qué foto tomar\",\n      \"Dificultad\": \"Fácil|Media|Difícil\",\n      \"Puntos\": 25|50|100\n    }\n  ]\n}\nLos puntos deben ser: 25 para Fácil, 50 para Media, 100 para Difícil. No incluyas explicaciones adicionales, solo el JSON.`;\n        console.log('Prompt:', prompt);\n        var result = yield model.generateContent(prompt);\n        var response = yield result.response;\n        var missionsData = response.text();\n        console.log('Respuesta de la API:', missionsData);\n        var jsonMatch = missionsData.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error('No se encontró un objeto JSON válido en la respuesta');\n        }\n        var missions = JSON.parse(jsonMatch[0]);\n        if (!missions.misiones || !Array.isArray(missions.misiones)) {\n          throw new Error('La respuesta no contiene un array de misiones válido');\n        }\n        var formattedChallenges = missions.misiones.map(function (mission) {\n          return {\n            title: mission.Título,\n            description: mission.Descripción,\n            cityId: cityId,\n            duration: duration,\n            difficulty: mission.Dificultad,\n            points: mission.Puntos\n          };\n        });\n        var _yield$supabase$from$9 = yield supabase.from('challenges').insert(formattedChallenges).select('id'),\n          newChallenges = _yield$supabase$from$9.data,\n          challengesError = _yield$supabase$from$9.error;\n        if (challengesError) throw challengesError;\n        challenges = newChallenges;\n      }\n      var journeyMissions = challenges.map(function (challenge) {\n        return {\n          journeyId: journey.id,\n          challengeId: challenge.id,\n          completed: false,\n          created_at: new Date().toISOString(),\n          start_date: startIsoString,\n          end_date: endIsoString\n        };\n      });\n      console.log('Vincular misiones al journey:', journeyMissions);\n      var _yield$supabase$from$10 = yield supabase.from('journeys_missions').insert(journeyMissions),\n        linkError = _yield$supabase$from$10.error;\n      if (linkError) {\n        console.error('Error vinculando misiones:', linkError);\n        throw linkError;\n      }\n      var _yield$supabase$from$11 = yield supabase.from('journeys_missions').select(`\n        id,\n        challengeId,\n        completed,\n        challenge:challenges (\n        title,\n        description,\n        difficulty,\n          points\n        )\n      `).eq('journeyId', journey.id).order('created_at', {\n          ascending: true\n        }),\n        createdMissions = _yield$supabase$from$11.data,\n        verifyError = _yield$supabase$from$11.error;\n      if (verifyError) {\n        console.error('Error verificando misiones creadas:', verifyError);\n        throw verifyError;\n      }\n      if (!createdMissions || createdMissions.length === 0) {\n        throw new Error('No se pudieron crear las misiones');\n      }\n      console.log('Misiones creadas verificadas:', createdMissions);\n      return {\n        journeyId: journey.id,\n        challenges: createdMissions\n      };\n    } catch (error) {\n      console.error('Error generando misiones:', error);\n      throw error;\n    }\n  });\n  return function generateMission(_x6, _x7, _x8, _x9, _x10, _x11) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport default generateMission;","map":{"version":3,"names":["supabase","_require","require","GoogleGenerativeAI","genAI","getOrCreateUser","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","single","existingUser","data","searchError","error","code","id","_yield$supabase$from$2","insert","email","username","slice","password","newUser","insertError","console","_x","apply","arguments","getOrCreateCity","_ref2","cityName","_yield$supabase$from$3","existingCity","_yield$supabase$from$4","name","newCity","_x2","getExistingChallenges","_ref3","cityId","count","_yield$supabase$from$5","challenges","length","_yield$supabase$from$6","userJourneys","journeysError","shuffled","sort","Math","random","_yield$supabase$from$7","in","map","j","c","userChallenges","userError","userChallengeIds","Set","uc","challengeId","availableChallenges","filter","has","_x3","_x4","_x5","generateMission","_ref4","duration","missionCount","startDate","endDate","log","validStartDate","Date","validEndDate","now","startIsoString","toISOString","endIsoString","_yield$supabase$from$8","description","created_at","start_date","end_date","journey","journeyError","existingChallenges","model","getGenerativeModel","prompt","result","generateContent","response","missionsData","text","jsonMatch","match","Error","missions","JSON","parse","misiones","Array","isArray","formattedChallenges","mission","title","Título","Descripción","difficulty","Dificultad","points","Puntos","_yield$supabase$from$9","newChallenges","challengesError","journeyMissions","challenge","journeyId","completed","_yield$supabase$from$10","linkError","_yield$supabase$from$11","order","ascending","createdMissions","verifyError","_x6","_x7","_x8","_x9","_x10","_x11"],"sources":["C:/Users/migue/TravelQuest/src/services/missionGenerator.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n\r\n// Accede a tu clave de API como una variable de entorno\r\nconst genAI = new GoogleGenerativeAI(\"AIzaSyB4PuDOYXgbH9egme1UCO0CiRcOV4kVfMM\");\r\n\r\n// Interfaces para los tipos de datos\r\ninterface Challenge {\r\n  id: string;\r\n}\r\n\r\ninterface UserChallenge {\r\n  challengeId: string;\r\n}\r\n\r\ninterface Journey {\r\n  id: string;\r\n}\r\n\r\n// Función para verificar y crear usuario si no existe\r\nconst getOrCreateUser = async (userId: string) => {\r\n  try {\r\n    // Verificar si el usuario existe\r\n    const { data: existingUser, error: searchError } = await supabase\r\n      .from('users')\r\n      .select('id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (searchError && searchError.code !== 'PGRST116') {\r\n      throw searchError;\r\n    }\r\n\r\n    if (existingUser) {\r\n      return existingUser.id;\r\n    }\r\n\r\n    // Si no existe, crear el usuario\r\n    const { data: newUser, error: insertError } = await supabase\r\n      .from('users')\r\n      .insert([{\r\n        id: userId,\r\n        email: `${userId}@temp.com`, // Email temporal\r\n        username: `user_${userId.slice(0, 8)}`, // Username temporal\r\n        password: 'temp_password' // Contraseña temporal\r\n      }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (insertError) throw insertError;\r\n\r\n    return newUser.id;\r\n  } catch (error) {\r\n    console.error('Error al obtener/crear el usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para obtener o crear una ciudad\r\nconst getOrCreateCity = async (cityName: string) => {\r\n  try {\r\n    // Primero intentamos encontrar la ciudad\r\n    const { data: existingCity, error: searchError } = await supabase\r\n      .from('cities')\r\n      .select('id')\r\n      .eq('name', cityName)\r\n      .single();\r\n\r\n    if (searchError && searchError.code !== 'PGRST116') { // PGRST116 es el código para \"no se encontraron resultados\"\r\n      throw searchError;\r\n    }\r\n\r\n    if (existingCity) {\r\n      return existingCity.id;\r\n    }\r\n\r\n    // Si no existe la ciudad, la creamos\r\n    const { data: newCity, error: insertError } = await supabase\r\n      .from('cities')\r\n      .insert([{ name: cityName }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (insertError) throw insertError;\r\n\r\n    return newCity.id;\r\n  } catch (error) {\r\n    console.error('Error al obtener/crear la ciudad:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para obtener desafíos existentes de una ciudad que el usuario no haya solicitado\r\nconst getExistingChallenges = async (cityId: string, count: number, userId: string) => {\r\n  try {\r\n    // Primero obtenemos todos los desafíos de la ciudad\r\n    const { data: challenges, error } = await supabase\r\n      .from('challenges')\r\n      .select('*') // Seleccionar todos los campos, no solo el id\r\n      .eq('cityId', cityId);\r\n\r\n    if (error) throw error;\r\n\r\n    if (!challenges || challenges.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Obtener los desafíos que el usuario ya ha solicitado\r\n    // Primero obtenemos los journeys del usuario\r\n    const { data: userJourneys, error: journeysError } = await supabase\r\n      .from('journeys')\r\n      .select('id')\r\n      .eq('userId', userId);\r\n\r\n    if (journeysError) throw journeysError;\r\n\r\n    if (!userJourneys || userJourneys.length === 0) {\r\n      // Si el usuario no tiene journeys, seleccionar aleatoriamente la cantidad solicitada\r\n      if (challenges.length >= 10) {\r\n        const shuffled = challenges.sort(() => 0.5 - Math.random());\r\n        return shuffled.slice(0, count);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Luego obtenemos los desafíos asociados a esos journeys\r\n    const { data: userChallenges, error: userError } = await supabase\r\n      .from('journeys_missions')\r\n      .select('challengeId')\r\n      .in('journeyId', userJourneys.map((j: Journey) => j.id))\r\n      .in('challengeId', challenges.map((c: Challenge) => c.id));\r\n\r\n    if (userError) throw userError;\r\n\r\n    // Filtrar los desafíos que el usuario ya ha solicitado\r\n    const userChallengeIds = new Set(userChallenges?.map((uc: UserChallenge) => uc.challengeId) || []);\r\n    const availableChallenges = challenges.filter((c: Challenge) => !userChallengeIds.has(c.id));\r\n\r\n    // Si hay suficientes desafíos disponibles (10 o más)\r\n    if (availableChallenges.length >= 10) {\r\n      // Mezclar el array de desafíos disponibles\r\n      const shuffled = availableChallenges.sort(() => 0.5 - Math.random());\r\n      // Tomar solo la cantidad solicitada\r\n      return shuffled.slice(0, count);\r\n    }\r\n\r\n    return null; // Retornar null si no hay suficientes desafíos disponibles\r\n  } catch (error) {\r\n    console.error('Error obteniendo desafíos existentes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const generateMission = async (\r\n  cityName: string, \r\n  duration: number, \r\n  missionCount: number, \r\n  userId: string,\r\n  startDate: Date | null,\r\n  endDate: Date | null\r\n) => {\r\n  try {\r\n    console.log('generateMission recibió fechas:', {\r\n      startDate,\r\n      endDate,\r\n      duration\r\n    });\r\n    \r\n    // Crear fechas por defecto si no se proporcionan\r\n    const validStartDate = startDate instanceof Date ? startDate : new Date();\r\n    const validEndDate = endDate instanceof Date ? endDate : new Date(Date.now() + duration * 24 * 60 * 60 * 1000);\r\n    \r\n    // Convertir a ISO string para la base de datos\r\n    const startIsoString = validStartDate.toISOString();\r\n    const endIsoString = validEndDate.toISOString();\r\n    \r\n    console.log('Fechas validadas para misiones:', {\r\n      startIsoString,\r\n      endIsoString\r\n    });\r\n    \r\n    console.log('Iniciando generación de misión:', { \r\n      cityName, \r\n      duration, \r\n      missionCount, \r\n      userId,\r\n      startDate,\r\n      endDate \r\n    });\r\n\r\n    // Verificar y crear usuario si no existe\r\n    await getOrCreateUser(userId);\r\n\r\n    // Obtener o crear la ciudad\r\n    const cityId = await getOrCreateCity(cityName);\r\n    console.log('CityId obtenido/creado:', cityId);\r\n\r\n    // Crear un nuevo journey\r\n    const { data: journey, error: journeyError } = await supabase\r\n      .from('journeys')\r\n      .insert([{\r\n        userId,\r\n        cityId,\r\n        description: `Viaje a ${cityName} por ${duration} días`,\r\n        created_at: new Date().toISOString(),\r\n        start_date: startIsoString,\r\n        end_date: endIsoString\r\n      }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (journeyError) {\r\n      console.error('Error creando journey:', journeyError);\r\n      throw journeyError;\r\n    }\r\n\r\n    console.log('Journey creado:', journey);\r\n\r\n    // Verificar si hay suficientes desafíos existentes que el usuario no haya solicitado\r\n    const existingChallenges = await getExistingChallenges(cityId, missionCount, userId);\r\n    console.log('Desafíos existentes encontrados:', existingChallenges);\r\n\r\n    let challenges;\r\n    if (existingChallenges && existingChallenges.length > 0) {\r\n      // Usar desafíos existentes\r\n      console.log('Usando desafíos existentes');\r\n      challenges = existingChallenges;\r\n    } else {\r\n      // Solo generar nuevos desafíos si no hay suficientes existentes\r\n      console.log('Generando nuevos desafíos');\r\n      // Generar nuevos desafíos\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n      const prompt = `Genera ${missionCount} misiones en ${cityName} que se puedan completar en ${duration} días. Devuelve un objeto JSON con la siguiente estructura exacta:\r\n{\r\n  \"misiones\": [\r\n    {\r\n      \"Título\": \"Título de la misión\",\r\n      \"Descripción\": \"Descripción detallada de la misión incluyendo qué foto tomar\",\r\n      \"Dificultad\": \"Fácil|Media|Difícil\",\r\n      \"Puntos\": 25|50|100\r\n    }\r\n  ]\r\n}\r\nLos puntos deben ser: 25 para Fácil, 50 para Media, 100 para Difícil. No incluyas explicaciones adicionales, solo el JSON.`;\r\n      \r\n      console.log('Prompt:', prompt);\r\n      const result = await model.generateContent(prompt);\r\n      const response = await result.response;\r\n      const missionsData = response.text();\r\n\r\n      console.log('Respuesta de la API:', missionsData);\r\n\r\n      const jsonMatch = missionsData.match(/\\{[\\s\\S]*\\}/);\r\n      if (!jsonMatch) {\r\n        throw new Error('No se encontró un objeto JSON válido en la respuesta');\r\n      }\r\n\r\n      const missions = JSON.parse(jsonMatch[0]);\r\n\r\n      if (!missions.misiones || !Array.isArray(missions.misiones)) {\r\n        throw new Error('La respuesta no contiene un array de misiones válido');\r\n      }\r\n\r\n      // Crear los desafíos\r\n      const formattedChallenges = missions.misiones.map((mission: any) => ({\r\n        title: mission.Título,\r\n        description: mission.Descripción,\r\n        cityId,\r\n        duration,\r\n        difficulty: mission.Dificultad,\r\n        points: mission.Puntos\r\n      }));\r\n\r\n      const { data: newChallenges, error: challengesError } = await supabase\r\n        .from('challenges')\r\n        .insert(formattedChallenges)\r\n        .select('id');\r\n\r\n      if (challengesError) throw challengesError;\r\n\r\n      challenges = newChallenges;\r\n    }\r\n\r\n    // Vincular los desafíos al journey\r\n    const journeyMissions = challenges.map((challenge: { id: string }) => ({\r\n      journeyId: journey.id,\r\n      challengeId: challenge.id,\r\n      completed: false,\r\n      created_at: new Date().toISOString(),\r\n      start_date: startIsoString,\r\n      end_date: endIsoString\r\n    }));\r\n\r\n    console.log('Vincular misiones al journey:', journeyMissions);\r\n\r\n    const { error: linkError } = await supabase\r\n      .from('journeys_missions')\r\n      .insert(journeyMissions);\r\n\r\n    if (linkError) {\r\n      console.error('Error vinculando misiones:', linkError);\r\n      throw linkError;\r\n    }\r\n\r\n    // Verificar que las misiones se hayan creado correctamente\r\n    const { data: createdMissions, error: verifyError } = await supabase\r\n      .from('journeys_missions')\r\n      .select(`\r\n        id,\r\n        challengeId,\r\n        completed,\r\n        challenge:challenges (\r\n        title,\r\n        description,\r\n        difficulty,\r\n          points\r\n        )\r\n      `)\r\n      .eq('journeyId', journey.id)\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (verifyError) {\r\n      console.error('Error verificando misiones creadas:', verifyError);\r\n      throw verifyError;\r\n    }\r\n\r\n    if (!createdMissions || createdMissions.length === 0) {\r\n      throw new Error('No se pudieron crear las misiones');\r\n    }\r\n\r\n    console.log('Misiones creadas verificadas:', createdMissions);\r\n\r\n    return {\r\n      journeyId: journey.id,\r\n      challenges: createdMissions\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generando misiones:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default generateMission;\r\n"],"mappings":";AAAA,SAASA,QAAQ;AACjB,IAAAC,QAAA,GAA+BC,OAAO,CAAC,uBAAuB,CAAC;EAAvDC,kBAAkB,GAAAF,QAAA,CAAlBE,kBAAkB;AAG1B,IAAMC,KAAK,GAAG,IAAID,kBAAkB,CAAC,yCAAyC,CAAC;AAgB/E,IAAME,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAc,EAAK;IAChD,IAAI;MAEF,IAAAC,qBAAA,SAAyDT,QAAQ,CAC9DU,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,IAAI,EAAEJ,MAAM,CAAC,CAChBK,MAAM,CAAC,CAAC;QAJGC,YAAY,GAAAL,qBAAA,CAAlBM,IAAI;QAAuBC,WAAW,GAAAP,qBAAA,CAAlBQ,KAAK;MAMjC,IAAID,WAAW,IAAIA,WAAW,CAACE,IAAI,KAAK,UAAU,EAAE;QAClD,MAAMF,WAAW;MACnB;MAEA,IAAIF,YAAY,EAAE;QAChB,OAAOA,YAAY,CAACK,EAAE;MACxB;MAGA,IAAAC,sBAAA,SAAoDpB,QAAQ,CACzDU,IAAI,CAAC,OAAO,CAAC,CACbW,MAAM,CAAC,CAAC;UACPF,EAAE,EAAEX,MAAM;UACVc,KAAK,EAAE,GAAGd,MAAM,WAAW;UAC3Be,QAAQ,EAAE,QAAQf,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UACtCC,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC,CACFd,MAAM,CAAC,IAAI,CAAC,CACZE,MAAM,CAAC,CAAC;QATGa,OAAO,GAAAN,sBAAA,CAAbL,IAAI;QAAkBY,WAAW,GAAAP,sBAAA,CAAlBH,KAAK;MAW5B,IAAIU,WAAW,EAAE,MAAMA,WAAW;MAElC,OAAOD,OAAO,CAACP,EAAE;IACnB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBApCKZ,eAAeA,CAAAwB,EAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoCpB;AAGD,IAAMC,eAAe;EAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAG,WAAO2B,QAAgB,EAAK;IAClD,IAAI;MAEF,IAAAC,sBAAA,SAAyDnC,QAAQ,CAC9DU,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,MAAM,EAAEsB,QAAQ,CAAC,CACpBrB,MAAM,CAAC,CAAC;QAJGuB,YAAY,GAAAD,sBAAA,CAAlBpB,IAAI;QAAuBC,WAAW,GAAAmB,sBAAA,CAAlBlB,KAAK;MAMjC,IAAID,WAAW,IAAIA,WAAW,CAACE,IAAI,KAAK,UAAU,EAAE;QAClD,MAAMF,WAAW;MACnB;MAEA,IAAIoB,YAAY,EAAE;QAChB,OAAOA,YAAY,CAACjB,EAAE;MACxB;MAGA,IAAAkB,sBAAA,SAAoDrC,QAAQ,CACzDU,IAAI,CAAC,QAAQ,CAAC,CACdW,MAAM,CAAC,CAAC;UAAEiB,IAAI,EAAEJ;QAAS,CAAC,CAAC,CAAC,CAC5BvB,MAAM,CAAC,IAAI,CAAC,CACZE,MAAM,CAAC,CAAC;QAJG0B,OAAO,GAAAF,sBAAA,CAAbtB,IAAI;QAAkBY,WAAW,GAAAU,sBAAA,CAAlBpB,KAAK;MAM5B,IAAIU,WAAW,EAAE,MAAMA,WAAW;MAElC,OAAOY,OAAO,CAACpB,EAAE;IACnB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBA/BKe,eAAeA,CAAAQ,GAAA;IAAA,OAAAP,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GA+BpB;AAGD,IAAMU,qBAAqB;EAAA,IAAAC,KAAA,GAAAnC,iBAAA,CAAG,WAAOoC,MAAc,EAAEC,KAAa,EAAEpC,MAAc,EAAK;IACrF,IAAI;MAEF,IAAAqC,sBAAA,SAA0C7C,QAAQ,CAC/CU,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,QAAQ,EAAE+B,MAAM,CAAC;QAHTG,UAAU,GAAAD,sBAAA,CAAhB9B,IAAI;QAAcE,KAAK,GAAA4B,sBAAA,CAAL5B,KAAK;MAK/B,IAAIA,KAAK,EAAE,MAAMA,KAAK;MAEtB,IAAI,CAAC6B,UAAU,IAAIA,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1C,OAAO,IAAI;MACb;MAIA,IAAAC,sBAAA,SAA2DhD,QAAQ,CAChEU,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,QAAQ,EAAEJ,MAAM,CAAC;QAHTyC,YAAY,GAAAD,sBAAA,CAAlBjC,IAAI;QAAuBmC,aAAa,GAAAF,sBAAA,CAApB/B,KAAK;MAKjC,IAAIiC,aAAa,EAAE,MAAMA,aAAa;MAEtC,IAAI,CAACD,YAAY,IAAIA,YAAY,CAACF,MAAM,KAAK,CAAC,EAAE;QAE9C,IAAID,UAAU,CAACC,MAAM,IAAI,EAAE,EAAE;UAC3B,IAAMI,QAAQ,GAAGL,UAAU,CAACM,IAAI,CAAC;YAAA,OAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;UAAA,EAAC;UAC3D,OAAOH,QAAQ,CAAC3B,KAAK,CAAC,CAAC,EAAEoB,KAAK,CAAC;QACjC;QACA,OAAO,IAAI;MACb;MAGA,IAAAW,sBAAA,SAAyDvD,QAAQ,CAC9DU,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC,aAAa,CAAC,CACrB6C,EAAE,CAAC,WAAW,EAAEP,YAAY,CAACQ,GAAG,CAAC,UAACC,CAAU;UAAA,OAAKA,CAAC,CAACvC,EAAE;QAAA,EAAC,CAAC,CACvDqC,EAAE,CAAC,aAAa,EAAEV,UAAU,CAACW,GAAG,CAAC,UAACE,CAAY;UAAA,OAAKA,CAAC,CAACxC,EAAE;QAAA,EAAC,CAAC;QAJ9CyC,cAAc,GAAAL,sBAAA,CAApBxC,IAAI;QAAyB8C,SAAS,GAAAN,sBAAA,CAAhBtC,KAAK;MAMnC,IAAI4C,SAAS,EAAE,MAAMA,SAAS;MAG9B,IAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAAH,cAAc,oBAAdA,cAAc,CAAEH,GAAG,CAAC,UAACO,EAAiB;QAAA,OAAKA,EAAE,CAACC,WAAW;MAAA,EAAC,KAAI,EAAE,CAAC;MAClG,IAAMC,mBAAmB,GAAGpB,UAAU,CAACqB,MAAM,CAAC,UAACR,CAAY;QAAA,OAAK,CAACG,gBAAgB,CAACM,GAAG,CAACT,CAAC,CAACxC,EAAE,CAAC;MAAA,EAAC;MAG5F,IAAI+C,mBAAmB,CAACnB,MAAM,IAAI,EAAE,EAAE;QAEpC,IAAMI,SAAQ,GAAGe,mBAAmB,CAACd,IAAI,CAAC;UAAA,OAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;QAAA,EAAC;QAEpE,OAAOH,SAAQ,CAAC3B,KAAK,CAAC,CAAC,EAAEoB,KAAK,CAAC;MACjC;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBA1DKwB,qBAAqBA,CAAA4B,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAA7B,KAAA,CAAAZ,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0D1B;AAED,OAAO,IAAMyC,eAAe;EAAA,IAAAC,KAAA,GAAAlE,iBAAA,CAAG,WAC7B2B,QAAgB,EAChBwC,QAAgB,EAChBC,YAAoB,EACpBnE,MAAc,EACdoE,SAAsB,EACtBC,OAAoB,EACjB;IACH,IAAI;MACFjD,OAAO,CAACkD,GAAG,CAAC,iCAAiC,EAAE;QAC7CF,SAAS,EAATA,SAAS;QACTC,OAAO,EAAPA,OAAO;QACPH,QAAQ,EAARA;MACF,CAAC,CAAC;MAGF,IAAMK,cAAc,GAAGH,SAAS,YAAYI,IAAI,GAAGJ,SAAS,GAAG,IAAII,IAAI,CAAC,CAAC;MACzE,IAAMC,YAAY,GAAGJ,OAAO,YAAYG,IAAI,GAAGH,OAAO,GAAG,IAAIG,IAAI,CAACA,IAAI,CAACE,GAAG,CAAC,CAAC,GAAGR,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAG9G,IAAMS,cAAc,GAAGJ,cAAc,CAACK,WAAW,CAAC,CAAC;MACnD,IAAMC,YAAY,GAAGJ,YAAY,CAACG,WAAW,CAAC,CAAC;MAE/CxD,OAAO,CAACkD,GAAG,CAAC,iCAAiC,EAAE;QAC7CK,cAAc,EAAdA,cAAc;QACdE,YAAY,EAAZA;MACF,CAAC,CAAC;MAEFzD,OAAO,CAACkD,GAAG,CAAC,iCAAiC,EAAE;QAC7C5C,QAAQ,EAARA,QAAQ;QACRwC,QAAQ,EAARA,QAAQ;QACRC,YAAY,EAAZA,YAAY;QACZnE,MAAM,EAANA,MAAM;QACNoE,SAAS,EAATA,SAAS;QACTC,OAAO,EAAPA;MACF,CAAC,CAAC;MAGF,MAAMxE,eAAe,CAACG,MAAM,CAAC;MAG7B,IAAMmC,MAAM,SAASX,eAAe,CAACE,QAAQ,CAAC;MAC9CN,OAAO,CAACkD,GAAG,CAAC,yBAAyB,EAAEnC,MAAM,CAAC;MAG9C,IAAA2C,sBAAA,SAAqDtF,QAAQ,CAC1DU,IAAI,CAAC,UAAU,CAAC,CAChBW,MAAM,CAAC,CAAC;UACPb,MAAM,EAANA,MAAM;UACNmC,MAAM,EAANA,MAAM;UACN4C,WAAW,EAAE,WAAWrD,QAAQ,QAAQwC,QAAQ,OAAO;UACvDc,UAAU,EAAE,IAAIR,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCK,UAAU,EAAEN,cAAc;UAC1BO,QAAQ,EAAEL;QACZ,CAAC,CAAC,CAAC,CACF1E,MAAM,CAAC,IAAI,CAAC,CACZE,MAAM,CAAC,CAAC;QAXG8E,OAAO,GAAAL,sBAAA,CAAbvE,IAAI;QAAkB6E,YAAY,GAAAN,sBAAA,CAAnBrE,KAAK;MAa5B,IAAI2E,YAAY,EAAE;QAChBhE,OAAO,CAACX,KAAK,CAAC,wBAAwB,EAAE2E,YAAY,CAAC;QACrD,MAAMA,YAAY;MACpB;MAEAhE,OAAO,CAACkD,GAAG,CAAC,iBAAiB,EAAEa,OAAO,CAAC;MAGvC,IAAME,kBAAkB,SAASpD,qBAAqB,CAACE,MAAM,EAAEgC,YAAY,EAAEnE,MAAM,CAAC;MACpFoB,OAAO,CAACkD,GAAG,CAAC,kCAAkC,EAAEe,kBAAkB,CAAC;MAEnE,IAAI/C,UAAU;MACd,IAAI+C,kBAAkB,IAAIA,kBAAkB,CAAC9C,MAAM,GAAG,CAAC,EAAE;QAEvDnB,OAAO,CAACkD,GAAG,CAAC,4BAA4B,CAAC;QACzChC,UAAU,GAAG+C,kBAAkB;MACjC,CAAC,MAAM;QAELjE,OAAO,CAACkD,GAAG,CAAC,2BAA2B,CAAC;QAExC,IAAMgB,KAAK,GAAG1F,KAAK,CAAC2F,kBAAkB,CAAC;UAAED,KAAK,EAAE;QAAmB,CAAC,CAAC;QAErE,IAAME,MAAM,GAAG,UAAUrB,YAAY,gBAAgBzC,QAAQ,+BAA+BwC,QAAQ;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H;QAErH9C,OAAO,CAACkD,GAAG,CAAC,SAAS,EAAEkB,MAAM,CAAC;QAC9B,IAAMC,MAAM,SAASH,KAAK,CAACI,eAAe,CAACF,MAAM,CAAC;QAClD,IAAMG,QAAQ,SAASF,MAAM,CAACE,QAAQ;QACtC,IAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC;QAEpCzE,OAAO,CAACkD,GAAG,CAAC,sBAAsB,EAAEsB,YAAY,CAAC;QAEjD,IAAME,SAAS,GAAGF,YAAY,CAACG,KAAK,CAAC,aAAa,CAAC;QACnD,IAAI,CAACD,SAAS,EAAE;UACd,MAAM,IAAIE,KAAK,CAAC,sDAAsD,CAAC;QACzE;QAEA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC;QAEzC,IAAI,CAACG,QAAQ,CAACG,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,QAAQ,CAACG,QAAQ,CAAC,EAAE;UAC3D,MAAM,IAAIJ,KAAK,CAAC,sDAAsD,CAAC;QACzE;QAGA,IAAMO,mBAAmB,GAAGN,QAAQ,CAACG,QAAQ,CAACnD,GAAG,CAAC,UAACuD,OAAY;UAAA,OAAM;YACnEC,KAAK,EAAED,OAAO,CAACE,MAAM;YACrB3B,WAAW,EAAEyB,OAAO,CAACG,WAAW;YAChCxE,MAAM,EAANA,MAAM;YACN+B,QAAQ,EAARA,QAAQ;YACR0C,UAAU,EAAEJ,OAAO,CAACK,UAAU;YAC9BC,MAAM,EAAEN,OAAO,CAACO;UAClB,CAAC;QAAA,CAAC,CAAC;QAEH,IAAAC,sBAAA,SAA8DxH,QAAQ,CACnEU,IAAI,CAAC,YAAY,CAAC,CAClBW,MAAM,CAAC0F,mBAAmB,CAAC,CAC3BpG,MAAM,CAAC,IAAI,CAAC;UAHD8G,aAAa,GAAAD,sBAAA,CAAnBzG,IAAI;UAAwB2G,eAAe,GAAAF,sBAAA,CAAtBvG,KAAK;QAKlC,IAAIyG,eAAe,EAAE,MAAMA,eAAe;QAE1C5E,UAAU,GAAG2E,aAAa;MAC5B;MAGA,IAAME,eAAe,GAAG7E,UAAU,CAACW,GAAG,CAAC,UAACmE,SAAyB;QAAA,OAAM;UACrEC,SAAS,EAAElC,OAAO,CAACxE,EAAE;UACrB8C,WAAW,EAAE2D,SAAS,CAACzG,EAAE;UACzB2G,SAAS,EAAE,KAAK;UAChBtC,UAAU,EAAE,IAAIR,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpCK,UAAU,EAAEN,cAAc;UAC1BO,QAAQ,EAAEL;QACZ,CAAC;MAAA,CAAC,CAAC;MAEHzD,OAAO,CAACkD,GAAG,CAAC,+BAA+B,EAAE6C,eAAe,CAAC;MAE7D,IAAAI,uBAAA,SAAmC/H,QAAQ,CACxCU,IAAI,CAAC,mBAAmB,CAAC,CACzBW,MAAM,CAACsG,eAAe,CAAC;QAFXK,SAAS,GAAAD,uBAAA,CAAhB9G,KAAK;MAIb,IAAI+G,SAAS,EAAE;QACbpG,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAE+G,SAAS,CAAC;QACtD,MAAMA,SAAS;MACjB;MAGA,IAAAC,uBAAA,SAA4DjI,QAAQ,CACjEU,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,WAAW,EAAE+E,OAAO,CAACxE,EAAE,CAAC,CAC3B+G,KAAK,CAAC,YAAY,EAAE;UAAEC,SAAS,EAAE;QAAK,CAAC,CAAC;QAd7BC,eAAe,GAAAH,uBAAA,CAArBlH,IAAI;QAA0BsH,WAAW,GAAAJ,uBAAA,CAAlBhH,KAAK;MAgBpC,IAAIoH,WAAW,EAAE;QACfzG,OAAO,CAACX,KAAK,CAAC,qCAAqC,EAAEoH,WAAW,CAAC;QACjE,MAAMA,WAAW;MACnB;MAEA,IAAI,CAACD,eAAe,IAAIA,eAAe,CAACrF,MAAM,KAAK,CAAC,EAAE;QACpD,MAAM,IAAIyD,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA5E,OAAO,CAACkD,GAAG,CAAC,+BAA+B,EAAEsD,eAAe,CAAC;MAE7D,OAAO;QACLP,SAAS,EAAElC,OAAO,CAACxE,EAAE;QACrB2B,UAAU,EAAEsF;MACd,CAAC;IACH,CAAC,CAAC,OAAOnH,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBA5LYuD,eAAeA,CAAA8D,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAlE,KAAA,CAAA3C,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4L3B;AAED,eAAeyC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
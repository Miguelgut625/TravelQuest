{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nvar generateMission = function () {\n  var _ref = _asyncToGenerator(function* (city, duration, missionCount) {\n    var response = yield fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer YOUR_OPENAI_API_KEY\"\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: \"Genera \" + missionCount + \" misiones en \" + city + \" que se puedan completar en \" + duration + \" d\\xEDas. Haz que la dificultad sea F\\xE1cil, Media o Dif\\xEDcil.\"\n        }]\n      })\n    });\n    var data = yield response.json();\n    var missions = data.choices.map(function (choice) {\n      var title = choice.message.content;\n      var description = \"Descripci\\xF3n de la misi\\xF3n en \" + city + \".\";\n      var difficulty = ['Fácil', 'Media', 'Difícil'][Math.floor(Math.random() * 3)];\n      var points = difficulty === 'Fácil' ? 25 : difficulty === 'Media' ? 50 : 100;\n      return {\n        title: title,\n        description: description,\n        city: city,\n        duration: duration,\n        difficulty: difficulty,\n        points: points,\n        completed: false\n      };\n    });\n    var _yield$supabase$from$ = yield supabase.from('missions').insert(missions),\n      error = _yield$supabase$from$.error;\n    if (error) {\n      console.error('Error saving missions:', error);\n    } else {\n      console.log('Misiones guardadas exitosamente');\n    }\n  });\n  return function generateMission(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default generateMission;","map":{"version":3,"names":["supabase","generateMission","_ref","_asyncToGenerator","city","duration","missionCount","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","missions","choices","map","choice","title","message","description","difficulty","Math","floor","random","points","completed","_yield$supabase$from$","from","insert","error","console","log","_x","_x2","_x3","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/missionGenerator.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nconst generateMission = async (city: string, duration: number, missionCount: number) => {\r\n  // Lógica para llamar a la API de ChatGPT y generar el título y la descripción\r\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer YOUR_OPENAI_API_KEY`, // Reemplaza con tu clave de API\r\n    },\r\n    body: JSON.stringify({\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: `Genera ${missionCount} misiones en ${city} que se puedan completar en ${duration} días. Haz que la dificultad sea Fácil, Media o Difícil.`\r\n        }\r\n      ],\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  // Asegúrate de que la respuesta tenga el formato esperado\r\n  const missions = data.choices.map((choice: any) => {\r\n    const title = choice.message.content; // Ajusta según la respuesta de la API\r\n    const description = `Descripción de la misión en ${city}.`; // Ajusta según la respuesta de la API\r\n\r\n    // Determinar la dificultad y los puntos\r\n    const difficulty = ['Fácil', 'Media', 'Difícil'][Math.floor(Math.random() * 3)];\r\n    const points = difficulty === 'Fácil' ? 25 : difficulty === 'Media' ? 50 : 100;\r\n\r\n    return {\r\n      title,\r\n      description,\r\n      city,\r\n      duration,\r\n      difficulty,\r\n      points,\r\n      completed: false,\r\n    };\r\n  });\r\n\r\n  // Guardar las misiones en Supabase\r\n  const { error } = await supabase\r\n    .from('missions')\r\n    .insert(missions);\r\n\r\n  if (error) {\r\n    console.error('Error saving missions:', error);\r\n  } else {\r\n    console.log('Misiones guardadas exitosamente');\r\n  }\r\n};\r\n\r\nexport default generateMission;\r\n"],"mappings":";AAAA,SAASA,QAAQ;AAEjB,IAAMC,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAY,EAAEC,QAAgB,EAAEC,YAAoB,EAAK;IAEtF,IAAMC,QAAQ,SAASC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,MAAM;UACZC,OAAO,cAAYX,YAAY,qBAAgBF,IAAI,oCAA+BC,QAAQ;QAC5F,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;IAEF,IAAMa,IAAI,SAASX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAGlC,IAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAC,UAACC,MAAW,EAAK;MACjD,IAAMC,KAAK,GAAGD,MAAM,CAACE,OAAO,CAACR,OAAO;MACpC,IAAMS,WAAW,0CAAkCtB,IAAI,MAAG;MAG1D,IAAMuB,UAAU,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC/E,IAAMC,MAAM,GAAGJ,UAAU,KAAK,OAAO,GAAG,EAAE,GAAGA,UAAU,KAAK,OAAO,GAAG,EAAE,GAAG,GAAG;MAE9E,OAAO;QACLH,KAAK,EAALA,KAAK;QACLE,WAAW,EAAXA,WAAW;QACXtB,IAAI,EAAJA,IAAI;QACJC,QAAQ,EAARA,QAAQ;QACRsB,UAAU,EAAVA,UAAU;QACVI,MAAM,EAANA,MAAM;QACNC,SAAS,EAAE;MACb,CAAC;IACH,CAAC,CAAC;IAGF,IAAAC,qBAAA,SAAwBjC,QAAQ,CAC7BkC,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAACf,QAAQ,CAAC;MAFXgB,KAAK,GAAAH,qBAAA,CAALG,KAAK;IAIb,IAAIA,KAAK,EAAE;MACTC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD;EACF,CAAC;EAAA,gBAnDKrC,eAAeA,CAAAsC,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAvC,IAAA,CAAAwC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAmDpB;AAED,eAAe1C,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\TravelQuest\\\\src\\\\screens\\\\auth\\\\ResetPasswordScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { supabase } from \"../../services/supabase\";\nimport { useDispatch } from 'react-redux';\nimport { setUser, setToken, setAuthState } from \"../../features/authSlice\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useRoute } from '@react-navigation/native';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ResetPasswordScreen = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const route = useRoute();\n  useEffect(() => {\n    const checkSession = async () => {\n      console.log('Verificando sesión en ResetPasswordScreen...');\n      const url = await Linking.getInitialURL();\n      console.log('URL actual:', url);\n      if (url?.includes('type=recovery')) {\n        console.log('Enlace de recuperación detectado');\n        const accessToken = url.split('access_token=')[1]?.split('&')[0];\n        const refreshToken = url.split('refresh_token=')[1]?.split('&')[0];\n        if (accessToken) {\n          const {\n            error\n          } = await supabase.auth.setSession({\n            access_token: accessToken,\n            refresh_token: refreshToken\n          });\n          if (error) {\n            console.error('Error al establecer la sesión:', error);\n            Alert.alert('Error', 'No se pudo establecer la sesión con el token de recuperación.');\n            return;\n          }\n          console.log('Sesión establecida con el token de recuperación.');\n          return;\n        }\n      }\n      const {\n        data: {\n          session\n        },\n        error\n      } = await supabase.auth.getSession();\n      if (error) {\n        console.error('Error al verificar sesión:', error);\n        Alert.alert('Error', 'No se pudo verificar la sesión');\n        return;\n      }\n      if (!session) {\n        console.log('No hay sesión activa ni enlace de recuperación');\n        Alert.alert('Error', 'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.', [{\n          text: 'OK',\n          onPress: () => navigation.replace('Login')\n        }]);\n      }\n    };\n    checkSession();\n  }, []);\n  const handleResetPassword = async () => {\n    console.log('handleResetPassword llamado');\n    console.log('Nueva contraseña:', newPassword);\n    console.log('Confirmar contraseña:', confirmPassword);\n    if (!newPassword || !confirmPassword) {\n      console.log('Error: Campos vacíos');\n      Alert.alert('Error', 'Por favor, completa todos los campos');\n      return;\n    }\n    if (newPassword.length < 6) {\n      console.log('Error: Contraseña demasiado corta');\n      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      console.log('Error: Las contraseñas no coinciden');\n      Alert.alert('Error', 'Las contraseñas no coinciden');\n      return;\n    }\n    setLoading(true);\n    console.log('Iniciando actualización de contraseña...');\n    try {\n      const {\n        data: {\n          session\n        },\n        error: sessionError\n      } = await supabase.auth.getSession();\n      if (sessionError) {\n        console.error('Error al obtener sesión:', sessionError);\n        Alert.alert('Error', 'No se pudo obtener la sesión actual');\n        return;\n      }\n      if (!session) {\n        console.error('No hay sesión activa');\n        Alert.alert('Error', 'No hay una sesión activa. Por favor, solicita un nuevo enlace.');\n        return;\n      }\n      console.log('Actualizando contraseña para usuario:', session.user.email);\n      const {\n        error: updateError\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (updateError) {\n        console.error('Error al actualizar contraseña:', updateError);\n        Alert.alert('Error', updateError.message);\n        return;\n      }\n      console.log('Contraseña actualizada exitosamente');\n      const {\n        data: {\n          session: updatedSession\n        },\n        error: updatedSessionError\n      } = await supabase.auth.getSession();\n      if (updatedSessionError) {\n        console.error('Error al obtener sesión actualizada:', updatedSessionError);\n        Alert.alert('Error', 'No se pudo obtener la sesión actualizada');\n        return;\n      }\n      if (updatedSession?.user) {\n        console.log('Configurando usuario en Redux...');\n        dispatch(setUser({\n          id: updatedSession.user.id,\n          email: updatedSession.user.email,\n          username: updatedSession.user.user_metadata.username || updatedSession.user.email.split('@')[0]\n        }));\n        dispatch(setToken(updatedSession.access_token));\n        dispatch(setAuthState('authenticated'));\n        Alert.alert('Éxito', 'Contraseña actualizada correctamente', [{\n          text: 'OK',\n          onPress: () => {\n            console.log('Navegando a la pantalla principal...');\n            navigation.replace('Main');\n          }\n        }]);\n      }\n    } catch (error) {\n      console.error('Error en handleResetPassword:', error);\n      Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCancel = () => {\n    console.log('Cancelando recuperación de contraseña...');\n    dispatch(setAuthState('unauthenticated'));\n    navigation.replace('Login');\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Recuperar Contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      style: styles.subtitle,\n      children: \"Por favor, ingresa tu nueva contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Nueva contrase\\xF1a\",\n      value: newPassword,\n      onChangeText: setNewPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirmar contrase\\xF1a\",\n      value: confirmPassword,\n      onChangeText: setConfirmPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: [styles.button, loading && styles.buttonDisabled],\n      onPress: handleResetPassword,\n      disabled: loading,\n      children: loading ? _jsxDEV(ActivityIndicator, {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this) : _jsxDEV(Text, {\n        style: styles.buttonText,\n        children: \"Actualizar Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: styles.cancelButton,\n      onPress: handleCancel,\n      children: _jsxDEV(Text, {\n        style: styles.cancelButtonText,\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    textAlign: 'center',\n    color: '#333'\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    padding: 15,\n    borderRadius: 10,\n    marginBottom: 15,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 10\n  },\n  buttonDisabled: {\n    backgroundColor: '#cccccc'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cancelButton: {\n    marginTop: 20,\n    alignItems: 'center'\n  },\n  cancelButtonText: {\n    color: '#666',\n    fontSize: 16\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","ActivityIndicator","supabase","useDispatch","setUser","setToken","setAuthState","useNavigation","useRoute","Linking","jsxDEV","_jsxDEV","ResetPasswordScreen","newPassword","setNewPassword","confirmPassword","setConfirmPassword","loading","setLoading","dispatch","navigation","route","checkSession","console","log","url","getInitialURL","includes","accessToken","split","refreshToken","error","auth","setSession","access_token","refresh_token","alert","data","session","getSession","text","onPress","replace","handleResetPassword","length","sessionError","user","email","updateError","updateUser","password","message","updatedSession","updatedSessionError","id","username","user_metadata","handleCancel","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","subtitle","input","placeholder","value","onChangeText","secureTextEntry","autoCapitalize","button","buttonDisabled","disabled","color","buttonText","cancelButton","cancelButtonText","create","flex","padding","justifyContent","backgroundColor","fontSize","fontWeight","marginBottom","textAlign","borderRadius","borderWidth","borderColor","alignItems","marginTop"],"sources":["C:/Users/PC/TravelQuest/src/screens/auth/ResetPasswordScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Alert,\r\n  ActivityIndicator,\r\n} from 'react-native';\r\nimport { supabase } from '../../services/supabase';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser, setToken, setAuthState } from '../../features/authSlice';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { RootStackParamList } from '../../navigation/types';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport { Linking } from 'react-native';\r\n\r\ntype ResetPasswordScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'ResetPassword'>;\r\n\r\nexport const ResetPasswordScreen = () => {\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigation<ResetPasswordScreenNavigationProp>();\r\n  const route = useRoute();\r\n\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      console.log('Verificando sesión en ResetPasswordScreen...');\r\n\r\n      // Obtener la URL actual\r\n      const url = await Linking.getInitialURL();\r\n      console.log('URL actual:', url);\r\n\r\n      if (url?.includes('type=recovery')) {\r\n        console.log('Enlace de recuperación detectado');\r\n        const accessToken = url.split('access_token=')[1]?.split('&')[0]; // Extraer el access_token de la URL\r\n        const refreshToken = url.split('refresh_token=')[1]?.split('&')[0]; // Extraer el refresh_token si está presente\r\n        if (accessToken) {\r\n          const { error } = await supabase.auth.setSession({\r\n            access_token: accessToken,\r\n            refresh_token: refreshToken, // Asegúrate de pasar el refresh token\r\n          });\r\n          if (error) {\r\n            console.error('Error al establecer la sesión:', error);\r\n            Alert.alert('Error', 'No se pudo establecer la sesión con el token de recuperación.');\r\n            return;\r\n          }\r\n          console.log('Sesión establecida con el token de recuperación.');\r\n          return; // Permitir continuar con el proceso de recuperación\r\n        }\r\n      }\r\n\r\n      const { data: { session }, error } = await supabase.auth.getSession();\r\n\r\n      if (error) {\r\n        console.error('Error al verificar sesión:', error);\r\n        Alert.alert('Error', 'No se pudo verificar la sesión');\r\n        return;\r\n      }\r\n\r\n      if (!session) {\r\n        console.log('No hay sesión activa ni enlace de recuperación');\r\n        Alert.alert(\r\n          'Error',\r\n          'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.',\r\n          [{ text: 'OK', onPress: () => navigation.replace('Login') }]\r\n        );\r\n      }\r\n    };\r\n\r\n    checkSession();\r\n  }, []);\r\n\r\n  const handleResetPassword = async () => {\r\n    console.log('handleResetPassword llamado');\r\n    console.log('Nueva contraseña:', newPassword);\r\n    console.log('Confirmar contraseña:', confirmPassword);\r\n\r\n    if (!newPassword || !confirmPassword) {\r\n      console.log('Error: Campos vacíos');\r\n      Alert.alert('Error', 'Por favor, completa todos los campos');\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      console.log('Error: Contraseña demasiado corta');\r\n      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\r\n      return;\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      console.log('Error: Las contraseñas no coinciden');\r\n      Alert.alert('Error', 'Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    console.log('Iniciando actualización de contraseña...');\r\n\r\n    try {\r\n      // Primero verificar la sesión actual\r\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n      if (sessionError) {\r\n        console.error('Error al obtener sesión:', sessionError);\r\n        Alert.alert('Error', 'No se pudo obtener la sesión actual');\r\n        return;\r\n      }\r\n\r\n      if (!session) {\r\n        console.error('No hay sesión activa');\r\n        Alert.alert('Error', 'No hay una sesión activa. Por favor, solicita un nuevo enlace.');\r\n        return;\r\n      }\r\n\r\n      console.log('Actualizando contraseña para usuario:', session.user.email);\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        password: newPassword\r\n      });\r\n\r\n      if (updateError) {\r\n        console.error('Error al actualizar contraseña:', updateError);\r\n        Alert.alert('Error', updateError.message);\r\n        return;\r\n      }\r\n\r\n      console.log('Contraseña actualizada exitosamente');\r\n\r\n      // Obtener la sesión actualizada\r\n      const { data: { session: updatedSession }, error: updatedSessionError } = await supabase.auth.getSession();\r\n\r\n      if (updatedSessionError) {\r\n        console.error('Error al obtener sesión actualizada:', updatedSessionError);\r\n        Alert.alert('Error', 'No se pudo obtener la sesión actualizada');\r\n        return;\r\n      }\r\n\r\n      if (updatedSession?.user) {\r\n        console.log('Configurando usuario en Redux...');\r\n        dispatch(setUser({\r\n          id: updatedSession.user.id,\r\n          email: updatedSession.user.email!,\r\n          username: updatedSession.user.user_metadata.username || updatedSession.user.email!.split('@')[0],\r\n        }));\r\n        dispatch(setToken(updatedSession.access_token));\r\n        dispatch(setAuthState('authenticated'));\r\n\r\n        Alert.alert(\r\n          'Éxito',\r\n          'Contraseña actualizada correctamente',\r\n          [\r\n            {\r\n              text: 'OK',\r\n              onPress: () => {\r\n                console.log('Navegando a la pantalla principal...');\r\n                navigation.replace('Main');\r\n              }\r\n            }\r\n          ]\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en handleResetPassword:', error);\r\n      Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    console.log('Cancelando recuperación de contraseña...');\r\n    dispatch(setAuthState('unauthenticated'));\r\n    navigation.replace('Login');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Recuperar Contraseña</Text>\r\n      <Text style={styles.subtitle}>\r\n        Por favor, ingresa tu nueva contraseña\r\n      </Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Nueva contraseña\"\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Confirmar contraseña\"\r\n        value={confirmPassword}\r\n        onChangeText={setConfirmPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={[styles.button, loading && styles.buttonDisabled]}\r\n        onPress={handleResetPassword}\r\n        disabled={loading}\r\n      >\r\n        {loading ? (\r\n          <ActivityIndicator color=\"white\" />\r\n        ) : (\r\n          <Text style={styles.buttonText}>Actualizar Contraseña</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n\r\n      <TouchableOpacity\r\n        style={styles.cancelButton}\r\n        onPress={handleCancel}\r\n      >\r\n        <Text style={styles.cancelButtonText}>Cancelar</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n    color: '#333',\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    color: '#666',\r\n    marginBottom: 20,\r\n    textAlign: 'center',\r\n  },\r\n  input: {\r\n    backgroundColor: 'white',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    marginBottom: 15,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n  },\r\n  button: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n  },\r\n  buttonDisabled: {\r\n    backgroundColor: '#cccccc',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  cancelButton: {\r\n    marginTop: 20,\r\n    alignItems: 'center',\r\n  },\r\n  cancelButtonText: {\r\n    color: '#666',\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default ResetPasswordScreen;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
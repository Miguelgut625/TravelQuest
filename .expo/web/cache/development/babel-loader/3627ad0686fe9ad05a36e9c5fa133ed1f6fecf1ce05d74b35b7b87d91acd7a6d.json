{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { supabase } from \"./supabase\";\nexport var getUserJournalEntries = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('journal_entries').select(`\n        *,\n        cities:cityId (\n          name\n        )\n      `).eq('userId', userId).order('created_at', {\n          ascending: false\n        }),\n        data = _yield$supabase$from$.data,\n        error = _yield$supabase$from$.error;\n      if (error) throw error;\n      var entriesByCity = {};\n      if (data) {\n        data.forEach(function (entry) {\n          var _entry$cities;\n          var cityName = ((_entry$cities = entry.cities) == null ? void 0 : _entry$cities.name) || 'Ciudad Desconocida';\n          if (!entriesByCity[cityName]) {\n            entriesByCity[cityName] = [];\n          }\n          entriesByCity[cityName].push(_objectSpread(_objectSpread({}, entry), {}, {\n            city_name: cityName\n          }));\n        });\n      }\n      return entriesByCity;\n    } catch (error) {\n      console.error('Error obteniendo entradas del diario:', error);\n      throw error;\n    }\n  });\n  return function getUserJournalEntries(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getMissionJournalEntries = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, missionId) {\n    try {\n      var _yield$supabase$from$2 = yield supabase.from('journal_entries').select(`\n        *,\n        cities:cityId (\n          name\n        )\n      `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n          ascending: false\n        }),\n        data = _yield$supabase$from$2.data,\n        error = _yield$supabase$from$2.error;\n      if (error) throw error;\n      if (!data) return [];\n      return data.map(function (entry) {\n        var _entry$cities2;\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          city_name: ((_entry$cities2 = entry.cities) == null ? void 0 : _entry$cities2.name) || 'Ciudad Desconocida'\n        });\n      });\n    } catch (error) {\n      console.error('Error obteniendo entradas de la misión:', error);\n      throw error;\n    }\n  });\n  return function getMissionJournalEntries(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","getUserJournalEntries","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","order","ascending","data","error","entriesByCity","forEach","entry","_entry$cities","cityName","cities","name","push","_objectSpread","city_name","console","_x","apply","arguments","getMissionJournalEntries","_ref2","missionId","_yield$supabase$from$2","map","_entry$cities2","_x2","_x3"],"sources":["C:/Users/migue/TravelQuest/src/services/journalService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport interface JournalEntryDB {\r\n  id: string;\r\n  userId: string;\r\n  cityId: string;\r\n  missionId?: string;\r\n  title: string;\r\n  content: string;\r\n  photos: string[];\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n  } | null;\r\n  created_at: string;\r\n  tags: string[];\r\n}\r\n\r\nexport interface CityJournalEntry extends JournalEntryDB {\r\n  city_name: string;\r\n}\r\n\r\n/**\r\n * Obtiene todas las entradas del diario del usuario agrupadas por ciudad\r\n * @param userId ID del usuario \r\n * @returns Entradas del diario agrupadas por ciudad\r\n */\r\nexport const getUserJournalEntries = async (userId: string): Promise<{ [cityName: string]: CityJournalEntry[] }> => {\r\n  try {\r\n    // Obtener todas las entradas del diario del usuario con el nombre de la ciudad\r\n    const { data, error } = await supabase\r\n      .from('journal_entries')\r\n      .select(`\r\n        *,\r\n        cities:cityId (\r\n          name\r\n        )\r\n      `)\r\n      .eq('userId', userId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n\r\n    // Organizar las entradas por ciudad\r\n    const entriesByCity: { [cityName: string]: CityJournalEntry[] } = {};\r\n    \r\n    if (data) {\r\n      data.forEach((entry: any) => {\r\n        const cityName = entry.cities?.name || 'Ciudad Desconocida';\r\n        \r\n        if (!entriesByCity[cityName]) {\r\n          entriesByCity[cityName] = [];\r\n        }\r\n        \r\n        entriesByCity[cityName].push({\r\n          ...entry,\r\n          city_name: cityName\r\n        });\r\n      });\r\n    }\r\n\r\n    return entriesByCity;\r\n  } catch (error) {\r\n    console.error('Error obteniendo entradas del diario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene las entradas del diario relacionadas con una misión específica\r\n * @param userId ID del usuario\r\n * @param missionId ID de la misión\r\n * @returns Entradas del diario relacionadas con la misión\r\n */\r\nexport const getMissionJournalEntries = async (userId: string, missionId: string): Promise<CityJournalEntry[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('journal_entries')\r\n      .select(`\r\n        *,\r\n        cities:cityId (\r\n          name\r\n        )\r\n      `)\r\n      .eq('userId', userId)\r\n      .eq('missionId', missionId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n\r\n    if (!data) return [];\r\n    \r\n    return data.map((entry: any) => ({\r\n      ...entry,\r\n      city_name: entry.cities?.name || 'Ciudad Desconocida'\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error obteniendo entradas de la misión:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":";;;;AAAA,SAASA,QAAQ;AA2BjB,OAAO,IAAMC,qBAAqB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAc,EAA0D;IAClH,IAAI;MAEF,IAAAC,qBAAA,SAA8BL,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,QAAQ,EAAEJ,MAAM,CAAC,CACpBK,KAAK,CAAC,YAAY,EAAE;UAAEC,SAAS,EAAE;QAAM,CAAC,CAAC;QATpCC,IAAI,GAAAN,qBAAA,CAAJM,IAAI;QAAEC,KAAK,GAAAP,qBAAA,CAALO,KAAK;MAWnB,IAAIA,KAAK,EAAE,MAAMA,KAAK;MAGtB,IAAMC,aAAyD,GAAG,CAAC,CAAC;MAEpE,IAAIF,IAAI,EAAE;QACRA,IAAI,CAACG,OAAO,CAAC,UAACC,KAAU,EAAK;UAAA,IAAAC,aAAA;UAC3B,IAAMC,QAAQ,GAAG,EAAAD,aAAA,GAAAD,KAAK,CAACG,MAAM,qBAAZF,aAAA,CAAcG,IAAI,KAAI,oBAAoB;UAE3D,IAAI,CAACN,aAAa,CAACI,QAAQ,CAAC,EAAE;YAC5BJ,aAAa,CAACI,QAAQ,CAAC,GAAG,EAAE;UAC9B;UAEAJ,aAAa,CAACI,QAAQ,CAAC,CAACG,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACvBN,KAAK;YACRO,SAAS,EAAEL;UAAQ,EACpB,CAAC;QACJ,CAAC,CAAC;MACJ;MAEA,OAAOJ,aAAa;IACtB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAvCYX,qBAAqBA,CAAAuB,EAAA;IAAA,OAAAtB,IAAA,CAAAuB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAuCjC;AAQD,OAAO,IAAMC,wBAAwB;EAAA,IAAAC,KAAA,GAAAzB,iBAAA,CAAG,WAAOC,MAAc,EAAEyB,SAAiB,EAAkC;IAChH,IAAI;MACF,IAAAC,sBAAA,SAA8B9B,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,QAAQ,EAAEJ,MAAM,CAAC,CACpBI,EAAE,CAAC,WAAW,EAAEqB,SAAS,CAAC,CAC1BpB,KAAK,CAAC,YAAY,EAAE;UAAEC,SAAS,EAAE;QAAM,CAAC,CAAC;QAVpCC,IAAI,GAAAmB,sBAAA,CAAJnB,IAAI;QAAEC,KAAK,GAAAkB,sBAAA,CAALlB,KAAK;MAYnB,IAAIA,KAAK,EAAE,MAAMA,KAAK;MAEtB,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;MAEpB,OAAOA,IAAI,CAACoB,GAAG,CAAC,UAAChB,KAAU;QAAA,IAAAiB,cAAA;QAAA,OAAAX,aAAA,CAAAA,aAAA,KACtBN,KAAK;UACRO,SAAS,EAAE,EAAAU,cAAA,GAAAjB,KAAK,CAACG,MAAM,qBAAZc,cAAA,CAAcb,IAAI,KAAI;QAAoB;MAAA,CACrD,CAAC;IACL,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBA1BYe,wBAAwBA,CAAAM,GAAA,EAAAC,GAAA;IAAA,OAAAN,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0BpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
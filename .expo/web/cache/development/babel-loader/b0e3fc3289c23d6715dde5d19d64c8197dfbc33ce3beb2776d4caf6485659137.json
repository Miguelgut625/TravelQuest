{"ast":null,"code":"import { supabase } from './supabase';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NotificationService from './NotificationService';\nexport const removeFriend = async (userId, friendId) => {\n  try {\n    console.log('Iniciando eliminación de amigo:', {\n      userId,\n      friendId\n    });\n    const {\n      data: friendData,\n      error: friendError\n    } = await supabase.from('users').select('username').eq('id', friendId).single();\n    if (friendError) {\n      console.error('Error al obtener datos del amigo:', friendError);\n      throw friendError;\n    }\n    console.log('Datos del amigo obtenidos:', friendData);\n    let {\n      error\n    } = await supabase.from('friends').delete().eq('user1Id', userId).eq('user2Id', friendId);\n    if (error) {\n      console.log('Intentando eliminar relación inversa...');\n      const {\n        error: error2\n      } = await supabase.from('friends').delete().eq('user1Id', friendId).eq('user2Id', userId);\n      if (error2) {\n        console.error('Error al eliminar la relación de amistad:', error2);\n        throw error2;\n      }\n    }\n    console.log('Relación de amistad eliminada correctamente');\n    const notificationService = NotificationService.getInstance();\n    await notificationService.createNotification(friendId, 'Amistad eliminada', `Has sido eliminado/a de la lista de amigos`, 'friend_removed');\n    console.log('Notificación enviada al amigo eliminado');\n    Alert.alert('Éxito', `Amigo eliminado correctamente`);\n    return true;\n  } catch (err) {\n    console.error('Error completo al eliminar amigo:', err);\n    Alert.alert('Error', 'No se pudo eliminar el amigo');\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","Alert","NotificationService","removeFriend","userId","friendId","console","log","data","friendData","error","friendError","from","select","eq","single","delete","error2","notificationService","getInstance","createNotification","alert","err"],"sources":["C:/Users/PC/TravelQuest/src/services/friendService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { Alert } from 'react-native';\r\nimport NotificationService from './NotificationService';\r\n\r\ninterface Friend {\r\n    user2Id: string;\r\n    username: string;\r\n    points: number;\r\n}\r\n\r\nexport const removeFriend = async (\r\n    userId: string,\r\n    friendId: string\r\n): Promise<boolean> => {\r\n    try {\r\n        console.log('Iniciando eliminación de amigo:', { userId, friendId });\r\n\r\n        // Obtener el nombre del amigo que se va a eliminar\r\n        const { data: friendData, error: friendError } = await supabase\r\n            .from('users')\r\n            .select('username')\r\n            .eq('id', friendId)\r\n            .single();\r\n\r\n        if (friendError) {\r\n            console.error('Error al obtener datos del amigo:', friendError);\r\n            throw friendError;\r\n        }\r\n\r\n        console.log('Datos del amigo obtenidos:', friendData);\r\n\r\n        // Intentar eliminar la relación donde el usuario actual es user1Id\r\n        let { error } = await supabase\r\n            .from('friends')\r\n            .delete()\r\n            .eq('user1Id', userId)\r\n            .eq('user2Id', friendId);\r\n\r\n        // Si no se encontró esa relación, intentar donde el usuario actual es user2Id\r\n        if (error) {\r\n            console.log('Intentando eliminar relación inversa...');\r\n            const { error: error2 } = await supabase\r\n                .from('friends')\r\n                .delete()\r\n                .eq('user1Id', friendId)\r\n                .eq('user2Id', userId);\r\n\r\n            if (error2) {\r\n                console.error('Error al eliminar la relación de amistad:', error2);\r\n                throw error2;\r\n            }\r\n        }\r\n\r\n        console.log('Relación de amistad eliminada correctamente');\r\n\r\n        // Enviar notificación al amigo eliminado\r\n        const notificationService = NotificationService.getInstance();\r\n        await notificationService.createNotification(\r\n            friendId,\r\n            'Amistad eliminada',\r\n            `Has sido eliminado/a de la lista de amigos`,\r\n            'friend_removed'\r\n        );\r\n\r\n        console.log('Notificación enviada al amigo eliminado');\r\n        Alert.alert('Éxito', `Amigo eliminado correctamente`);\r\n        return true;\r\n    } catch (err) {\r\n        console.error('Error completo al eliminar amigo:', err);\r\n        Alert.alert('Error', 'No se pudo eliminar el amigo');\r\n        return false;\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAAC,OAAAC,KAAA;AAEtC,OAAOC,mBAAmB,MAAM,uBAAuB;AAQvD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CACxBC,MAAc,EACdC,QAAgB,KACG;EACnB,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE;MAAEH,MAAM;MAAEC;IAAS,CAAC,CAAC;IAGpE,MAAM;MAAEG,IAAI,EAAEC,UAAU;MAAEC,KAAK,EAAEC;IAAY,CAAC,GAAG,MAAMX,QAAQ,CAC1DY,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,IAAI,EAAET,QAAQ,CAAC,CAClBU,MAAM,CAAC,CAAC;IAEb,IAAIJ,WAAW,EAAE;MACbL,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEC,WAAW,CAAC;MAC/D,MAAMA,WAAW;IACrB;IAEAL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,UAAU,CAAC;IAGrD,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMV,QAAQ,CACzBY,IAAI,CAAC,SAAS,CAAC,CACfI,MAAM,CAAC,CAAC,CACRF,EAAE,CAAC,SAAS,EAAEV,MAAM,CAAC,CACrBU,EAAE,CAAC,SAAS,EAAET,QAAQ,CAAC;IAG5B,IAAIK,KAAK,EAAE;MACPJ,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,MAAM;QAAEG,KAAK,EAAEO;MAAO,CAAC,GAAG,MAAMjB,QAAQ,CACnCY,IAAI,CAAC,SAAS,CAAC,CACfI,MAAM,CAAC,CAAC,CACRF,EAAE,CAAC,SAAS,EAAET,QAAQ,CAAC,CACvBS,EAAE,CAAC,SAAS,EAAEV,MAAM,CAAC;MAE1B,IAAIa,MAAM,EAAE;QACRX,OAAO,CAACI,KAAK,CAAC,2CAA2C,EAAEO,MAAM,CAAC;QAClE,MAAMA,MAAM;MAChB;IACJ;IAEAX,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAG1D,MAAMW,mBAAmB,GAAGhB,mBAAmB,CAACiB,WAAW,CAAC,CAAC;IAC7D,MAAMD,mBAAmB,CAACE,kBAAkB,CACxCf,QAAQ,EACR,mBAAmB,EACnB,4CAA4C,EAC5C,gBACJ,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDN,KAAK,CAACoB,KAAK,CAAC,OAAO,EAAE,+BAA+B,CAAC;IACrD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVhB,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEY,GAAG,CAAC;IACvDrB,KAAK,CAACoB,KAAK,CAAC,OAAO,EAAE,8BAA8B,CAAC;IACpD,OAAO,KAAK;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
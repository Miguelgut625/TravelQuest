{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nimport { createJournalEntry } from \"./journalService\";\nexport var getUserPoints = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('users').select('points').eq('id', userId).maybeSingle(),\n        data = _yield$supabase$from$.data,\n        error = _yield$supabase$from$.error;\n      if (error) throw error;\n      return (data == null ? void 0 : data.points) || 0;\n    } catch (error) {\n      console.error('Error obteniendo puntos del usuario:', error);\n      return 0;\n    }\n  });\n  return function getUserPoints(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addPointsToUser = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, points) {\n    try {\n      var currentPoints = yield getUserPoints(userId);\n      var _yield$supabase$from$2 = yield supabase.from('users').update({\n          points: currentPoints + points,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId),\n        error = _yield$supabase$from$2.error;\n      if (error) throw error;\n      return currentPoints + points;\n    } catch (error) {\n      console.error('Error añadiendo puntos al usuario:', error);\n      throw error;\n    }\n  });\n  return function addPointsToUser(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var completeMission = function () {\n  var _ref3 = _asyncToGenerator(function* (missionId, userId, imageUrl) {\n    console.log('Iniciando completeMission con parámetros:', {\n      missionId: missionId,\n      userId: userId,\n      imageUrl: imageUrl\n    });\n    try {\n      if (!missionId || !userId) {\n        console.error('Parámetros inválidos:', {\n          missionId: missionId,\n          userId: userId\n        });\n        throw new Error('Parámetros inválidos para completar misión');\n      }\n      console.log('Obteniendo datos de la misión...');\n      var _yield$supabase$from$3 = yield supabase.from('journeys_missions').select(`\n                id,\n                journeyId,\n                challengeId,\n                completed,\n                challenges (\n                    id,\n                    title,\n                    points\n                )\n            `).eq('id', missionId).single(),\n        missionData = _yield$supabase$from$3.data,\n        missionError = _yield$supabase$from$3.error;\n      if (missionError || !missionData) {\n        console.error('Error al obtener datos de la misión:', missionError);\n        throw missionError || new Error('No se encontró la misión');\n      }\n      console.log('Datos de misión obtenidos:', missionData);\n      if (missionData.completed) {\n        console.warn('La misión ya está completada');\n        return missionData.challenges.points;\n      }\n      console.log('Marcando misión como completada...');\n      var updateData = {\n        completed: true,\n        completed_at: new Date().toISOString()\n      };\n      if (imageUrl) {\n        console.log('Añadiendo URL de imagen:', imageUrl);\n        try {\n          updateData.photo_url = imageUrl;\n          var _yield$supabase$from$4 = yield supabase.from('journeys_missions').update(updateData).eq('id', missionId),\n            error = _yield$supabase$from$4.error;\n          if (error) {\n            console.warn('Error con photo_url, intentando con picture_url:', error.message);\n            delete updateData.photo_url;\n            updateData.picture_url = imageUrl;\n            var _yield$supabase$from$5 = yield supabase.from('journeys_missions').update(updateData).eq('id', missionId),\n              error2 = _yield$supabase$from$5.error;\n            if (error2) {\n              console.error('Error también con picture_url:', error2.message);\n              delete updateData.picture_url;\n              var _yield$supabase$from$6 = yield supabase.from('journeys_missions').update({\n                  completed: true,\n                  completed_at: new Date().toISOString()\n                }).eq('id', missionId),\n                error3 = _yield$supabase$from$6.error;\n              if (error3) throw error3;\n            }\n          }\n        } catch (error) {\n          console.warn('Error con las columnas de imagen pero continuando');\n        }\n      } else {\n        console.log('Actualizando sin imagen...');\n        var _yield$supabase$from$7 = yield supabase.from('journeys_missions').update({\n            completed: true,\n            completed_at: new Date().toISOString()\n          }).eq('id', missionId),\n          _error = _yield$supabase$from$7.error;\n        if (_error) throw _error;\n      }\n      var points = missionData.challenges.points;\n      console.log('Añadiendo puntos al usuario:', points);\n      yield addPointsToUser(userId, points);\n      if (imageUrl) {\n        try {\n          var _journeyData$cities;\n          console.log('Creando entrada en el diario...');\n          var _yield$supabase$from$8 = yield supabase.from('journeys').select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `).eq('id', missionData.journeyId).single(),\n            journeyData = _yield$supabase$from$8.data,\n            journeyError = _yield$supabase$from$8.error;\n          if (journeyError) {\n            console.warn('Error obteniendo datos de journey:', journeyError);\n            return points;\n          }\n          console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\n          yield createJournalEntry({\n            userId: userId,\n            cityId: journeyData.cityId,\n            missionId: missionId,\n            title: `Misión completada: ${missionData.challenges.title}`,\n            content: `He completado esta misión en ${((_journeyData$cities = journeyData.cities) == null ? void 0 : _journeyData$cities.name) || 'mi viaje'}.`,\n            photos: [imageUrl]\n          });\n          console.log('Entrada de diario creada exitosamente');\n        } catch (error) {\n          console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\n        }\n      }\n      console.log('Misión completada exitosamente, retornando puntos:', points);\n      return points;\n    } catch (error) {\n      console.error('Error en completeMission:', error);\n      throw error;\n    }\n  });\n  return function completeMission(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","createJournalEntry","getUserPoints","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","maybeSingle","data","error","points","console","_x","apply","arguments","addPointsToUser","_ref2","currentPoints","_yield$supabase$from$2","update","updated_at","Date","toISOString","_x2","_x3","completeMission","_ref3","missionId","imageUrl","log","Error","_yield$supabase$from$3","single","missionData","missionError","completed","warn","challenges","updateData","completed_at","photo_url","_yield$supabase$from$4","message","picture_url","_yield$supabase$from$5","error2","_yield$supabase$from$6","error3","_yield$supabase$from$7","_journeyData$cities","_yield$supabase$from$8","journeyId","journeyData","journeyError","cityId","title","content","cities","name","photos","_x4","_x5","_x6"],"sources":["C:/Users/migue/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { createJournalEntry } from './journalService';\n\nexport const getUserPoints = async (userId: string) => {\n    try {\n        const { data, error } = await supabase\n            .from('users')\n            .select('points')\n            .eq('id', userId)\n            .maybeSingle();\n\n        if (error) throw error;\n\n        return data?.points || 0;\n    } catch (error) {\n        console.error('Error obteniendo puntos del usuario:', error);\n        return 0; // Retornamos 0 en caso de error\n    }\n};\n\nexport const addPointsToUser = async (userId: string, points: number) => {\n    try {\n        // Primero obtenemos los puntos actuales\n        const currentPoints = await getUserPoints(userId);\n\n        // Actualizamos los puntos\n        const { error } = await supabase\n            .from('users')\n            .update({\n                points: currentPoints + points,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', userId);\n\n        if (error) throw error;\n\n        return currentPoints + points;\n    } catch (error) {\n        console.error('Error añadiendo puntos al usuario:', error);\n        throw error;\n    }\n};\n\nexport const completeMission = async (missionId: string, userId: string, imageUrl?: string) => {\n    console.log('Iniciando completeMission con parámetros:', { missionId, userId, imageUrl });\n    \n    try {\n        // Verificar que tenemos los datos necesarios\n        if (!missionId || !userId) {\n            console.error('Parámetros inválidos:', { missionId, userId });\n            throw new Error('Parámetros inválidos para completar misión');\n        }\n        \n        // Obtener datos de la misión para asignar puntos\n        console.log('Obteniendo datos de la misión...');\n        const { data: missionData, error: missionError } = await supabase\n            .from('journeys_missions')\n            .select(`\n                id,\n                journeyId,\n                challengeId,\n                completed,\n                challenges (\n                    id,\n                    title,\n                    points\n                )\n            `)\n            .eq('id', missionId)\n            .single();\n\n        if (missionError || !missionData) {\n            console.error('Error al obtener datos de la misión:', missionError);\n            throw missionError || new Error('No se encontró la misión');\n        }\n\n        console.log('Datos de misión obtenidos:', missionData);\n\n        // Verificar que la misión no esté ya completada\n        if (missionData.completed) {\n            console.warn('La misión ya está completada');\n            return missionData.challenges.points;\n        }\n\n        // Marcar la misión como completada\n        console.log('Marcando misión como completada...');\n        \n        // Preparar datos para la actualización\n        const updateData: any = {\n            completed: true,\n            completed_at: new Date().toISOString()\n        };\n        \n        // Añadir URL de imagen si existe\n        if (imageUrl) {\n            console.log('Añadiendo URL de imagen:', imageUrl);\n            // Intentar primero con photo_url que es el nombre de columna más probable\n            try {\n                updateData.photo_url = imageUrl;\n                const { error } = await supabase\n                    .from('journeys_missions')\n                    .update(updateData)\n                    .eq('id', missionId);\n                    \n                if (error) {\n                    console.warn('Error con photo_url, intentando con picture_url:', error.message);\n                    // Si falla, intentar con picture_url\n                    delete updateData.photo_url;\n                    updateData.picture_url = imageUrl;\n                    const { error: error2 } = await supabase\n                        .from('journeys_missions')\n                        .update(updateData)\n                        .eq('id', missionId);\n                    \n                    if (error2) {\n                        console.error('Error también con picture_url:', error2.message);\n                        // Si ambos fallan, actualizar sin la imagen\n                        delete updateData.picture_url;\n                        const { error: error3 } = await supabase\n                            .from('journeys_missions')\n                            .update({ completed: true, completed_at: new Date().toISOString() })\n                            .eq('id', missionId);\n                            \n                        if (error3) throw error3;\n                    }\n                }\n            } catch (error: any) {\n                console.warn('Error con las columnas de imagen pero continuando');\n            }\n        } else {\n            // Si no hay imagen, solo actualizar el estado completado\n            console.log('Actualizando sin imagen...');\n            const { error } = await supabase\n                .from('journeys_missions')\n                .update({ completed: true, completed_at: new Date().toISOString() })\n                .eq('id', missionId);\n                \n            if (error) throw error;\n        }\n        \n        // Añadir los puntos al usuario\n        const points = missionData.challenges.points;\n        console.log('Añadiendo puntos al usuario:', points);\n        await addPointsToUser(userId, points);\n        \n        // Si hay una imagen, intentamos agregar una entrada al diario\n        if (imageUrl) {\n            try {\n                console.log('Creando entrada en el diario...');\n                // Obtener información de la ciudad\n                const { data: journeyData, error: journeyError } = await supabase\n                    .from('journeys')\n                    .select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `)\n                    .eq('id', missionData.journeyId)\n                    .single();\n\n                if (journeyError) {\n                    console.warn('Error obteniendo datos de journey:', journeyError);\n                    return points; // Retornamos puntos y no creamos entrada en el diario\n                }\n                \n                // Crear entrada en el diario\n                console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\n                \n                await createJournalEntry({\n                    userId: userId,\n                    cityId: journeyData.cityId,\n                    missionId: missionId,\n                    title: `Misión completada: ${missionData.challenges.title}`,\n                    content: `He completado esta misión en ${journeyData.cities?.name || 'mi viaje'}.`,\n                    photos: [imageUrl]\n                });\n                \n                console.log('Entrada de diario creada exitosamente');\n            } catch (error) {\n                console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\n                // No lanzamos el error para no interrumpir el flujo\n            }\n        }\n\n        console.log('Misión completada exitosamente, retornando puntos:', points);\n        return points;\n    } catch (error) {\n        console.error('Error en completeMission:', error);\n        throw error;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
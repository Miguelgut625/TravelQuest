{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { supabase } from \"../../services/supabase\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ResetPasswordScreen = function ResetPasswordScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    newPassword = _useState2[0],\n    setNewPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmPassword = _useState4[0],\n    setConfirmPassword = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var navigation = useNavigation();\n  var handleResetPassword = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!newPassword || !confirmPassword) {\n        Alert.alert('Error', 'Por favor, completa todos los campos');\n        return;\n      }\n      if (newPassword !== confirmPassword) {\n        Alert.alert('Error', 'Las contraseñas no coinciden');\n        return;\n      }\n      if (newPassword.length < 6) {\n        Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\n        return;\n      }\n      setLoading(true);\n      try {\n        var _yield$supabase$auth$ = yield supabase.auth.getSession(),\n          session = _yield$supabase$auth$.data.session,\n          sessionError = _yield$supabase$auth$.error;\n        if (sessionError) {\n          Alert.alert('Error', 'Error al verificar la sesión');\n          return;\n        }\n        if (!session) {\n          Alert.alert('Error', 'Tu sesión ha expirado. Por favor, vuelve a iniciar sesión');\n          navigation.navigate('Login');\n          return;\n        }\n        var _yield$supabase$auth$2 = yield supabase.auth.updateUser({\n            password: newPassword\n          }),\n          error = _yield$supabase$auth$2.error;\n        if (error) {\n          Alert.alert('Error', error.message);\n          return;\n        }\n        Alert.alert('Éxito', 'Tu contraseña ha sido actualizada correctamente');\n        navigation.navigate('Login');\n      } catch (error) {\n        console.error('Error al cambiar contraseña:', error);\n        Alert.alert('Error', 'Ocurrió un error al cambiar la contraseña');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleResetPassword() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Cambiar Contrase\\xF1a\"\n    }), _jsx(Text, {\n      style: styles.subtitle,\n      children: \"Por favor, ingresa tu nueva contrase\\xF1a\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Nueva contrase\\xF1a\",\n      value: newPassword,\n      onChangeText: setNewPassword,\n      secureTextEntry: true\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirmar contrase\\xF1a\",\n      value: confirmPassword,\n      onChangeText: setConfirmPassword,\n      secureTextEntry: true\n    }), _jsx(TouchableOpacity, {\n      style: [styles.button, loading && styles.buttonDisabled],\n      onPress: handleResetPassword,\n      disabled: loading,\n      children: loading ? _jsx(ActivityIndicator, {\n        color: \"white\"\n      }) : _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Cambiar Contrase\\xF1a\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.cancelButton,\n      onPress: function onPress() {\n        return navigation.navigate('Login');\n      },\n      children: _jsx(Text, {\n        style: styles.cancelButtonText,\n        children: \"Cancelar\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    textAlign: 'center',\n    color: '#333'\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    padding: 15,\n    borderRadius: 10,\n    marginBottom: 15,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 10\n  },\n  buttonDisabled: {\n    backgroundColor: '#cccccc'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cancelButton: {\n    marginTop: 20,\n    alignItems: 'center'\n  },\n  cancelButtonText: {\n    color: '#666',\n    fontSize: 16\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","ActivityIndicator","supabase","useNavigation","jsx","_jsx","jsxs","_jsxs","ResetPasswordScreen","_useState","_useState2","_slicedToArray","newPassword","setNewPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","_useState5","_useState6","loading","setLoading","navigation","handleResetPassword","_ref","_asyncToGenerator","alert","length","_yield$supabase$auth$","auth","getSession","session","data","sessionError","error","navigate","_yield$supabase$auth$2","updateUser","password","message","console","apply","arguments","style","styles","container","children","title","subtitle","input","placeholder","value","onChangeText","secureTextEntry","button","buttonDisabled","onPress","disabled","color","buttonText","cancelButton","cancelButtonText","create","flex","padding","justifyContent","backgroundColor","fontSize","fontWeight","marginBottom","textAlign","borderRadius","borderWidth","borderColor","alignItems","marginTop"],"sources":["C:/Users/migue/TravelQuest/src/screens/auth/ResetPasswordScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    TextInput,\r\n    TouchableOpacity,\r\n    StyleSheet,\r\n    Alert,\r\n    ActivityIndicator,\r\n} from 'react-native';\r\nimport { supabase } from '../../services/supabase';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { RootStackParamList } from '../../navigation/types';\r\n\r\ntype ResetPasswordScreenNavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nexport const ResetPasswordScreen = () => {\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const navigation = useNavigation<ResetPasswordScreenNavigationProp>();\r\n\r\n    const handleResetPassword = async () => {\r\n        if (!newPassword || !confirmPassword) {\r\n            Alert.alert('Error', 'Por favor, completa todos los campos');\r\n            return;\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            Alert.alert('Error', 'Las contraseñas no coinciden');\r\n            return;\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            // Verificar la sesión actual\r\n            const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n\r\n            if (sessionError) {\r\n                Alert.alert('Error', 'Error al verificar la sesión');\r\n                return;\r\n            }\r\n\r\n            if (!session) {\r\n                Alert.alert('Error', 'Tu sesión ha expirado. Por favor, vuelve a iniciar sesión');\r\n                navigation.navigate('Login');\r\n                return;\r\n            }\r\n\r\n            // Actualizar la contraseña\r\n            const { error } = await supabase.auth.updateUser({\r\n                password: newPassword\r\n            });\r\n\r\n            if (error) {\r\n                Alert.alert('Error', error.message);\r\n                return;\r\n            }\r\n\r\n            Alert.alert('Éxito', 'Tu contraseña ha sido actualizada correctamente');\r\n            navigation.navigate('Login');\r\n        } catch (error) {\r\n            console.error('Error al cambiar contraseña:', error);\r\n            Alert.alert('Error', 'Ocurrió un error al cambiar la contraseña');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>Cambiar Contraseña</Text>\r\n            <Text style={styles.subtitle}>\r\n                Por favor, ingresa tu nueva contraseña\r\n            </Text>\r\n\r\n            <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Nueva contraseña\"\r\n                value={newPassword}\r\n                onChangeText={setNewPassword}\r\n                secureTextEntry\r\n            />\r\n\r\n            <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Confirmar contraseña\"\r\n                value={confirmPassword}\r\n                onChangeText={setConfirmPassword}\r\n                secureTextEntry\r\n            />\r\n\r\n            <TouchableOpacity\r\n                style={[styles.button, loading && styles.buttonDisabled]}\r\n                onPress={handleResetPassword}\r\n                disabled={loading}\r\n            >\r\n                {loading ? (\r\n                    <ActivityIndicator color=\"white\" />\r\n                ) : (\r\n                    <Text style={styles.buttonText}>Cambiar Contraseña</Text>\r\n                )}\r\n            </TouchableOpacity>\r\n\r\n            <TouchableOpacity\r\n                style={styles.cancelButton}\r\n                onPress={() => navigation.navigate('Login')}\r\n            >\r\n                <Text style={styles.cancelButtonText}>Cancelar</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 20,\r\n        justifyContent: 'center',\r\n        backgroundColor: '#f5f5f5',\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        marginBottom: 10,\r\n        textAlign: 'center',\r\n        color: '#333',\r\n    },\r\n    subtitle: {\r\n        fontSize: 16,\r\n        color: '#666',\r\n        marginBottom: 20,\r\n        textAlign: 'center',\r\n    },\r\n    input: {\r\n        backgroundColor: 'white',\r\n        padding: 15,\r\n        borderRadius: 10,\r\n        marginBottom: 15,\r\n        borderWidth: 1,\r\n        borderColor: '#ddd',\r\n    },\r\n    button: {\r\n        backgroundColor: '#4CAF50',\r\n        padding: 15,\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n    },\r\n    buttonDisabled: {\r\n        backgroundColor: '#cccccc',\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    cancelButton: {\r\n        marginTop: 20,\r\n        alignItems: 'center',\r\n    },\r\n    cancelButtonText: {\r\n        color: '#666',\r\n        fontSize: 16,\r\n    },\r\n});\r\n\r\nexport default ResetPasswordScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { supabase } from './supabase';\nimport { Notification } from '../types/notifications';\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true\n  })\n});\nclass NotificationService {\n  constructor() {\n    this.configureNotifications();\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  async configureNotifications() {\n    try {\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Permiso para notificaciones denegado');\n        return;\n      }\n      if (Platform.OS === 'android') {\n        await Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n    } catch (error) {\n      console.error('Error al configurar notificaciones:', error);\n    }\n  }\n  async scheduleLocalNotification(title, body, trigger, userId) {\n    try {\n      if (Platform.OS === 'web') {\n        if (window.Notification && Notification.permission === \"granted\") {\n          new Notification(title, {\n            body: body,\n            icon: '/icon.png'\n          });\n        } else if (window.Notification && Notification.permission !== \"denied\") {\n          Notification.requestPermission().then(permission => {\n            if (permission === \"granted\") {\n              new Notification(title, {\n                body: body,\n                icon: '/icon.png'\n              });\n            }\n          });\n        }\n        const {\n          error\n        } = await supabase.from('notifications').insert({\n          userid: userId,\n          title,\n          message: body,\n          type: 'local',\n          read: false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n        if (error) {\n          console.error('Error al guardar notificación en la base de datos:', error);\n        }\n        return;\n      }\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title,\n          body,\n          sound: true,\n          priority: Notifications.AndroidNotificationPriority.HIGH\n        },\n        trigger\n      });\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message: body,\n        type: 'local',\n        read: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Error al guardar notificación en la base de datos:', error);\n      }\n    } catch (error) {\n      console.error('Error al programar notificación local:', error);\n    }\n  }\n  async getUnreadNotifications(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('notifications').select('*').eq('userid', userId).eq('read', false).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error al obtener notificaciones:', error);\n      return [];\n    }\n  }\n  async markNotificationAsRead(notificationId) {\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').update({\n        read: true\n      }).eq('id', notificationId);\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error al marcar notificación como leída:', error);\n      throw error;\n    }\n  }\n  async cancelAllNotifications() {\n    await Notifications.cancelAllScheduledNotificationsAsync();\n  }\n  async cancelNotification(notificationId) {\n    await Notifications.cancelScheduledNotificationAsync(notificationId);\n  }\n  async createNotification(userId, title, message, type, data) {\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message,\n        type,\n        read: false,\n        data,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error al crear notificación:', error);\n      throw error;\n    }\n  }\n  async registerForPushNotificationsAsync() {\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Las notificaciones push no están disponibles en web');\n        return null;\n      }\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Permiso para notificaciones push denegado');\n        return null;\n      }\n      const token = (await Notifications.getExpoPushTokenAsync()).data;\n      return token;\n    } catch (error) {\n      console.error('Error al registrar notificaciones push:', error);\n      return null;\n    }\n  }\n}\nexport default NotificationService;","map":{"version":3,"names":["Notifications","Platform","supabase","Notification","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","NotificationService","constructor","configureNotifications","getInstance","instance","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","console","log","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","error","scheduleLocalNotification","title","body","trigger","userId","window","permission","icon","requestPermission","then","from","insert","userid","message","type","read","created_at","Date","toISOString","updated_at","scheduleNotificationAsync","content","sound","priority","AndroidNotificationPriority","HIGH","getUnreadNotifications","data","select","eq","order","ascending","markNotificationAsRead","notificationId","update","cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelNotification","cancelScheduledNotificationAsync","createNotification","registerForPushNotificationsAsync","token","getExpoPushTokenAsync"],"sources":["C:/Users/PC/TravelQuest/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport { Platform } from 'react-native';\nimport { supabase } from './supabase';\nimport { Notification } from '../types/notifications';\n\n// Configurar el comportamiento de las notificaciones\nNotifications.setNotificationHandler({\n    handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true,\n    }),\n});\n\nclass NotificationService {\n    private static instance: NotificationService;\n\n    private constructor() {\n        this.configureNotifications();\n    }\n\n    public static getInstance(): NotificationService {\n        if (!NotificationService.instance) {\n            NotificationService.instance = new NotificationService();\n        }\n        return NotificationService.instance;\n    }\n\n    private async configureNotifications() {\n        try {\n            // Solicitar permisos\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n\n            if (existingStatus !== 'granted') {\n                const { status } = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n\n            if (finalStatus !== 'granted') {\n                console.log('Permiso para notificaciones denegado');\n                return;\n            }\n\n            // Configurar el canal de notificaciones para Android\n            if (Platform.OS === 'android') {\n                await Notifications.setNotificationChannelAsync('default', {\n                    name: 'default',\n                    importance: Notifications.AndroidImportance.MAX,\n                    vibrationPattern: [0, 250, 250, 250],\n                    lightColor: '#FF231F7C',\n                });\n            }\n        } catch (error) {\n            console.error('Error al configurar notificaciones:', error);\n        }\n    }\n\n    // Método para programar una notificación local\n    public async scheduleLocalNotification(\n        title: string,\n        body: string,\n        trigger: Notifications.NotificationTriggerInput,\n        userId: string\n    ) {\n        try {\n            // Verificar si estamos en web\n            if (Platform.OS === 'web') {\n                // En web, mostramos una alerta del navegador\n                if (window.Notification && Notification.permission === \"granted\") {\n                    new Notification(title, {\n                        body: body,\n                        icon: '/icon.png'\n                    });\n                } else if (window.Notification && Notification.permission !== \"denied\") {\n                    Notification.requestPermission().then(permission => {\n                        if (permission === \"granted\") {\n                            new Notification(title, {\n                                body: body,\n                                icon: '/icon.png'\n                            });\n                        }\n                    });\n                }\n\n                // Guardar la notificación en la base de datos\n                const { error } = await supabase\n                    .from('notifications')\n                    .insert({\n                        userid: userId,\n                        title,\n                        message: body,\n                        type: 'local',\n                        read: false,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    });\n\n                if (error) {\n                    console.error('Error al guardar notificación en la base de datos:', error);\n                }\n                return;\n            }\n\n            // Para plataformas móviles\n            await Notifications.scheduleNotificationAsync({\n                content: {\n                    title,\n                    body,\n                    sound: true,\n                    priority: Notifications.AndroidNotificationPriority.HIGH,\n                },\n                trigger,\n            });\n\n            // Guardar la notificación en la base de datos\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message: body,\n                    type: 'local',\n                    read: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) {\n                console.error('Error al guardar notificación en la base de datos:', error);\n            }\n        } catch (error) {\n            console.error('Error al programar notificación local:', error);\n        }\n    }\n\n    // Método para obtener notificaciones no leídas\n    public async getUnreadNotifications(userId: string): Promise<Notification[]> {\n        try {\n            const { data, error } = await supabase\n                .from('notifications')\n                .select('*')\n                .eq('userid', userId)\n                .eq('read', false)\n                .order('created_at', { ascending: false });\n\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener notificaciones:', error);\n            return [];\n        }\n    }\n\n    // Método para marcar una notificación como leída\n    public async markNotificationAsRead(notificationId: string): Promise<void> {\n        try {\n            const { error } = await supabase\n                .from('notifications')\n                .update({ read: true })\n                .eq('id', notificationId);\n\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al marcar notificación como leída:', error);\n            throw error;\n        }\n    }\n\n    // Método para cancelar todas las notificaciones programadas\n    public async cancelAllNotifications() {\n        await Notifications.cancelAllScheduledNotificationsAsync();\n    }\n\n    // Método para cancelar una notificación específica por ID\n    public async cancelNotification(notificationId: string) {\n        await Notifications.cancelScheduledNotificationAsync(notificationId);\n    }\n\n    // Método para crear una notificación en la base de datos\n    public async createNotification(\n        userId: string,\n        title: string,\n        message: string,\n        type: string,\n        data?: any\n    ): Promise<void> {\n        try {\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message,\n                    type,\n                    read: false,\n                    data,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al crear notificación:', error);\n            throw error;\n        }\n    }\n\n    // Método para registrar el dispositivo para notificaciones push\n    public async registerForPushNotificationsAsync(): Promise<string | null> {\n        try {\n            // Verificar si estamos en web\n            if (Platform.OS === 'web') {\n                console.log('Las notificaciones push no están disponibles en web');\n                return null;\n            }\n\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n\n            if (existingStatus !== 'granted') {\n                const { status } = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n\n            if (finalStatus !== 'granted') {\n                console.log('Permiso para notificaciones push denegado');\n                return null;\n            }\n\n            const token = (await Notifications.getExpoPushTokenAsync()).data;\n            return token;\n        } catch (error) {\n            console.error('Error al registrar notificaciones push:', error);\n            return null;\n        }\n    }\n}\n\nexport default NotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { supabase } from \"../../services/supabase\";\nimport { useDispatch } from 'react-redux';\nimport { setUser, setToken, setAuthState } from \"../../features/authSlice\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useRoute } from '@react-navigation/native';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ResetPasswordScreen = function ResetPasswordScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    newPassword = _useState2[0],\n    setNewPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmPassword = _useState4[0],\n    setConfirmPassword = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n  var route = useRoute();\n  useEffect(function () {\n    var checkSession = function () {\n      var _ref = _asyncToGenerator(function* () {\n        console.log('Verificando sesión en ResetPasswordScreen...');\n        var url = yield Linking.getInitialURL();\n        console.log('URL actual:', url);\n        if (url != null && url.includes('type=recovery')) {\n          console.log('Enlace de recuperación detectado');\n          return;\n        }\n        var _yield$supabase$auth$ = yield supabase.auth.getSession(),\n          session = _yield$supabase$auth$.data.session,\n          error = _yield$supabase$auth$.error;\n        if (error) {\n          console.error('Error al verificar sesión:', error);\n          Alert.alert('Error', 'No se pudo verificar la sesión');\n          return;\n        }\n        if (!session) {\n          console.log('No hay sesión activa ni enlace de recuperación');\n          Alert.alert('Error', 'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.', [{\n            text: 'OK',\n            onPress: function onPress() {\n              return navigation.replace('Login');\n            }\n          }]);\n        }\n      });\n      return function checkSession() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkSession();\n  }, []);\n  var handleResetPassword = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      console.log('handleResetPassword llamado');\n      console.log('Nueva contraseña:', newPassword);\n      console.log('Confirmar contraseña:', confirmPassword);\n      if (!newPassword || !confirmPassword) {\n        console.log('Error: Campos vacíos');\n        Alert.alert('Error', 'Por favor, completa todos los campos');\n        return;\n      }\n      if (newPassword.length < 6) {\n        console.log('Error: Contraseña demasiado corta');\n        Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\n        return;\n      }\n      if (newPassword !== confirmPassword) {\n        console.log('Error: Las contraseñas no coinciden');\n        Alert.alert('Error', 'Las contraseñas no coinciden');\n        return;\n      }\n      setLoading(true);\n      console.log('Iniciando actualización de contraseña...');\n      try {\n        var _yield$supabase$auth$2 = yield supabase.auth.getSession(),\n          session = _yield$supabase$auth$2.data.session,\n          sessionError = _yield$supabase$auth$2.error;\n        if (sessionError) {\n          console.error('Error al obtener sesión:', sessionError);\n          Alert.alert('Error', 'No se pudo obtener la sesión actual');\n          return;\n        }\n        if (!session) {\n          console.error('No hay sesión activa');\n          Alert.alert('Error', 'No hay una sesión activa. Por favor, solicita un nuevo enlace.');\n          return;\n        }\n        console.log('Actualizando contraseña para usuario:', session.user.email);\n        var _yield$supabase$auth$3 = yield supabase.auth.updateUser({\n            password: newPassword\n          }),\n          updateError = _yield$supabase$auth$3.error;\n        if (updateError) {\n          console.error('Error al actualizar contraseña:', updateError);\n          Alert.alert('Error', updateError.message);\n          return;\n        }\n        console.log('Contraseña actualizada exitosamente');\n        var _yield$supabase$auth$4 = yield supabase.auth.getSession(),\n          updatedSession = _yield$supabase$auth$4.data.session,\n          updatedSessionError = _yield$supabase$auth$4.error;\n        if (updatedSessionError) {\n          console.error('Error al obtener sesión actualizada:', updatedSessionError);\n          Alert.alert('Error', 'No se pudo obtener la sesión actualizada');\n          return;\n        }\n        if (updatedSession != null && updatedSession.user) {\n          console.log('Configurando usuario en Redux...');\n          dispatch(setUser({\n            id: updatedSession.user.id,\n            email: updatedSession.user.email,\n            username: updatedSession.user.user_metadata.username || updatedSession.user.email.split('@')[0]\n          }));\n          dispatch(setToken(updatedSession.access_token));\n          dispatch(setAuthState('authenticated'));\n          Alert.alert('Éxito', 'Contraseña actualizada correctamente', [{\n            text: 'OK',\n            onPress: function onPress() {\n              console.log('Navegando a la pantalla principal...');\n              navigation.replace('Main');\n            }\n          }]);\n        }\n      } catch (error) {\n        console.error('Error en handleResetPassword:', error);\n        Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleResetPassword() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleCancel = function handleCancel() {\n    console.log('Cancelando recuperación de contraseña...');\n    dispatch(setAuthState('unauthenticated'));\n    navigation.replace('Login');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Recuperar Contrase\\xF1a\"\n    }), _jsx(Text, {\n      style: styles.subtitle,\n      children: \"Por favor, ingresa tu nueva contrase\\xF1a\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Nueva contrase\\xF1a\",\n      value: newPassword,\n      onChangeText: setNewPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirmar contrase\\xF1a\",\n      value: confirmPassword,\n      onChangeText: setConfirmPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }), _jsx(TouchableOpacity, {\n      style: [styles.button, loading && styles.buttonDisabled],\n      onPress: handleResetPassword,\n      disabled: loading,\n      children: loading ? _jsx(ActivityIndicator, {\n        color: \"white\"\n      }) : _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Actualizar Contrase\\xF1a\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.cancelButton,\n      onPress: handleCancel,\n      children: _jsx(Text, {\n        style: styles.cancelButtonText,\n        children: \"Cancelar\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    textAlign: 'center',\n    color: '#333'\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    padding: 15,\n    borderRadius: 10,\n    marginBottom: 15,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 10\n  },\n  buttonDisabled: {\n    backgroundColor: '#cccccc'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cancelButton: {\n    marginTop: 20,\n    alignItems: 'center'\n  },\n  cancelButtonText: {\n    color: '#666',\n    fontSize: 16\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","ActivityIndicator","supabase","useDispatch","setUser","setToken","setAuthState","useNavigation","useRoute","Linking","jsx","_jsx","jsxs","_jsxs","ResetPasswordScreen","_useState","_useState2","_slicedToArray","newPassword","setNewPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","_useState5","_useState6","loading","setLoading","dispatch","navigation","route","checkSession","_ref","_asyncToGenerator","console","log","url","getInitialURL","includes","_yield$supabase$auth$","auth","getSession","session","data","error","alert","text","onPress","replace","apply","arguments","handleResetPassword","_ref2","length","_yield$supabase$auth$2","sessionError","user","email","_yield$supabase$auth$3","updateUser","password","updateError","message","_yield$supabase$auth$4","updatedSession","updatedSessionError","id","username","user_metadata","split","access_token","handleCancel","style","styles","container","children","title","subtitle","input","placeholder","value","onChangeText","secureTextEntry","autoCapitalize","button","buttonDisabled","disabled","color","buttonText","cancelButton","cancelButtonText","create","flex","padding","justifyContent","backgroundColor","fontSize","fontWeight","marginBottom","textAlign","borderRadius","borderWidth","borderColor","alignItems","marginTop"],"sources":["C:/Users/PC/TravelQuest/src/screens/auth/ResetPasswordScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Alert,\r\n  ActivityIndicator,\r\n} from 'react-native';\r\nimport { supabase } from '../../services/supabase';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser, setToken, setAuthState } from '../../features/authSlice';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { RootStackParamList } from '../../navigation/types';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport { Linking } from 'react-native';\r\n\r\ntype ResetPasswordScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'ResetPassword'>;\r\n\r\nexport const ResetPasswordScreen = () => {\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigation<ResetPasswordScreenNavigationProp>();\r\n  const route = useRoute();\r\n\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      console.log('Verificando sesión en ResetPasswordScreen...');\r\n      \r\n      // Obtener la URL actual\r\n      const url = await Linking.getInitialURL();\r\n      console.log('URL actual:', url);\r\n\r\n      if (url?.includes('type=recovery')) {\r\n        console.log('Enlace de recuperación detectado');\r\n        return; // Permitir continuar con el proceso de recuperación\r\n      }\r\n\r\n      const { data: { session }, error } = await supabase.auth.getSession();\r\n      \r\n      if (error) {\r\n        console.error('Error al verificar sesión:', error);\r\n        Alert.alert('Error', 'No se pudo verificar la sesión');\r\n        return;\r\n      }\r\n\r\n      if (!session) {\r\n        console.log('No hay sesión activa ni enlace de recuperación');\r\n        Alert.alert(\r\n          'Error',\r\n          'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.',\r\n          [{ text: 'OK', onPress: () => navigation.replace('Login') }]\r\n        );\r\n      }\r\n    };\r\n\r\n    checkSession();\r\n  }, []);\r\n\r\n  const handleResetPassword = async () => {\r\n    console.log('handleResetPassword llamado');\r\n    console.log('Nueva contraseña:', newPassword);\r\n    console.log('Confirmar contraseña:', confirmPassword);\r\n    \r\n    if (!newPassword || !confirmPassword) {\r\n      console.log('Error: Campos vacíos');\r\n      Alert.alert('Error', 'Por favor, completa todos los campos');\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      console.log('Error: Contraseña demasiado corta');\r\n      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\r\n      return;\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      console.log('Error: Las contraseñas no coinciden');\r\n      Alert.alert('Error', 'Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    console.log('Iniciando actualización de contraseña...');\r\n\r\n    try {\r\n      // Primero verificar la sesión actual\r\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n      if (sessionError) {\r\n        console.error('Error al obtener sesión:', sessionError);\r\n        Alert.alert('Error', 'No se pudo obtener la sesión actual');\r\n        return;\r\n      }\r\n\r\n      if (!session) {\r\n        console.error('No hay sesión activa');\r\n        Alert.alert('Error', 'No hay una sesión activa. Por favor, solicita un nuevo enlace.');\r\n        return;\r\n      }\r\n\r\n      console.log('Actualizando contraseña para usuario:', session.user.email);\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        password: newPassword\r\n      });\r\n\r\n      if (updateError) {\r\n        console.error('Error al actualizar contraseña:', updateError);\r\n        Alert.alert('Error', updateError.message);\r\n        return;\r\n      }\r\n\r\n      console.log('Contraseña actualizada exitosamente');\r\n      \r\n      // Obtener la sesión actualizada\r\n      const { data: { session: updatedSession }, error: updatedSessionError } = await supabase.auth.getSession();\r\n      \r\n      if (updatedSessionError) {\r\n        console.error('Error al obtener sesión actualizada:', updatedSessionError);\r\n        Alert.alert('Error', 'No se pudo obtener la sesión actualizada');\r\n        return;\r\n      }\r\n\r\n      if (updatedSession?.user) {\r\n        console.log('Configurando usuario en Redux...');\r\n        dispatch(setUser({\r\n          id: updatedSession.user.id,\r\n          email: updatedSession.user.email!,\r\n          username: updatedSession.user.user_metadata.username || updatedSession.user.email!.split('@')[0],\r\n        }));\r\n        dispatch(setToken(updatedSession.access_token));\r\n        dispatch(setAuthState('authenticated'));\r\n        \r\n        Alert.alert(\r\n          'Éxito',\r\n          'Contraseña actualizada correctamente',\r\n          [\r\n            {\r\n              text: 'OK',\r\n              onPress: () => {\r\n                console.log('Navegando a la pantalla principal...');\r\n                navigation.replace('Main');\r\n              }\r\n            }\r\n          ]\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en handleResetPassword:', error);\r\n      Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    console.log('Cancelando recuperación de contraseña...');\r\n    dispatch(setAuthState('unauthenticated'));\r\n    navigation.replace('Login');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Recuperar Contraseña</Text>\r\n      <Text style={styles.subtitle}>\r\n        Por favor, ingresa tu nueva contraseña\r\n      </Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Nueva contraseña\"\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Confirmar contraseña\"\r\n        value={confirmPassword}\r\n        onChangeText={setConfirmPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={[styles.button, loading && styles.buttonDisabled]}\r\n        onPress={handleResetPassword}\r\n        disabled={loading}\r\n      >\r\n        {loading ? (\r\n          <ActivityIndicator color=\"white\" />\r\n        ) : (\r\n          <Text style={styles.buttonText}>Actualizar Contraseña</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n\r\n      <TouchableOpacity\r\n        style={styles.cancelButton}\r\n        onPress={handleCancel}\r\n      >\r\n        <Text style={styles.cancelButtonText}>Cancelar</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n    color: '#333',\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    color: '#666',\r\n    marginBottom: 20,\r\n    textAlign: 'center',\r\n  },\r\n  input: {\r\n    backgroundColor: 'white',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    marginBottom: 15,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n  },\r\n  button: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n  },\r\n  buttonDisabled: {\r\n    backgroundColor: '#cccccc',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  cancelButton: {\r\n    marginTop: 20,\r\n    alignItems: 'center',\r\n  },\r\n  cancelButtonText: {\r\n    color: '#666',\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default ResetPasswordScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
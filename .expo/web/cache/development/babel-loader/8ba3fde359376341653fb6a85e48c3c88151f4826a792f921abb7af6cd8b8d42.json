{"ast":null,"code":"import { supabase } from './supabase';\nimport { createJournalEntry } from './journalService';\nexport const getUserPoints = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('points').eq('id', userId).maybeSingle();\n    if (error) throw error;\n    return data?.points || 0;\n  } catch (error) {\n    console.error('Error obteniendo puntos del usuario:', error);\n    return 0;\n  }\n};\nexport const addPointsToUser = async (userId, points) => {\n  try {\n    const currentPoints = await getUserPoints(userId);\n    const {\n      error\n    } = await supabase.from('users').update({\n      points: currentPoints + points,\n      updated_at: new Date().toISOString()\n    }).eq('id', userId);\n    if (error) throw error;\n    return currentPoints + points;\n  } catch (error) {\n    console.error('Error añadiendo puntos al usuario:', error);\n    throw error;\n  }\n};\nexport const completeMission = async (missionId, userId, imageUrl) => {\n  console.log('Iniciando completeMission con parámetros:', {\n    missionId,\n    userId,\n    imageUrl\n  });\n  try {\n    if (!missionId || !userId) {\n      console.error('Parámetros inválidos:', {\n        missionId,\n        userId\n      });\n      throw new Error('Parámetros inválidos para completar misión');\n    }\n    console.log('Obteniendo datos de la misión...');\n    const {\n      data: missionData,\n      error: missionError\n    } = await supabase.from('journeys_missions').select(`\n                id,\n                journeyId,\n                challengeId,\n                completed,\n                challenges (\n                    id,\n                    title,\n                    points\n                )\n            `).eq('id', missionId).single();\n    if (missionError || !missionData) {\n      console.error('Error al obtener datos de la misión:', missionError);\n      throw missionError || new Error('No se encontró la misión');\n    }\n    console.log('Datos de misión obtenidos:', missionData);\n    if (missionData.completed) {\n      console.warn('La misión ya está completada');\n      return missionData.challenges.points;\n    }\n    console.log('Marcando misión como completada...');\n    const updateData = {\n      completed: true,\n      completed_at: new Date().toISOString()\n    };\n    if (imageUrl) {\n      console.log('Añadiendo URL de imagen a picture_url:', imageUrl);\n      try {\n        updateData.picture_url = imageUrl;\n        const {\n          error\n        } = await supabase.from('journeys_missions').update(updateData).eq('id', missionId);\n        if (error) {\n          console.error('Error al actualizar con picture_url:', error.message);\n          delete updateData.picture_url;\n          const {\n            error: error2\n          } = await supabase.from('journeys_missions').update({\n            completed: true,\n            completed_at: new Date().toISOString()\n          }).eq('id', missionId);\n          if (error2) throw error2;\n        }\n      } catch (error) {\n        console.warn('Error con la columna de imagen pero continuando:', error.message);\n      }\n    } else {\n      console.log('Actualizando sin imagen...');\n      const {\n        error\n      } = await supabase.from('journeys_missions').update({\n        completed: true,\n        completed_at: new Date().toISOString()\n      }).eq('id', missionId);\n      if (error) throw error;\n    }\n    const points = missionData.challenges.points;\n    console.log('Añadiendo puntos al usuario:', points);\n    await addPointsToUser(userId, points);\n    if (imageUrl) {\n      try {\n        console.log('Creando entrada en el diario...');\n        const {\n          data: journeyData,\n          error: journeyError\n        } = await supabase.from('journeys').select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `).eq('id', missionData.journeyId).single();\n        if (journeyError) {\n          console.warn('Error obteniendo datos de journey:', journeyError);\n          return points;\n        }\n        console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\n        await createJournalEntry({\n          userId: userId,\n          cityId: journeyData.cityId,\n          missionId: missionId,\n          title: `Misión completada: ${missionData.challenges.title}`,\n          content: `He completado esta misión en ${journeyData.cities?.name || 'mi viaje'}.`,\n          photos: [imageUrl]\n        });\n        console.log('Entrada de diario creada exitosamente');\n      } catch (error) {\n        console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\n      }\n    }\n    console.log('Misión completada exitosamente, retornando puntos:', points);\n    return points;\n  } catch (error) {\n    console.error('Error en completeMission:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","createJournalEntry","getUserPoints","userId","data","error","from","select","eq","maybeSingle","points","console","addPointsToUser","currentPoints","update","updated_at","Date","toISOString","completeMission","missionId","imageUrl","log","Error","missionData","missionError","single","completed","warn","challenges","updateData","completed_at","picture_url","message","error2","journeyData","journeyError","journeyId","cityId","title","content","cities","name","photos"],"sources":["C:/Users/migue/miguel/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { createJournalEntry } from './journalService';\n\nexport const getUserPoints = async (userId: string) => {\n    try {\n        const { data, error } = await supabase\n            .from('users')\n            .select('points')\n            .eq('id', userId)\n            .maybeSingle();\n\n        if (error) throw error;\n\n        return data?.points || 0;\n    } catch (error) {\n        console.error('Error obteniendo puntos del usuario:', error);\n        return 0; // Retornamos 0 en caso de error\n    }\n};\n\nexport const addPointsToUser = async (userId: string, points: number) => {\n    try {\n        // Primero obtenemos los puntos actuales\n        const currentPoints = await getUserPoints(userId);\n\n        // Actualizamos los puntos\n        const { error } = await supabase\n            .from('users')\n            .update({\n                points: currentPoints + points,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', userId);\n\n        if (error) throw error;\n\n        return currentPoints + points;\n    } catch (error) {\n        console.error('Error añadiendo puntos al usuario:', error);\n        throw error;\n    }\n};\n\nexport const completeMission = async (missionId: string, userId: string, imageUrl?: string) => {\n    console.log('Iniciando completeMission con parámetros:', { missionId, userId, imageUrl });\n    \n    try {\n        // Verificar que tenemos los datos necesarios\n        if (!missionId || !userId) {\n            console.error('Parámetros inválidos:', { missionId, userId });\n            throw new Error('Parámetros inválidos para completar misión');\n        }\n        \n        // Obtener datos de la misión para asignar puntos\n        console.log('Obteniendo datos de la misión...');\n        const { data: missionData, error: missionError } = await supabase\n            .from('journeys_missions')\n            .select(`\n                id,\n                journeyId,\n                challengeId,\n                completed,\n                challenges (\n                    id,\n                    title,\n                    points\n                )\n            `)\n            .eq('id', missionId)\n            .single();\n\n        if (missionError || !missionData) {\n            console.error('Error al obtener datos de la misión:', missionError);\n            throw missionError || new Error('No se encontró la misión');\n        }\n\n        console.log('Datos de misión obtenidos:', missionData);\n\n        // Verificar que la misión no esté ya completada\n        if (missionData.completed) {\n            console.warn('La misión ya está completada');\n            return missionData.challenges.points;\n        }\n\n        // Marcar la misión como completada\n        console.log('Marcando misión como completada...');\n        \n        // Preparar datos para la actualización\n        const updateData: any = {\n            completed: true,\n            completed_at: new Date().toISOString()\n        };\n        \n        // Añadir URL de imagen si existe - CORREGIDO para usar directamente picture_url\n        if (imageUrl) {\n            console.log('Añadiendo URL de imagen a picture_url:', imageUrl);\n            \n            try {\n                // Usar directamente picture_url\n                updateData.picture_url = imageUrl;\n                const { error } = await supabase\n                    .from('journeys_missions')\n                    .update(updateData)\n                    .eq('id', missionId);\n                    \n                if (error) {\n                    console.error('Error al actualizar con picture_url:', error.message);\n                    // Si falla, actualizar sin la imagen\n                    delete updateData.picture_url;\n                    const { error: error2 } = await supabase\n                        .from('journeys_missions')\n                        .update({ completed: true, completed_at: new Date().toISOString() })\n                        .eq('id', missionId);\n                        \n                    if (error2) throw error2;\n                }\n            } catch (error: any) {\n                console.warn('Error con la columna de imagen pero continuando:', error.message);\n            }\n        } else {\n            // Si no hay imagen, solo actualizar el estado completado\n            console.log('Actualizando sin imagen...');\n            const { error } = await supabase\n                .from('journeys_missions')\n                .update({ completed: true, completed_at: new Date().toISOString() })\n                .eq('id', missionId);\n                \n            if (error) throw error;\n        }\n        \n        // Añadir los puntos al usuario\n        const points = missionData.challenges.points;\n        console.log('Añadiendo puntos al usuario:', points);\n        await addPointsToUser(userId, points);\n        \n        // Si hay una imagen, intentamos agregar una entrada al diario\n        if (imageUrl) {\n            try {\n                console.log('Creando entrada en el diario...');\n                // Obtener información de la ciudad\n                const { data: journeyData, error: journeyError } = await supabase\n                    .from('journeys')\n                    .select(`\n                        id,\n                        cityId,\n                        cities (name)\n                    `)\n                    .eq('id', missionData.journeyId)\n                    .single();\n\n                if (journeyError) {\n                    console.warn('Error obteniendo datos de journey:', journeyError);\n                    return points; // Retornamos puntos y no creamos entrada en el diario\n                }\n                \n                // Crear entrada en el diario\n                console.log('Datos de journey obtenidos, creando entrada de diario:', journeyData);\n                \n                await createJournalEntry({\n                    userId: userId,\n                    cityId: journeyData.cityId,\n                    missionId: missionId,\n                    title: `Misión completada: ${missionData.challenges.title}`,\n                    content: `He completado esta misión en ${journeyData.cities?.name || 'mi viaje'}.`,\n                    photos: [imageUrl]\n                });\n                \n                console.log('Entrada de diario creada exitosamente');\n            } catch (error) {\n                console.warn('Error creando entrada en el diario, pero la misión se completó:', error);\n                // No lanzamos el error para no interrumpir el flujo\n            }\n        }\n\n        console.log('Misión completada exitosamente, retornando puntos:', points);\n        return points;\n    } catch (error) {\n        console.error('Error en completeMission:', error);\n        throw error;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
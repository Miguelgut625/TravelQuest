{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport authReducer from './auth/authSlice';\nimport missionReducer from './missionSlice';\nimport journalReducer from './journalSlice';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport journeyReducer from './journey/journeySlice';\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth'],\n  debug: true\n};\nconst persistedAuthReducer = persistReducer(persistConfig, authReducer);\nexport const store = configureStore({\n  reducer: {\n    auth: persistedAuthReducer,\n    missions: missionReducer,\n    journal: journalReducer,\n    journey: journeyReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n    }\n  })\n});\nexport const persistor = persistStore(store);\nstore.subscribe(() => {\n  console.log('Estado actual:', store.getState());\n});","map":{"version":3,"names":["configureStore","persistStore","persistReducer","authReducer","missionReducer","journalReducer","AsyncStorage","journeyReducer","persistConfig","key","storage","whitelist","debug","persistedAuthReducer","store","reducer","auth","missions","journal","journey","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","subscribe","console","log","getState"],"sources":["C:/Users/PC/TravelQuest/src/features/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport authReducer from './auth/authSlice';\r\nimport missionReducer from './missionSlice';\r\nimport journalReducer from './journalSlice';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport journeyReducer from './journey/journeySlice';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: AsyncStorage,\r\n  whitelist: ['auth'],\r\n  debug: true // Habilitar logs de depuración\r\n};\r\n\r\nconst persistedAuthReducer = persistReducer(persistConfig, authReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistedAuthReducer,\r\n    missions: missionReducer,\r\n    journal: journalReducer,\r\n    journey: journeyReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// Agregar listener para depuración\r\nstore.subscribe(() => {\r\n  console.log('Estado actual:', store.getState());\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch; "],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,cAAc,MAAM,wBAAwB;AAEnD,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEJ,YAAY;EACrBK,SAAS,EAAE,CAAC,MAAM,CAAC;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,oBAAoB,GAAGX,cAAc,CAACM,aAAa,EAAEL,WAAW,CAAC;AAEvE,OAAO,MAAMW,KAAK,GAAGd,cAAc,CAAC;EAClCe,OAAO,EAAE;IACPC,IAAI,EAAEH,oBAAoB;IAC1BI,QAAQ,EAAEb,cAAc;IACxBc,OAAO,EAAEb,cAAc;IACvBc,OAAO,EAAEZ;EACX,CAAC;EACDa,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAAC,iBAAiB,EAAE,mBAAmB;IACzD;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGvB,YAAY,CAACa,KAAK,CAAC;AAG5CA,KAAK,CAACW,SAAS,CAAC,MAAM;EACpBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEb,KAAK,CAACc,QAAQ,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
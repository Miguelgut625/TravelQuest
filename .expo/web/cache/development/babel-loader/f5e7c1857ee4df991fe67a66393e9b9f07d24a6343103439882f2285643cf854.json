{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\TravelQuest\\\\src\\\\components\\\\GlobeView.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport WebView from 'react-native-webview';\nimport FallbackGlobeView from './FallbackGlobeView';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst USE_FALLBACK = false;\nconst TIMEOUT_SECONDS = 120;\nconst MAP_VIEW_DISTANCE_THRESHOLD = 2000000;\nconst GLOBE_VIEW_DISTANCE_THRESHOLD = 3000000;\nconst GlobeView = props => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [useFallbackView, setUseFallbackView] = useState(USE_FALLBACK);\n  const [showMapView, setShowMapView] = useState(false);\n  const [currentPosition, setCurrentPosition] = useState({\n    latitude: 0,\n    longitude: 0,\n    altitude: 15000000,\n    zoom: 2\n  });\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationPermission, setLocationPermission] = useState(false);\n  const [isLoadingLocation, setIsLoadingLocation] = useState(true);\n  const webViewRef = useRef(null);\n  const loadTimeoutRef = useRef(null);\n  const cesiumContainerRef = useRef(null);\n  const mapViewRef = useRef(null);\n  const getUserLocation = async () => {\n    setIsLoadingLocation(true);\n    try {\n      const {\n        status\n      } = await Location.requestForegroundPermissionsAsync();\n      setLocationPermission(status === 'granted');\n      if (status === 'granted') {\n        const location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.Highest,\n          timeout: 15000\n        });\n        setUserLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude\n        });\n      } else {\n        console.log('Permiso de ubicación denegado');\n      }\n    } catch (err) {\n      console.error('Error al obtener la ubicación:', err);\n    } finally {\n      setIsLoadingLocation(false);\n    }\n  };\n  const goToUserLocation = () => {\n    if (!userLocation) return;\n    if (!showMapView) {\n      setCurrentPosition(prevState => Object.assign({}, prevState, {\n        latitude: userLocation.latitude,\n        longitude: userLocation.longitude,\n        altitude: 1000000,\n        zoom: 12\n      }));\n      setShowMapView(true);\n      if (mapViewRef.current) {\n        setTimeout(() => {\n          mapViewRef.current?.animateToRegion({\n            latitude: userLocation.latitude,\n            longitude: userLocation.longitude,\n            latitudeDelta: 0.01,\n            longitudeDelta: 0.01\n          }, 1000);\n        }, 500);\n      }\n      if (webViewRef.current) {\n        webViewRef.current.injectJavaScript(`\n          (function() {\n            try {\n              autoRotate = false;\n              console.log('Rotación automática detenida al ir a la ubicación');\n            } catch(e) {\n              console.error('Error al detener rotación:', e);\n            }\n            return true;\n          })();\n        `);\n      }\n    } else {\n      if (mapViewRef.current) {\n        mapViewRef.current.animateToRegion({\n          latitude: userLocation.latitude,\n          longitude: userLocation.longitude,\n          latitudeDelta: 0.01,\n          longitudeDelta: 0.01\n        }, 1000);\n      }\n    }\n  };\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    if (!useFallbackView && Platform.OS !== 'web') {\n      loadTimeoutRef.current = setTimeout(() => {\n        console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\n        setUseFallbackView(true);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => {\n        if (loadTimeoutRef.current) {\n          clearTimeout(loadTimeoutRef.current);\n        }\n      };\n    }\n    return undefined;\n  }, [useFallbackView]);\n  useEffect(() => {\n    if (Platform.OS !== 'web') {\n      const initialDimensions = Dimensions.get('window');\n      const dimensionsChangeHandler = ({\n        window\n      }) => {\n        if (showMapView && mapViewRef.current) {\n          setTimeout(() => {\n            mapViewRef.current?.animateToRegion({\n              latitude: currentPosition.latitude,\n              longitude: currentPosition.longitude,\n              latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\n              longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom))\n            }, 300);\n          }, 300);\n        }\n      };\n      const subscription = Dimensions.addEventListener('change', dimensionsChangeHandler);\n      return () => {\n        subscription.remove();\n      };\n    }\n    return undefined;\n  }, [showMapView, currentPosition]);\n  const handleError = errorMsg => {\n    if (errorMsg.includes('importScripts') || errorMsg.includes('WorkerGlobalScope') || errorMsg.includes('transferTypedArrayTest') || errorMsg.includes('createVerticesFromHeightmap')) {\n      console.warn('Ignorando error no crítico de Web Worker:', errorMsg);\n      return;\n    }\n    if (errorMsg.includes('Cannot assign to read only property') || errorMsg.includes('normalize')) {\n      console.warn('Ignorando error de asignación a propiedad de solo lectura:', errorMsg);\n      if (webViewRef.current) {\n        console.log('Recargando WebView después de error...');\n        webViewRef.current.reload();\n      }\n      return;\n    }\n    console.error('Error en GlobeView:', errorMsg);\n    setError(errorMsg);\n    setTimeout(() => {\n      setUseFallbackView(true);\n    }, 1000);\n  };\n  const retryCesium = () => {\n    setUseFallbackView(false);\n    setLoading(true);\n    setError(null);\n    if (loadTimeoutRef.current) {\n      clearTimeout(loadTimeoutRef.current);\n    }\n    loadTimeoutRef.current = setTimeout(() => {\n      console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\n      setUseFallbackView(true);\n    }, TIMEOUT_SECONDS * 1000);\n  };\n  if (Platform.OS === 'web') {\n    return _jsxDEV(View, {\n      style: [styles.container, props.style],\n      children: _jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        id: \"cesiumContainer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n  if (useFallbackView) {\n    return _jsxDEV(View, {\n      style: [styles.container, props.style],\n      children: [_jsxDEV(FallbackGlobeView, {\n        style: props.style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.fallbackButtonContainer,\n        children: _jsxDEV(TouchableOpacity, {\n          style: styles.retryButton,\n          onPress: retryCesium,\n          children: _jsxDEV(Text, {\n            style: styles.retryButtonText,\n            children: \"Intentar cargar mapa 3D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this);\n  }\n  const htmlContent = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n      <title>Cesium Globe</title>\n      <style>\n        html, body {\n          width: 100%;\n          height: 100%;\n          margin: 0;\n          padding: 0;\n          overflow: hidden;\n          background-color: black;\n          touch-action: manipulation;\n          position: fixed;\n        }\n        #cesiumContainer {\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          left: 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .cesium-widget-credits, .cesium-viewer-bottom, .cesium-viewer-toolbar {\n          display: none !important;\n        }\n        .loading-overlay {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0,0,0,0.8);\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          color: white;\n          font-family: Arial, sans-serif;\n        }\n        .loading-indicator {\n          text-align: center;\n        }\n        .loading-spinner {\n          width: 60px;\n          height: 60px;\n          border: 5px solid rgba(255,255,255,0.3);\n          border-radius: 50%;\n          border-top-color: #4CAF50;\n          animation: spin 1s linear infinite;\n          margin: 0 auto 20px;\n        }\n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"cesiumContainer\">\n        <!-- Eliminamos el div de depuración visible -->\n      </div>\n      <div id=\"loadingOverlay\" class=\"loading-overlay\">\n        <div class=\"loading-indicator\">\n          <div class=\"loading-spinner\"></div>\n          <div style=\"font-size: 18px; font-weight: bold;\">Cargando globo terráqueo</div>\n          <div id=\"loading-progress\" style=\"margin-top: 15px; font-size: 14px;\">Iniciando...</div>\n        </div>\n      </div>\n      \n      <script>\n        // Configurar base URL para Cesium ANTES de cargar la biblioteca\n        window.CESIUM_BASE_URL = 'https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/';\n        \n        // Variable para controlar el nivel de detalle según el rendimiento\n        let isLowPerformanceDevice = false;\n        \n        // Detectar rendimiento del dispositivo\n        try {\n          const canvas = document.createElement('canvas');\n          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n          \n          if (!gl) {\n            isLowPerformanceDevice = true;\n          } else {\n            // Verificar capacidades básicas\n            const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n            \n            // Si las capacidades son limitadas, considerarlo dispositivo de rendimiento bajo\n            if (maxTextureSize < 4096 || maxTextureUnits < 8) {\n              isLowPerformanceDevice = true;\n            }\n          }\n        } catch(e) {\n          console.warn('Error detectando rendimiento del dispositivo:', e);\n          isLowPerformanceDevice = true; // Asumir bajo rendimiento por seguridad\n        }\n        \n        // Actualizar el progreso de carga\n        function updateProgress(text) {\n          document.getElementById('loading-progress').textContent = text;\n        }\n        \n        // Cargar scripts y estilos\n        function loadScript(url, callback) {\n          var script = document.createElement('script');\n          script.type = 'text/javascript';\n          script.src = url;\n          script.onload = callback;\n          script.onerror = function() {\n            window.ReactNativeWebView.postMessage('error:No se pudo cargar Cesium. Verifica tu conexión a Internet.');\n          };\n          document.head.appendChild(script);\n        }\n        \n        function loadStyles(url) {\n          var link = document.createElement('link');\n          link.rel = 'stylesheet';\n          link.href = url;\n          document.head.appendChild(link);\n        }\n\n        // Iniciar la carga de Cesium (versión 1.83 más compatible con WebView)\n        updateProgress('Descargando recursos...');\n        // Primero configuramos el entorno para evitar errores de workers\n        window.BUILD_WORKER = function(){return null;};\n        window.CESIUM_ON_WORKER_BOOT = function(){};\n        \n        // Cargamos una versión más antigua de Cesium que funciona mejor en WebView\n        loadScript('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Cesium.js', function() {\n          updateProgress('Cesium cargado. Inicializando...');\n          loadStyles('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Widgets/widgets.css');\n          \n          // Pequeño retraso para asegurar que Cesium esté listo\n          setTimeout(function() {\n            try {\n              initCesium();\n              \n              // Forzar una actualización del tamaño del canvas después de la inicialización\n              setTimeout(function() {\n                if (window.viewer) {\n                  // Llamar de nuevo a centerGlobe después de la carga para asegurar la posición\n                  if (typeof window.centerGlobe === 'function') {\n                    window.centerGlobe();\n                  }\n                  \n                  // Asegurar que el globo es visible\n                  window.viewer.scene.globe.show = true;\n                  \n                  // Forzar renderizado\n                  window.viewer.scene.requestRender();\n                }\n              }, 2000);\n            } catch(e) {\n              console.error('Error al inicializar Cesium:', e);\n              window.ReactNativeWebView.postMessage('error:' + e);\n            }\n          }, 500);\n        });\n        \n        function initCesium() {\n          try {\n            console.log('Inicializando Cesium...');\n            \n            // Token de Cesium Ion\n            Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNmY5ZTNmZS1hMGRkLTQyZjQtYWQ1NS1lODYwZTcxNTRiMjMiLCJpZCI6MjAxNDM5LCJpYXQiOjE3MTMxODg0Njd9.ckUMa1Nb8MvXb2EYMy01bIPBOhrYmFbSw0RPiBP70oI';\n            \n            updateProgress('Creando visor...');\n            \n            // Desactivar Web Workers completamente para evitar los errores\n            Cesium.FeatureDetection.supportsWebWorkers = function() { return false; };\n            \n            // Inicialización del visor de Cesium con opciones simplificadas\n            window.viewer = new Cesium.Viewer('cesiumContainer', {\n              animation: false,\n              baseLayerPicker: false,\n              fullscreenButton: false,\n              geocoder: false,\n              homeButton: false,\n              infoBox: false,\n              sceneModePicker: false,\n              selectionIndicator: false,\n              timeline: false,\n              navigationHelpButton: false,\n              navigationInstructionsInitiallyVisible: false,\n              scene3DOnly: true,\n              requestRenderMode: false, // Desactivar requestRenderMode para asegurar renderizado continuo\n              maximumRenderTimeChange: Infinity,\n              terrainProvider: new Cesium.EllipsoidTerrainProvider(), // Usar terreno simple desde el inicio\n              imageryProvider: false, // Sin imagen inicial, las añadiremos manualmente\n              contextOptions: {\n                webgl: {\n                  alpha: false, // Usar fondo opaco\n                  antialias: true, // Mejorar calidad visual\n                  failIfMajorPerformanceCaveat: false\n                }\n              }\n            });\n            \n            // Guardar variable local para uso interno\n            const viewer = window.viewer;\n            \n            // Verificar que el visor se creó correctamente\n            if (!viewer || !viewer.scene) {\n              throw new Error('No se pudo crear el visor Cesium');\n            }\n            \n            // Eliminar la extensión de CesiumInspector\n            // Forzar renderizado de frames incluso sin cambios\n            viewer.scene.requestRenderMode = false;\n            \n            // Ocultar créditos\n            viewer.cesiumWidget.creditContainer.style.display = 'none';\n            \n            // Eliminar toda la parte de depuración móvil\n            updateProgress('Aplicando configuración...');\n            \n            // Aplicar optimizaciones extremas para móviles\n            viewer.scene.fog.enabled = false;\n            viewer.scene.globe.maximumScreenSpaceError = isLowPerformanceDevice ? 12 : 8; \n            viewer.targetFrameRate = isLowPerformanceDevice ? 24 : 30;\n            viewer.resolutionScale = isLowPerformanceDevice ? 0.5 : 0.7;\n            \n            // Hacer visible el globo\n            viewer.scene.globe.show = true;\n            viewer.scene.globe.baseColor = Cesium.Color.BLUE;\n            viewer.scene.backgroundColor = Cesium.Color.BLACK;\n            \n            // Ajustar el tamaño y posición de la escena para centrar el globo\n            function centerGlobe() {\n              try {\n                // Forzar que el canvas tenga el tamaño correcto\n                const canvas = viewer.scene.canvas;\n                if (canvas) {\n                  canvas.width = window.innerWidth;\n                  canvas.height = window.innerHeight;\n                  canvas.style.width = '100%';\n                  canvas.style.height = '100%';\n                  \n                  // Actualizar la matriz de proyección\n                  viewer.scene.camera.frustum.aspectRatio = canvas.clientWidth / canvas.clientHeight;\n                }\n                \n                // Utilizar flyTo en lugar de lookAt para evitar problemas con vectores\n                viewer.camera.flyTo({\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\n                  orientation: {\n                    heading: Cesium.Math.toRadians(0.0),\n                    pitch: Cesium.Math.toRadians(-90.0),\n                    roll: 0.0\n                  },\n                  duration: 0.5, // Más rápido para respuesta inmediata\n                  complete: function() {\n                    // Forzar un repintado después de centrar\n                    viewer.scene.requestRender();\n                  }\n                });\n              } catch (e) {\n                console.warn('Error al centrar el globo:', e);\n              }\n            }\n            \n            // Exponer la función globalmente\n            window.centerGlobe = centerGlobe;\n            \n            // Llamar a centrarlo inicialmente\n            centerGlobe();\n            \n            // Centrar cuando cambie el tamaño de la ventana\n            window.addEventListener('resize', centerGlobe);\n            \n            // Función para cargar textura directa si todo lo demás falla\n            function loadDirectTexture() {\n              updateProgress('Cargando textura directa...');\n              \n              // Intentar cargar una textura de la Tierra directamente\n              const earthTexture = new Image();\n              earthTexture.crossOrigin = 'anonymous';\n              earthTexture.onload = function() {\n                try {\n                  // Crear material con la textura\n                  const material = new Cesium.Material({\n                    fabric: {\n                      type: 'DiffuseMap',\n                      uniforms: {\n                        image: earthTexture\n                      }\n                    }\n                  });\n                  \n                  // Aplicar al globo\n                  viewer.scene.globe.material = material;\n                  updateProgress('Textura cargada con éxito');\n                } catch (e) {\n                  console.error('Error al aplicar textura:', e);\n                }\n              };\n              \n              earthTexture.onerror = function() {\n                console.error('Error al cargar la textura de la Tierra');\n              };\n              \n              // Usar una URL de imagen pública de la Tierra\n              earthTexture.src = 'https://eoimages.gsfc.nasa.gov/images/imagerecords/74000/74218/world.200412.3x5400x2700.jpg';\n            }\n            \n            // Desactivar efectos exigentes\n            viewer.scene.skyAtmosphere.show = false;\n            viewer.scene.globe.showGroundAtmosphere = false;\n            \n            updateProgress('Cargando imágenes...');\n            \n            // Usar mapas naturales de la Tierra sin fronteras políticas\n            let imageLoadSuccess = false;\n            \n            try {\n              // Cargar solo mapas naturales de la Tierra\n              const naturalEarthII = new Cesium.TileMapServiceImageryProvider({\n                url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')\n              });\n              viewer.imageryLayers.addImageryProvider(naturalEarthII);\n              imageLoadSuccess = true;\n              \n              // No añadimos capas de fronteras políticas\n            } catch (e) {\n              console.warn('Error cargando mapas NaturalEarth:', e);\n              try {\n                // Alternativa: mapas físicos de Bing\n                const bing = new Cesium.BingMapsImageryProvider({\n                  url: 'https://dev.virtualearth.net',\n                  key: 'AipIE-pEoKccx-kC8G3D-45V3hl9hZxC-5vSXbMamybYjvJTXvoOYT7QeMqvFMGQ',\n                  mapStyle: Cesium.BingMapsStyle.AERIAL // Vista satélite sin fronteras\n                });\n                viewer.imageryLayers.addImageryProvider(bing);\n                imageLoadSuccess = true;\n              } catch (e2) {\n                console.warn('Error cargando mapas de Bing:', e2);\n                try {\n                  // Alternativa: mapas de Ion (imágenes de satélite)\n                  const ion = new Cesium.IonImageryProvider({ \n                    assetId: 3 // World Imagery\n                  });\n                  viewer.imageryLayers.addImageryProvider(ion);\n                  imageLoadSuccess = true;\n                } catch (e3) {\n                  console.error('Error cargando todas las opciones de imágenes:', e3);\n                  \n                  // Último recurso: cargar textura directa\n                  loadDirectTexture();\n                }\n              }\n            }\n            \n            // Si después de todo no tenemos imágenes, cargar la textura directamente\n            if (!imageLoadSuccess && viewer.imageryLayers.length === 0) {\n              loadDirectTexture();\n            }\n            \n            updateProgress('Configurando cámara...');\n            \n            // Configurar la cámara para una vista más centrada\n            setTimeout(function() {\n              try {\n                // Configurar una vista inicial simple y directa\n                viewer.camera.setView({\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\n                  orientation: {\n                    heading: 0.0,\n                    pitch: -Cesium.Math.PI_OVER_TWO,\n                    roll: 0.0\n                  }\n                });\n                \n                updateProgress('Activando características...');\n                \n                // Configurar sin rotación automática\n                setTimeout(function() {\n                  // Solo iniciamos monitoreo de posición, sin rotación automática\n                  try {\n                    // Desactivar rotación automática desde el principio\n                    autoRotate = false;\n                    \n                    // Iniciar comprobación periódica de estabilidad del globo\n                    startStabilityCheck();\n                    \n                    // Iniciar monitoreo de posición de cámara\n                    startCameraPositionMonitoring();\n                    \n                    // Informar que la carga básica está completa\n                    window.ReactNativeWebView.postMessage('loaded');\n                    \n                    // Ocultar overlay de carga\n                    document.getElementById('loadingOverlay').style.display = 'none';\n                  } catch (e) {\n                    console.error('Error al iniciar características:', e);\n                    // Seguimos mostrando el globo aunque falle\n                    window.ReactNativeWebView.postMessage('loaded');\n                    document.getElementById('loadingOverlay').style.display = 'none';\n                  }\n                }, 1000);\n              } catch (e) {\n                console.error('Error al configurar vista inicial:', e);\n                // Informar que se completó de todos modos\n                window.ReactNativeWebView.postMessage('loaded');\n                document.getElementById('loadingOverlay').style.display = 'none';\n              }\n            }, 1000);\n            \n            // Configurar interacción para móviles\n            viewer.scene.screenSpaceCameraController.minimumZoomDistance = 1000000; // 1000 km mínimo\n            viewer.scene.screenSpaceCameraController.maximumZoomDistance = 25000000; // 25000 km máximo\n            \n            // Configuración adicional para evitar saltos\n            viewer.scene.screenSpaceCameraController.inertiaSpin = 0.5; // Reducir inercia de giro\n            viewer.scene.screenSpaceCameraController.inertiaTranslate = 0.5; // Reducir inercia de desplazamiento\n            viewer.scene.screenSpaceCameraController.inertiaZoom = 0.5; // Reducir inercia de zoom\n            \n            // Evitar que ciertas regiones \"atraigan\" la cámara\n            viewer.scene.screenSpaceCameraController.enableCollisionDetection = false;\n            \n            // Limitar la velocidad de rotación\n            viewer.scene.screenSpaceCameraController.maximumMovementRatio = 0.1;\n            \n            // Desactivar efectos que podrían causar problemas\n            viewer.scene.globe.enableLighting = false;\n            viewer.scene.fog.enabled = false;\n            viewer.scene.globe.showGroundAtmosphere = false;\n            \n            // Forzar modo 3D estricto\n            viewer.scene.mode = Cesium.SceneMode.SCENE3D;\n            viewer.scene.morphComplete.addEventListener(function() {\n              viewer.scene.mode = Cesium.SceneMode.SCENE3D;\n            });\n            \n            // Configurar manipulación manual más suave\n            viewer.scene.screenSpaceCameraController.tiltEventTypes = [\n              Cesium.CameraEventType.MIDDLE_DRAG, \n              Cesium.CameraEventType.PINCH,\n              {\n                eventType: Cesium.CameraEventType.LEFT_DRAG,\n                modifier: Cesium.KeyboardEventModifier.CTRL\n              }\n            ];\n            \n            // Configurar rotación manual más suave\n            viewer.scene.screenSpaceCameraController.rotateEventTypes = [\n              Cesium.CameraEventType.LEFT_DRAG\n            ];\n            \n            // Configurar rotación automática\n            let autoRotate = true;\n            const rotationAxis = new Cesium.Cartesian3(0, 0, 1); // Eje Z (vertical)\n            let lastTime = Date.now();\n            \n            function startAutoRotation() {\n              // Detener cualquier rotación anterior si existe\n              if (window.rotationInterval) {\n                clearInterval(window.rotationInterval);\n              }\n              \n              // Velocidad de rotación en radianes por segundo\n              const rotationSpeed = -0.05 * Math.PI / 180.0;\n              let lastTimestamp = Date.now();\n              \n              // Usar requestAnimationFrame para mayor suavidad\n              function rotateCamera() {\n                if (!autoRotate) {\n                  window.requestAnimationFrame(rotateCamera);\n                  return;\n                }\n                \n                try {\n                  // Calcular tiempo delta\n                  const now = Date.now();\n                  const deltaTime = now - lastTimestamp;\n                  lastTimestamp = now;\n                  \n                  // Rotar la cámara alrededor del eje vertical (Z)\n                  viewer.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, rotationSpeed);\n                  \n                  // Asegurarse de que se renderice\n                  viewer.scene.requestRender();\n                  \n                  // Actualizar contador de rotación\n                  window.rotationCounter = (window.rotationCounter || 0) + 1;\n                } catch (e) {\n                  console.error('Error en rotación:', e);\n                }\n                \n                // Continuar la animación\n                window.requestAnimationFrame(rotateCamera);\n              }\n              \n              // Iniciar la animación\n              window.requestAnimationFrame(rotateCamera);\n            }\n            \n            // Función para verificar periódicamente la estabilidad del globo\n            function startStabilityCheck() {\n              // Ejecutar cada 10 segundos\n              setInterval(function() {\n                try {\n                  // Verificar si el globo sigue visible\n                  if (!viewer.scene.globe.show) {\n                    viewer.scene.globe.show = true;\n                  }\n                } catch (e) {\n                  console.error('Error en verificación de estabilidad:', e);\n                }\n              }, 10000);\n            }\n            \n            // Función para monitorear la posición de la cámara y enviarla al componente React Native\n            function startCameraPositionMonitoring() {\n              setInterval(function() {\n                try {\n                  if (!viewer || !viewer.scene || !viewer.camera) return;\n                  \n                  // Obtener la posición de la cámara en coordenadas geográficas\n                  const position = viewer.camera.positionCartographic;\n                  const longitude = Cesium.Math.toDegrees(position.longitude);\n                  const latitude = Cesium.Math.toDegrees(position.latitude);\n                  const altitude = position.height;\n                  \n                  // Calcular un valor aproximado de zoom basado en la altura\n                  // Valores aproximados: 20000000 = zoom 1, 5000000 = zoom 4, 1000000 = zoom 8\n                  const zoom = Math.max(1, Math.log(20000000 / Math.max(altitude, 10000)) * 2);\n                  \n                  // Crear objeto con la información de posición\n                  const positionData = {\n                    longitude: longitude,\n                    latitude: latitude,\n                    altitude: altitude,\n                    zoom: zoom,\n                    heading: viewer.camera.heading,\n                    pitch: viewer.camera.pitch,\n                    roll: viewer.camera.roll\n                  };\n                  \n                  // Enviar al componente React Native\n                  window.ReactNativeWebView.postMessage('position:' + JSON.stringify(positionData));\n                } catch (e) {\n                  console.error('Error al monitorear posición de cámara:', e);\n                }\n              }, 500); // Actualizar cada 500ms\n            }\n            \n            // Timeout para verificar si realmente tenemos un globo visible\n            setTimeout(function() {\n              // Verificar si tenemos capas de imagen o si el globo está visible\n              if ((viewer.imageryLayers.length === 0 || !viewer.scene.globe.show) && \n                  document.getElementById('loadingOverlay').style.display !== 'none') {\n                \n                console.warn('No se ha detectado un globo visible, aplicando soluciones de respaldo');\n                \n                // Asegurar que el globo es visible\n                viewer.scene.globe.show = true;\n                \n                // Usar color azul y cargar textura directa\n                viewer.scene.globe.baseColor = Cesium.Color.BLUE;\n                loadDirectTexture();\n                \n                // Ocultar overlay después de intentarlo todo\n                setTimeout(function() {\n                  document.getElementById('loadingOverlay').style.display = 'none';\n                  window.ReactNativeWebView.postMessage('loaded');\n                }, 3000);\n              }\n            }, 10000);\n            \n            // Manejar interacción del usuario\n            let touchStarted = false;\n            \n            // Eventos táctiles simplificados, sin rotación automática\n            viewer.screenSpaceEventHandler.setInputAction(function() {\n              touchStarted = true;\n              \n              // Ya no es necesario manejar rotación automática\n            }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n            \n            viewer.screenSpaceEventHandler.setInputAction(function() {\n              touchStarted = false;\n              \n              // Ya no es necesario reactivar rotación automática\n            }, Cesium.ScreenSpaceEventType.LEFT_UP);\n            \n            // Botón para centrar el globo (único botón que mantenemos)\n            const centerButton = document.createElement('button');\n            centerButton.textContent = 'Centrar Globo';\n            centerButton.style.position = 'absolute';\n            centerButton.style.bottom = '20px';\n            centerButton.style.right = '10px';\n            centerButton.style.zIndex = '1000';\n            centerButton.style.padding = '8px';\n            centerButton.style.backgroundColor = '#4CAF50';\n            centerButton.style.color = 'white';\n            centerButton.style.border = 'none';\n            centerButton.style.borderRadius = '4px';\n            centerButton.style.fontWeight = 'bold';\n            centerButton.onclick = function() {\n              // Llamar a la función de centrado\n              centerGlobe();\n            };\n            document.body.appendChild(centerButton);\n          } catch (error) {\n            console.error('Error al inicializar Cesium:', error);\n            window.ReactNativeWebView.postMessage('error:' + error);\n          }\n        }\n        \n        // Timeout de seguridad para asegurar que se muestra algo\n        setTimeout(function() {\n          if (document.getElementById('loadingOverlay').style.display !== 'none') {\n            updateProgress('Carga completa (timeout)');\n            document.getElementById('loadingOverlay').style.display = 'none';\n            window.ReactNativeWebView.postMessage('loaded');\n          }\n        }, 30000);\n        \n        // Manejo de errores global\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error('Error:', message);\n          \n          // Manejar errores de propiedad de solo lectura\n          if (message && (\n            message.includes('Cannot assign to read only property') || \n            message.toString().includes('normalize') ||\n            message.toString().includes('Cartesian3')\n          )) {\n            console.warn('Detectado error de propiedades de solo lectura, intentando recuperar...');\n            \n            // Reiniciar la vista de la cámara de forma segura\n            try {\n              if (window.viewer) {\n                window.viewer.camera.flyTo({\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\n                  orientation: {\n                    heading: 0,\n                    pitch: -Cesium.Math.PI_OVER_TWO,\n                    roll: 0\n                  },\n                  duration: 0.5\n                });\n              }\n            } catch(e) {\n              console.error('Error al recuperar la vista:', e);\n            }\n            \n            return true; // Evita propagar el error\n          }\n          \n          // Solo reportar errores significativos que no sean de workers\n          if (!message.includes('Worker') && !message.includes('importScripts')) {\n            window.ReactNativeWebView.postMessage('error:' + message);\n          }\n          return true;\n        };\n      </script>\n    </body>\n    </html>\n  `;\n  const handleWebViewMessage = event => {\n    const message = event.nativeEvent.data;\n    if (message.startsWith('position:')) {\n      try {\n        const positionData = JSON.parse(message.substring(9));\n        setCurrentPosition(positionData);\n        if (positionData.altitude < MAP_VIEW_DISTANCE_THRESHOLD && !showMapView) {\n          setShowMapView(true);\n          if (webViewRef.current) {\n            webViewRef.current.injectJavaScript(`\n              (function() {\n                try {\n                  // Detener la rotación automática\n                  autoRotate = false;\n                  console.log('Rotación automática detenida al mostrar el mapa');\n                } catch(e) {\n                  console.error('Error al detener rotación:', e);\n                }\n                return true;\n              })();\n            `);\n          }\n        } else if (positionData.altitude > GLOBE_VIEW_DISTANCE_THRESHOLD && showMapView) {\n          setShowMapView(false);\n        }\n      } catch (e) {\n        console.error('Error al procesar datos de posición:', e);\n      }\n    } else if (message === 'loaded') {\n      console.log('Cesium cargado correctamente');\n      setLoading(false);\n      if (loadTimeoutRef.current) {\n        clearTimeout(loadTimeoutRef.current);\n      }\n    } else if (message.startsWith('error:')) {\n      console.error('Error en Cesium WebView:', message.substring(6));\n      setError(message.substring(6));\n      handleError(message.substring(6));\n    }\n  };\n  return _jsxDEV(View, {\n    style: [styles.container, props.style],\n    children: [!useFallbackView && _jsxDEV(_Fragment, {\n      children: [_jsxDEV(WebView, {\n        ref: webViewRef,\n        style: [styles.webview, showMapView ? styles.hiddenView : null],\n        originWhitelist: ['*'],\n        source: {\n          html: htmlContent\n        },\n        javaScriptEnabled: true,\n        domStorageEnabled: true,\n        allowFileAccess: true,\n        allowUniversalAccessFromFileURLs: true,\n        allowFileAccessFromFileURLs: true,\n        cacheEnabled: true,\n        javaScriptCanOpenWindowsAutomatically: true,\n        scrollEnabled: false,\n        bounces: false,\n        showsHorizontalScrollIndicator: false,\n        showsVerticalScrollIndicator: false,\n        onShouldStartLoadWithRequest: () => true,\n        startInLoadingState: true,\n        renderLoading: () => _jsxDEV(View, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 34\n        }, this),\n        onMessage: handleWebViewMessage,\n        onError: syntheticEvent => {\n          const {\n            nativeEvent\n          } = syntheticEvent;\n          console.error('WebView error:', nativeEvent);\n          handleError(`WebView error: ${nativeEvent.description}`);\n        },\n        onHttpError: syntheticEvent => {\n          const {\n            nativeEvent\n          } = syntheticEvent;\n          console.error('WebView HTTP error:', nativeEvent);\n          handleError(`WebView HTTP error: ${nativeEvent.statusCode}`);\n        },\n        onContentProcessDidTerminate: () => {\n          console.warn('WebView process terminated, falling back to simple globe');\n          handleError('La visualización 3D se cerró inesperadamente');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 11\n      }, this), showMapView && _jsxDEV(View, {\n        style: styles.mapContainer,\n        children: [_jsxDEV(MapView, {\n          ref: mapViewRef,\n          style: styles.map,\n          provider: PROVIDER_GOOGLE,\n          mapType: \"standard\",\n          initialRegion: {\n            latitude: currentPosition.latitude,\n            longitude: currentPosition.longitude,\n            latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\n            longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom))\n          },\n          onMapReady: () => {\n            if (mapViewRef.current) {\n              mapViewRef.current.animateToRegion({\n                latitude: currentPosition.latitude,\n                longitude: currentPosition.longitude,\n                latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\n                longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom))\n              }, 500);\n            }\n          },\n          onRegionChangeComplete: region => {\n            setCurrentPosition(prevState => Object.assign({}, prevState, {\n              latitude: region.latitude,\n              longitude: region.longitude,\n              zoom: calculateZoomFromRegion(region)\n            }));\n            const zoom = calculateZoomFromRegion(region);\n            if (zoom < 5) {\n              setShowMapView(false);\n              if (webViewRef.current) {\n                webViewRef.current.injectJavaScript(`\n                        (function() {\n                          try {\n                            if (window.viewer) {\n                              window.viewer.camera.flyTo({\n                                destination: Cesium.Cartesian3.fromDegrees(\n                                  ${region.longitude}, \n                                  ${region.latitude}, \n                                  ${GLOBE_VIEW_DISTANCE_THRESHOLD}\n                                ),\n                                orientation: {\n                                  heading: 0.0,\n                                  pitch: -Cesium.Math.PI_OVER_TWO,\n                                  roll: 0.0\n                                },\n                                duration: 1.0\n                              });\n                            }\n                          } catch(e) {\n                            console.error('Error al actualizar la vista del globo', e);\n                          }\n                          return true;\n                        })();\n                      `);\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 15\n        }, this), _jsxDEV(TouchableOpacity, {\n          style: styles.backToGlobeButton,\n          onPress: () => {\n            setShowMapView(false);\n            if (webViewRef.current && mapViewRef.current) {\n              mapViewRef.current.getCamera().then(camera => {\n                if (camera && webViewRef.current) {\n                  webViewRef.current.injectJavaScript(`\n                          (function() {\n                            try {\n                              if (window.viewer) {\n                                window.viewer.camera.flyTo({\n                                  destination: Cesium.Cartesian3.fromDegrees(\n                                    ${camera.center.longitude}, \n                                    ${camera.center.latitude}, \n                                    ${GLOBE_VIEW_DISTANCE_THRESHOLD}\n                                  ),\n                                  orientation: {\n                                    heading: 0.0,\n                                    pitch: -Cesium.Math.PI_OVER_TWO,\n                                    roll: 0.0\n                                  },\n                                  duration: 1.0\n                                });\n                              }\n                            } catch(e) {\n                              console.error('Error al actualizar la vista del globo', e);\n                            }\n                            return true;\n                          })();\n                        `);\n                }\n              }).catch(err => {\n                console.error('Error al obtener la cámara de MapView:', err);\n              });\n            }\n          },\n          children: _jsxDEV(Text, {\n            style: styles.backToGlobeButtonText,\n            children: \"Volver al Globo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), useFallbackView && _jsxDEV(FallbackGlobeView, {\n      style: props.style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 9\n    }, this), useFallbackView && _jsxDEV(View, {\n      style: styles.fallbackButtonContainer,\n      children: _jsxDEV(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: retryCesium,\n        children: _jsxDEV(Text, {\n          style: styles.retryButtonText,\n          children: \"Intentar cargar mapa 3D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1152,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1147,\n      columnNumber: 9\n    }, this), error && !useFallbackView && _jsxDEV(View, {\n      style: styles.errorContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.errorText,\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 11\n      }, this), _jsxDEV(Text, {\n        style: styles.errorSubtext,\n        children: \"Cambiando a modo alternativo...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 985,\n    columnNumber: 5\n  }, this);\n};\nconst calculateZoomFromRegion = region => {\n  const latDelta = region.latitudeDelta;\n  const lngDelta = region.longitudeDelta;\n  const zoomLat = Math.log(360 / latDelta) / Math.LN2;\n  const zoomLng = Math.log(360 / lngDelta) / Math.LN2;\n  return Math.min(zoomLat, zoomLng);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    position: 'relative'\n  },\n  webview: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  errorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  errorText: {\n    color: '#ff6b6b',\n    fontSize: 18,\n    marginBottom: 10,\n    textAlign: 'center'\n  },\n  errorSubtext: {\n    color: '#fff',\n    fontSize: 14,\n    textAlign: 'center'\n  },\n  fallbackButtonContainer: {\n    position: 'absolute',\n    top: 20,\n    right: 20,\n    zIndex: 1000\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  retryButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  mapContainer: {\n    flex: 1,\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  map: {\n    flex: 1\n  },\n  backToGlobeButton: {\n    position: 'absolute',\n    top: 20,\n    right: 20,\n    zIndex: 1000,\n    padding: 10,\n    backgroundColor: '#4CAF50',\n    borderRadius: 5\n  },\n  backToGlobeButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n  hiddenView: {\n    display: 'none'\n  }\n});\nexport default GlobeView;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","StyleSheet","Text","Platform","Dimensions","TouchableOpacity","WebView","FallbackGlobeView","MapView","PROVIDER_GOOGLE","Location","jsxDEV","_jsxDEV","Fragment","_Fragment","USE_FALLBACK","TIMEOUT_SECONDS","MAP_VIEW_DISTANCE_THRESHOLD","GLOBE_VIEW_DISTANCE_THRESHOLD","GlobeView","props","loading","setLoading","error","setError","useFallbackView","setUseFallbackView","showMapView","setShowMapView","currentPosition","setCurrentPosition","latitude","longitude","altitude","zoom","userLocation","setUserLocation","locationPermission","setLocationPermission","isLoadingLocation","setIsLoadingLocation","webViewRef","loadTimeoutRef","cesiumContainerRef","mapViewRef","getUserLocation","status","requestForegroundPermissionsAsync","location","getCurrentPositionAsync","accuracy","Accuracy","Highest","timeout","coords","console","log","err","goToUserLocation","prevState","Object","assign","current","setTimeout","animateToRegion","latitudeDelta","longitudeDelta","injectJavaScript","OS","warn","clearTimeout","undefined","initialDimensions","get","dimensionsChangeHandler","window","Math","max","subscription","addEventListener","remove","handleError","errorMsg","includes","reload","retryCesium","style","styles","container","children","width","height","id","fileName","_jsxFileName","lineNumber","columnNumber","fallbackButtonContainer","retryButton","onPress","retryButtonText","htmlContent","handleWebViewMessage","event","message","nativeEvent","data","startsWith","positionData","JSON","parse","substring","e","ref","webview","hiddenView","originWhitelist","source","html","javaScriptEnabled","domStorageEnabled","allowFileAccess","allowUniversalAccessFromFileURLs","allowFileAccessFromFileURLs","cacheEnabled","javaScriptCanOpenWindowsAutomatically","scrollEnabled","bounces","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","onShouldStartLoadWithRequest","startInLoadingState","renderLoading","onMessage","onError","syntheticEvent","description","onHttpError","statusCode","onContentProcessDidTerminate","mapContainer","map","provider","mapType","initialRegion","onMapReady","onRegionChangeComplete","region","calculateZoomFromRegion","backToGlobeButton","getCamera","then","camera","center","catch","backToGlobeButtonText","errorContainer","errorText","errorSubtext","latDelta","lngDelta","zoomLat","LN2","zoomLng","min","create","flex","backgroundColor","position","top","left","right","bottom","justifyContent","alignItems","padding","color","fontSize","marginBottom","textAlign","zIndex","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","fontWeight","display"],"sources":["C:/Users/migue/TravelQuest/src/components/GlobeView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, StyleSheet, Text, ActivityIndicator, Platform, Animated, Easing, Dimensions, PanResponder, TouchableOpacity } from 'react-native';\r\nimport WebView, { WebViewMessageEvent } from 'react-native-webview';\r\nimport FallbackGlobeView from './FallbackGlobeView';\r\nimport MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-maps';\r\nimport * as Location from 'expo-location';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n\r\n// Declaración de tipos para Cesium\r\ndeclare global {\r\n  interface Window {\r\n    Cesium: any;\r\n    rotationInterval: any;\r\n    rotationCounter: number;\r\n    viewer: any;\r\n  }\r\n}\r\n\r\n// Bandera para usar el globo de respaldo si hay problemas con WebView\r\nconst USE_FALLBACK = false; // Intentaremos usar Cesium a través de WebView\r\nconst TIMEOUT_SECONDS = 120; // Aumentar tiempo de espera a 2 minutos para carga completa\r\n\r\n// Distancias para cambio de vista\r\nconst MAP_VIEW_DISTANCE_THRESHOLD = 2000000; // Mostrar mapa 2D cuando se acerca a menos de 2000 km\r\nconst GLOBE_VIEW_DISTANCE_THRESHOLD = 3000000; // Volver a globo 3D cuando se aleja a más de 3000 km\r\n\r\nconst GlobeView = (props: { style?: any }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [useFallbackView, setUseFallbackView] = useState(USE_FALLBACK);\r\n  const [showMapView, setShowMapView] = useState(false); // Estado para controlar qué vista mostrar\r\n  const [currentPosition, setCurrentPosition] = useState({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    altitude: 15000000,\r\n    zoom: 2\r\n  });\r\n  const [userLocation, setUserLocation] = useState<{latitude: number, longitude: number} | null>(null);\r\n  const [locationPermission, setLocationPermission] = useState<boolean>(false);\r\n  const [isLoadingLocation, setIsLoadingLocation] = useState<boolean>(true);\r\n  \r\n  const webViewRef = useRef<WebView>(null);\r\n  const loadTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const cesiumContainerRef = useRef<HTMLDivElement>(null);\r\n  const mapViewRef = useRef<MapView>(null);\r\n\r\n  // Función para obtener la ubicación del usuario\r\n  const getUserLocation = async () => {\r\n    setIsLoadingLocation(true);\r\n    try {\r\n      const { status } = await Location.requestForegroundPermissionsAsync();\r\n      setLocationPermission(status === 'granted');\r\n      \r\n      if (status === 'granted') {\r\n        const location = await Location.getCurrentPositionAsync({\r\n          accuracy: Location.Accuracy.Highest,\r\n          timeout: 15000\r\n        });\r\n        \r\n        setUserLocation({\r\n          latitude: location.coords.latitude,\r\n          longitude: location.coords.longitude\r\n        });\r\n        \r\n        // Inicialmente, centramos el globo en un punto alejado\r\n        // No hacemos zoom directo a la ubicación hasta que el usuario lo solicite\r\n      } else {\r\n        console.log('Permiso de ubicación denegado');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al obtener la ubicación:', err);\r\n    } finally {\r\n      setIsLoadingLocation(false);\r\n    }\r\n  };\r\n\r\n  // Función para ir a la ubicación del usuario\r\n  const goToUserLocation = () => {\r\n    if (!userLocation) return;\r\n    \r\n    // Si estamos en la vista de globo, cambiamos a la vista de mapa con zoom\r\n    if (!showMapView) {\r\n      // Primero actualizamos la posición para que el WebView sepa dónde mirar\r\n      setCurrentPosition(prevState => ({\r\n        ...prevState,\r\n        latitude: userLocation.latitude,\r\n        longitude: userLocation.longitude,\r\n        altitude: 1000000, // Altura para iniciar la transición\r\n        zoom: 12\r\n      }));\r\n      \r\n      // Luego activamos la vista de mapa\r\n      setShowMapView(true);\r\n      \r\n      // Animamos el mapa a la ubicación del usuario\r\n      if (mapViewRef.current) {\r\n        setTimeout(() => {\r\n          mapViewRef.current?.animateToRegion({\r\n            latitude: userLocation.latitude,\r\n            longitude: userLocation.longitude,\r\n            latitudeDelta: 0.01, // Zoom cercano\r\n            longitudeDelta: 0.01\r\n          }, 1000);\r\n        }, 500);\r\n      }\r\n      \r\n      // Detenemos rotación en el WebView\r\n      if (webViewRef.current) {\r\n        webViewRef.current.injectJavaScript(`\r\n          (function() {\r\n            try {\r\n              autoRotate = false;\r\n              console.log('Rotación automática detenida al ir a la ubicación');\r\n            } catch(e) {\r\n              console.error('Error al detener rotación:', e);\r\n            }\r\n            return true;\r\n          })();\r\n        `);\r\n      }\r\n    } else {\r\n      // Si ya estamos en el mapa, solo hacemos zoom a la ubicación\r\n      if (mapViewRef.current) {\r\n        mapViewRef.current.animateToRegion({\r\n          latitude: userLocation.latitude,\r\n          longitude: userLocation.longitude,\r\n          latitudeDelta: 0.01, // Zoom cercano\r\n          longitudeDelta: 0.01\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Efecto para obtener la ubicación del usuario al inicio\r\n  useEffect(() => {\r\n    getUserLocation();\r\n  }, []);\r\n\r\n  // Efecto para configurar un timeout para cambiar a la vista de respaldo si tarda demasiado\r\n  useEffect(() => {\r\n    if (!useFallbackView && Platform.OS !== 'web') {\r\n      // Configurar timeout más largo\r\n      loadTimeoutRef.current = setTimeout(() => {\r\n        console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\r\n        setUseFallbackView(true);\r\n      }, TIMEOUT_SECONDS * 1000); // 120 segundos de espera para cargar Cesium\r\n\r\n      return () => {\r\n        if (loadTimeoutRef.current) {\r\n          clearTimeout(loadTimeoutRef.current);\r\n        }\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [useFallbackView]);\r\n\r\n  // Efecto para manejar cambios de orientación\r\n  useEffect(() => {\r\n    if (Platform.OS !== 'web') {\r\n      // Obtener dimensiones iniciales\r\n      const initialDimensions = Dimensions.get('window');\r\n      \r\n      // Función para manejar cambios de dimensiones\r\n      const dimensionsChangeHandler = ({ window }: { window: { width: number; height: number } }) => {\r\n        // Si estamos en el mapa, actualizar la región\r\n        if (showMapView && mapViewRef.current) {\r\n          setTimeout(() => {\r\n            mapViewRef.current?.animateToRegion({\r\n              latitude: currentPosition.latitude,\r\n              longitude: currentPosition.longitude,\r\n              latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\r\n              longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom))\r\n            }, 300);\r\n          }, 300);\r\n        }\r\n      };\r\n      \r\n      // Añadir listener para cambios de dimensiones\r\n      const subscription = Dimensions.addEventListener('change', dimensionsChangeHandler);\r\n      \r\n      // Limpiar listener cuando el componente se desmonte\r\n      return () => {\r\n        subscription.remove();\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [showMapView, currentPosition]);\r\n\r\n  // Función para manejar errores y cambiar a la vista de respaldo\r\n  const handleError = (errorMsg: string) => {\r\n    // Ignorar errores específicos de Web Workers que sabemos que no son críticos\r\n    if (\r\n      errorMsg.includes('importScripts') || \r\n      errorMsg.includes('WorkerGlobalScope') ||\r\n      errorMsg.includes('transferTypedArrayTest') ||\r\n      errorMsg.includes('createVerticesFromHeightmap')\r\n    ) {\r\n      console.warn('Ignorando error no crítico de Web Worker:', errorMsg);\r\n      return;\r\n    }\r\n    \r\n    // Ignorar errores de normalización o propiedades de solo lectura\r\n    if (\r\n      errorMsg.includes('Cannot assign to read only property') ||\r\n      errorMsg.includes('normalize')\r\n    ) {\r\n      console.warn('Ignorando error de asignación a propiedad de solo lectura:', errorMsg);\r\n      // Intentar recargar el contenido del WebView sin cambiar a la vista de respaldo\r\n      if (webViewRef.current) {\r\n        console.log('Recargando WebView después de error...');\r\n        webViewRef.current.reload();\r\n      }\r\n      return;\r\n    }\r\n    \r\n    console.error('Error en GlobeView:', errorMsg);\r\n    setError(errorMsg);\r\n    // Cambiar a la vista de respaldo después de un breve retraso\r\n    setTimeout(() => {\r\n      setUseFallbackView(true);\r\n    }, 1000);\r\n  };\r\n\r\n  // Función para reintentar cargar Cesium\r\n  const retryCesium = () => {\r\n    setUseFallbackView(false);\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    // Configurar nuevo timeout\r\n    if (loadTimeoutRef.current) {\r\n      clearTimeout(loadTimeoutRef.current);\r\n    }\r\n    loadTimeoutRef.current = setTimeout(() => {\r\n      console.warn('Timeout en carga de Cesium, cambiando a vista de respaldo');\r\n      setUseFallbackView(true);\r\n    }, TIMEOUT_SECONDS * 1000);\r\n  };\r\n\r\n  // Si estamos en web, usamos el componente Cesium directamente\r\n  if (Platform.OS === 'web') {\r\n    return (\r\n      <View style={[styles.container, props.style]}>\r\n        <div style={{ width: '100%', height: '100%' }} id=\"cesiumContainer\"></div>\r\n      </View>\r\n    );\r\n  }\r\n  \r\n  // Si hay problemas con WebView o estamos en modo fallback, usamos el globo alternativo\r\n  if (useFallbackView) {\r\n    return (\r\n      <View style={[styles.container, props.style]}>\r\n        <FallbackGlobeView style={props.style} />\r\n        <View style={styles.fallbackButtonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.retryButton}\r\n            onPress={retryCesium}\r\n          >\r\n            <Text style={styles.retryButtonText}>Intentar cargar mapa 3D</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // Crear versión optimizada del HTML para móviles con solución para errores de workers\r\n  const htmlContent = `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\r\n      <title>Cesium Globe</title>\r\n      <style>\r\n        html, body {\r\n          width: 100%;\r\n          height: 100%;\r\n          margin: 0;\r\n          padding: 0;\r\n          overflow: hidden;\r\n          background-color: black;\r\n          touch-action: manipulation;\r\n          position: fixed;\r\n        }\r\n        #cesiumContainer {\r\n          width: 100%;\r\n          height: 100%;\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n        .cesium-widget-credits, .cesium-viewer-bottom, .cesium-viewer-toolbar {\r\n          display: none !important;\r\n        }\r\n        .loading-overlay {\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgba(0,0,0,0.8);\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          z-index: 1000;\r\n          color: white;\r\n          font-family: Arial, sans-serif;\r\n        }\r\n        .loading-indicator {\r\n          text-align: center;\r\n        }\r\n        .loading-spinner {\r\n          width: 60px;\r\n          height: 60px;\r\n          border: 5px solid rgba(255,255,255,0.3);\r\n          border-radius: 50%;\r\n          border-top-color: #4CAF50;\r\n          animation: spin 1s linear infinite;\r\n          margin: 0 auto 20px;\r\n        }\r\n        @keyframes spin {\r\n          to { transform: rotate(360deg); }\r\n        }\r\n      </style>\r\n    </head>\r\n    <body>\r\n      <div id=\"cesiumContainer\">\r\n        <!-- Eliminamos el div de depuración visible -->\r\n      </div>\r\n      <div id=\"loadingOverlay\" class=\"loading-overlay\">\r\n        <div class=\"loading-indicator\">\r\n          <div class=\"loading-spinner\"></div>\r\n          <div style=\"font-size: 18px; font-weight: bold;\">Cargando globo terráqueo</div>\r\n          <div id=\"loading-progress\" style=\"margin-top: 15px; font-size: 14px;\">Iniciando...</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <script>\r\n        // Configurar base URL para Cesium ANTES de cargar la biblioteca\r\n        window.CESIUM_BASE_URL = 'https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/';\r\n        \r\n        // Variable para controlar el nivel de detalle según el rendimiento\r\n        let isLowPerformanceDevice = false;\r\n        \r\n        // Detectar rendimiento del dispositivo\r\n        try {\r\n          const canvas = document.createElement('canvas');\r\n          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n          \r\n          if (!gl) {\r\n            isLowPerformanceDevice = true;\r\n          } else {\r\n            // Verificar capacidades básicas\r\n            const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n            const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n            \r\n            // Si las capacidades son limitadas, considerarlo dispositivo de rendimiento bajo\r\n            if (maxTextureSize < 4096 || maxTextureUnits < 8) {\r\n              isLowPerformanceDevice = true;\r\n            }\r\n          }\r\n        } catch(e) {\r\n          console.warn('Error detectando rendimiento del dispositivo:', e);\r\n          isLowPerformanceDevice = true; // Asumir bajo rendimiento por seguridad\r\n        }\r\n        \r\n        // Actualizar el progreso de carga\r\n        function updateProgress(text) {\r\n          document.getElementById('loading-progress').textContent = text;\r\n        }\r\n        \r\n        // Cargar scripts y estilos\r\n        function loadScript(url, callback) {\r\n          var script = document.createElement('script');\r\n          script.type = 'text/javascript';\r\n          script.src = url;\r\n          script.onload = callback;\r\n          script.onerror = function() {\r\n            window.ReactNativeWebView.postMessage('error:No se pudo cargar Cesium. Verifica tu conexión a Internet.');\r\n          };\r\n          document.head.appendChild(script);\r\n        }\r\n        \r\n        function loadStyles(url) {\r\n          var link = document.createElement('link');\r\n          link.rel = 'stylesheet';\r\n          link.href = url;\r\n          document.head.appendChild(link);\r\n        }\r\n\r\n        // Iniciar la carga de Cesium (versión 1.83 más compatible con WebView)\r\n        updateProgress('Descargando recursos...');\r\n        // Primero configuramos el entorno para evitar errores de workers\r\n        window.BUILD_WORKER = function(){return null;};\r\n        window.CESIUM_ON_WORKER_BOOT = function(){};\r\n        \r\n        // Cargamos una versión más antigua de Cesium que funciona mejor en WebView\r\n        loadScript('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Cesium.js', function() {\r\n          updateProgress('Cesium cargado. Inicializando...');\r\n          loadStyles('https://cesium.com/downloads/cesiumjs/releases/1.81/Build/Cesium/Widgets/widgets.css');\r\n          \r\n          // Pequeño retraso para asegurar que Cesium esté listo\r\n          setTimeout(function() {\r\n            try {\r\n              initCesium();\r\n              \r\n              // Forzar una actualización del tamaño del canvas después de la inicialización\r\n              setTimeout(function() {\r\n                if (window.viewer) {\r\n                  // Llamar de nuevo a centerGlobe después de la carga para asegurar la posición\r\n                  if (typeof window.centerGlobe === 'function') {\r\n                    window.centerGlobe();\r\n                  }\r\n                  \r\n                  // Asegurar que el globo es visible\r\n                  window.viewer.scene.globe.show = true;\r\n                  \r\n                  // Forzar renderizado\r\n                  window.viewer.scene.requestRender();\r\n                }\r\n              }, 2000);\r\n            } catch(e) {\r\n              console.error('Error al inicializar Cesium:', e);\r\n              window.ReactNativeWebView.postMessage('error:' + e);\r\n            }\r\n          }, 500);\r\n        });\r\n        \r\n        function initCesium() {\r\n          try {\r\n            console.log('Inicializando Cesium...');\r\n            \r\n            // Token de Cesium Ion\r\n            Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNmY5ZTNmZS1hMGRkLTQyZjQtYWQ1NS1lODYwZTcxNTRiMjMiLCJpZCI6MjAxNDM5LCJpYXQiOjE3MTMxODg0Njd9.ckUMa1Nb8MvXb2EYMy01bIPBOhrYmFbSw0RPiBP70oI';\r\n            \r\n            updateProgress('Creando visor...');\r\n            \r\n            // Desactivar Web Workers completamente para evitar los errores\r\n            Cesium.FeatureDetection.supportsWebWorkers = function() { return false; };\r\n            \r\n            // Inicialización del visor de Cesium con opciones simplificadas\r\n            window.viewer = new Cesium.Viewer('cesiumContainer', {\r\n              animation: false,\r\n              baseLayerPicker: false,\r\n              fullscreenButton: false,\r\n              geocoder: false,\r\n              homeButton: false,\r\n              infoBox: false,\r\n              sceneModePicker: false,\r\n              selectionIndicator: false,\r\n              timeline: false,\r\n              navigationHelpButton: false,\r\n              navigationInstructionsInitiallyVisible: false,\r\n              scene3DOnly: true,\r\n              requestRenderMode: false, // Desactivar requestRenderMode para asegurar renderizado continuo\r\n              maximumRenderTimeChange: Infinity,\r\n              terrainProvider: new Cesium.EllipsoidTerrainProvider(), // Usar terreno simple desde el inicio\r\n              imageryProvider: false, // Sin imagen inicial, las añadiremos manualmente\r\n              contextOptions: {\r\n                webgl: {\r\n                  alpha: false, // Usar fondo opaco\r\n                  antialias: true, // Mejorar calidad visual\r\n                  failIfMajorPerformanceCaveat: false\r\n                }\r\n              }\r\n            });\r\n            \r\n            // Guardar variable local para uso interno\r\n            const viewer = window.viewer;\r\n            \r\n            // Verificar que el visor se creó correctamente\r\n            if (!viewer || !viewer.scene) {\r\n              throw new Error('No se pudo crear el visor Cesium');\r\n            }\r\n            \r\n            // Eliminar la extensión de CesiumInspector\r\n            // Forzar renderizado de frames incluso sin cambios\r\n            viewer.scene.requestRenderMode = false;\r\n            \r\n            // Ocultar créditos\r\n            viewer.cesiumWidget.creditContainer.style.display = 'none';\r\n            \r\n            // Eliminar toda la parte de depuración móvil\r\n            updateProgress('Aplicando configuración...');\r\n            \r\n            // Aplicar optimizaciones extremas para móviles\r\n            viewer.scene.fog.enabled = false;\r\n            viewer.scene.globe.maximumScreenSpaceError = isLowPerformanceDevice ? 12 : 8; \r\n            viewer.targetFrameRate = isLowPerformanceDevice ? 24 : 30;\r\n            viewer.resolutionScale = isLowPerformanceDevice ? 0.5 : 0.7;\r\n            \r\n            // Hacer visible el globo\r\n            viewer.scene.globe.show = true;\r\n            viewer.scene.globe.baseColor = Cesium.Color.BLUE;\r\n            viewer.scene.backgroundColor = Cesium.Color.BLACK;\r\n            \r\n            // Ajustar el tamaño y posición de la escena para centrar el globo\r\n            function centerGlobe() {\r\n              try {\r\n                // Forzar que el canvas tenga el tamaño correcto\r\n                const canvas = viewer.scene.canvas;\r\n                if (canvas) {\r\n                  canvas.width = window.innerWidth;\r\n                  canvas.height = window.innerHeight;\r\n                  canvas.style.width = '100%';\r\n                  canvas.style.height = '100%';\r\n                  \r\n                  // Actualizar la matriz de proyección\r\n                  viewer.scene.camera.frustum.aspectRatio = canvas.clientWidth / canvas.clientHeight;\r\n                }\r\n                \r\n                // Utilizar flyTo en lugar de lookAt para evitar problemas con vectores\r\n                viewer.camera.flyTo({\r\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\r\n                  orientation: {\r\n                    heading: Cesium.Math.toRadians(0.0),\r\n                    pitch: Cesium.Math.toRadians(-90.0),\r\n                    roll: 0.0\r\n                  },\r\n                  duration: 0.5, // Más rápido para respuesta inmediata\r\n                  complete: function() {\r\n                    // Forzar un repintado después de centrar\r\n                    viewer.scene.requestRender();\r\n                  }\r\n                });\r\n              } catch (e) {\r\n                console.warn('Error al centrar el globo:', e);\r\n              }\r\n            }\r\n            \r\n            // Exponer la función globalmente\r\n            window.centerGlobe = centerGlobe;\r\n            \r\n            // Llamar a centrarlo inicialmente\r\n            centerGlobe();\r\n            \r\n            // Centrar cuando cambie el tamaño de la ventana\r\n            window.addEventListener('resize', centerGlobe);\r\n            \r\n            // Función para cargar textura directa si todo lo demás falla\r\n            function loadDirectTexture() {\r\n              updateProgress('Cargando textura directa...');\r\n              \r\n              // Intentar cargar una textura de la Tierra directamente\r\n              const earthTexture = new Image();\r\n              earthTexture.crossOrigin = 'anonymous';\r\n              earthTexture.onload = function() {\r\n                try {\r\n                  // Crear material con la textura\r\n                  const material = new Cesium.Material({\r\n                    fabric: {\r\n                      type: 'DiffuseMap',\r\n                      uniforms: {\r\n                        image: earthTexture\r\n                      }\r\n                    }\r\n                  });\r\n                  \r\n                  // Aplicar al globo\r\n                  viewer.scene.globe.material = material;\r\n                  updateProgress('Textura cargada con éxito');\r\n                } catch (e) {\r\n                  console.error('Error al aplicar textura:', e);\r\n                }\r\n              };\r\n              \r\n              earthTexture.onerror = function() {\r\n                console.error('Error al cargar la textura de la Tierra');\r\n              };\r\n              \r\n              // Usar una URL de imagen pública de la Tierra\r\n              earthTexture.src = 'https://eoimages.gsfc.nasa.gov/images/imagerecords/74000/74218/world.200412.3x5400x2700.jpg';\r\n            }\r\n            \r\n            // Desactivar efectos exigentes\r\n            viewer.scene.skyAtmosphere.show = false;\r\n            viewer.scene.globe.showGroundAtmosphere = false;\r\n            \r\n            updateProgress('Cargando imágenes...');\r\n            \r\n            // Usar mapas naturales de la Tierra sin fronteras políticas\r\n            let imageLoadSuccess = false;\r\n            \r\n            try {\r\n              // Cargar solo mapas naturales de la Tierra\r\n              const naturalEarthII = new Cesium.TileMapServiceImageryProvider({\r\n                url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')\r\n              });\r\n              viewer.imageryLayers.addImageryProvider(naturalEarthII);\r\n              imageLoadSuccess = true;\r\n              \r\n              // No añadimos capas de fronteras políticas\r\n            } catch (e) {\r\n              console.warn('Error cargando mapas NaturalEarth:', e);\r\n              try {\r\n                // Alternativa: mapas físicos de Bing\r\n                const bing = new Cesium.BingMapsImageryProvider({\r\n                  url: 'https://dev.virtualearth.net',\r\n                  key: 'AipIE-pEoKccx-kC8G3D-45V3hl9hZxC-5vSXbMamybYjvJTXvoOYT7QeMqvFMGQ',\r\n                  mapStyle: Cesium.BingMapsStyle.AERIAL // Vista satélite sin fronteras\r\n                });\r\n                viewer.imageryLayers.addImageryProvider(bing);\r\n                imageLoadSuccess = true;\r\n              } catch (e2) {\r\n                console.warn('Error cargando mapas de Bing:', e2);\r\n                try {\r\n                  // Alternativa: mapas de Ion (imágenes de satélite)\r\n                  const ion = new Cesium.IonImageryProvider({ \r\n                    assetId: 3 // World Imagery\r\n                  });\r\n                  viewer.imageryLayers.addImageryProvider(ion);\r\n                  imageLoadSuccess = true;\r\n                } catch (e3) {\r\n                  console.error('Error cargando todas las opciones de imágenes:', e3);\r\n                  \r\n                  // Último recurso: cargar textura directa\r\n                  loadDirectTexture();\r\n                }\r\n              }\r\n            }\r\n            \r\n            // Si después de todo no tenemos imágenes, cargar la textura directamente\r\n            if (!imageLoadSuccess && viewer.imageryLayers.length === 0) {\r\n              loadDirectTexture();\r\n            }\r\n            \r\n            updateProgress('Configurando cámara...');\r\n            \r\n            // Configurar la cámara para una vista más centrada\r\n            setTimeout(function() {\r\n              try {\r\n                // Configurar una vista inicial simple y directa\r\n                viewer.camera.setView({\r\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\r\n                  orientation: {\r\n                    heading: 0.0,\r\n                    pitch: -Cesium.Math.PI_OVER_TWO,\r\n                    roll: 0.0\r\n                  }\r\n                });\r\n                \r\n                updateProgress('Activando características...');\r\n                \r\n                // Configurar sin rotación automática\r\n                setTimeout(function() {\r\n                  // Solo iniciamos monitoreo de posición, sin rotación automática\r\n                  try {\r\n                    // Desactivar rotación automática desde el principio\r\n                    autoRotate = false;\r\n                    \r\n                    // Iniciar comprobación periódica de estabilidad del globo\r\n                    startStabilityCheck();\r\n                    \r\n                    // Iniciar monitoreo de posición de cámara\r\n                    startCameraPositionMonitoring();\r\n                    \r\n                    // Informar que la carga básica está completa\r\n                    window.ReactNativeWebView.postMessage('loaded');\r\n                    \r\n                    // Ocultar overlay de carga\r\n                    document.getElementById('loadingOverlay').style.display = 'none';\r\n                  } catch (e) {\r\n                    console.error('Error al iniciar características:', e);\r\n                    // Seguimos mostrando el globo aunque falle\r\n                    window.ReactNativeWebView.postMessage('loaded');\r\n                    document.getElementById('loadingOverlay').style.display = 'none';\r\n                  }\r\n                }, 1000);\r\n              } catch (e) {\r\n                console.error('Error al configurar vista inicial:', e);\r\n                // Informar que se completó de todos modos\r\n                window.ReactNativeWebView.postMessage('loaded');\r\n                document.getElementById('loadingOverlay').style.display = 'none';\r\n              }\r\n            }, 1000);\r\n            \r\n            // Configurar interacción para móviles\r\n            viewer.scene.screenSpaceCameraController.minimumZoomDistance = 1000000; // 1000 km mínimo\r\n            viewer.scene.screenSpaceCameraController.maximumZoomDistance = 25000000; // 25000 km máximo\r\n            \r\n            // Configuración adicional para evitar saltos\r\n            viewer.scene.screenSpaceCameraController.inertiaSpin = 0.5; // Reducir inercia de giro\r\n            viewer.scene.screenSpaceCameraController.inertiaTranslate = 0.5; // Reducir inercia de desplazamiento\r\n            viewer.scene.screenSpaceCameraController.inertiaZoom = 0.5; // Reducir inercia de zoom\r\n            \r\n            // Evitar que ciertas regiones \"atraigan\" la cámara\r\n            viewer.scene.screenSpaceCameraController.enableCollisionDetection = false;\r\n            \r\n            // Limitar la velocidad de rotación\r\n            viewer.scene.screenSpaceCameraController.maximumMovementRatio = 0.1;\r\n            \r\n            // Desactivar efectos que podrían causar problemas\r\n            viewer.scene.globe.enableLighting = false;\r\n            viewer.scene.fog.enabled = false;\r\n            viewer.scene.globe.showGroundAtmosphere = false;\r\n            \r\n            // Forzar modo 3D estricto\r\n            viewer.scene.mode = Cesium.SceneMode.SCENE3D;\r\n            viewer.scene.morphComplete.addEventListener(function() {\r\n              viewer.scene.mode = Cesium.SceneMode.SCENE3D;\r\n            });\r\n            \r\n            // Configurar manipulación manual más suave\r\n            viewer.scene.screenSpaceCameraController.tiltEventTypes = [\r\n              Cesium.CameraEventType.MIDDLE_DRAG, \r\n              Cesium.CameraEventType.PINCH,\r\n              {\r\n                eventType: Cesium.CameraEventType.LEFT_DRAG,\r\n                modifier: Cesium.KeyboardEventModifier.CTRL\r\n              }\r\n            ];\r\n            \r\n            // Configurar rotación manual más suave\r\n            viewer.scene.screenSpaceCameraController.rotateEventTypes = [\r\n              Cesium.CameraEventType.LEFT_DRAG\r\n            ];\r\n            \r\n            // Configurar rotación automática\r\n            let autoRotate = true;\r\n            const rotationAxis = new Cesium.Cartesian3(0, 0, 1); // Eje Z (vertical)\r\n            let lastTime = Date.now();\r\n            \r\n            function startAutoRotation() {\r\n              // Detener cualquier rotación anterior si existe\r\n              if (window.rotationInterval) {\r\n                clearInterval(window.rotationInterval);\r\n              }\r\n              \r\n              // Velocidad de rotación en radianes por segundo\r\n              const rotationSpeed = -0.05 * Math.PI / 180.0;\r\n              let lastTimestamp = Date.now();\r\n              \r\n              // Usar requestAnimationFrame para mayor suavidad\r\n              function rotateCamera() {\r\n                if (!autoRotate) {\r\n                  window.requestAnimationFrame(rotateCamera);\r\n                  return;\r\n                }\r\n                \r\n                try {\r\n                  // Calcular tiempo delta\r\n                  const now = Date.now();\r\n                  const deltaTime = now - lastTimestamp;\r\n                  lastTimestamp = now;\r\n                  \r\n                  // Rotar la cámara alrededor del eje vertical (Z)\r\n                  viewer.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, rotationSpeed);\r\n                  \r\n                  // Asegurarse de que se renderice\r\n                  viewer.scene.requestRender();\r\n                  \r\n                  // Actualizar contador de rotación\r\n                  window.rotationCounter = (window.rotationCounter || 0) + 1;\r\n                } catch (e) {\r\n                  console.error('Error en rotación:', e);\r\n                }\r\n                \r\n                // Continuar la animación\r\n                window.requestAnimationFrame(rotateCamera);\r\n              }\r\n              \r\n              // Iniciar la animación\r\n              window.requestAnimationFrame(rotateCamera);\r\n            }\r\n            \r\n            // Función para verificar periódicamente la estabilidad del globo\r\n            function startStabilityCheck() {\r\n              // Ejecutar cada 10 segundos\r\n              setInterval(function() {\r\n                try {\r\n                  // Verificar si el globo sigue visible\r\n                  if (!viewer.scene.globe.show) {\r\n                    viewer.scene.globe.show = true;\r\n                  }\r\n                } catch (e) {\r\n                  console.error('Error en verificación de estabilidad:', e);\r\n                }\r\n              }, 10000);\r\n            }\r\n            \r\n            // Función para monitorear la posición de la cámara y enviarla al componente React Native\r\n            function startCameraPositionMonitoring() {\r\n              setInterval(function() {\r\n                try {\r\n                  if (!viewer || !viewer.scene || !viewer.camera) return;\r\n                  \r\n                  // Obtener la posición de la cámara en coordenadas geográficas\r\n                  const position = viewer.camera.positionCartographic;\r\n                  const longitude = Cesium.Math.toDegrees(position.longitude);\r\n                  const latitude = Cesium.Math.toDegrees(position.latitude);\r\n                  const altitude = position.height;\r\n                  \r\n                  // Calcular un valor aproximado de zoom basado en la altura\r\n                  // Valores aproximados: 20000000 = zoom 1, 5000000 = zoom 4, 1000000 = zoom 8\r\n                  const zoom = Math.max(1, Math.log(20000000 / Math.max(altitude, 10000)) * 2);\r\n                  \r\n                  // Crear objeto con la información de posición\r\n                  const positionData = {\r\n                    longitude: longitude,\r\n                    latitude: latitude,\r\n                    altitude: altitude,\r\n                    zoom: zoom,\r\n                    heading: viewer.camera.heading,\r\n                    pitch: viewer.camera.pitch,\r\n                    roll: viewer.camera.roll\r\n                  };\r\n                  \r\n                  // Enviar al componente React Native\r\n                  window.ReactNativeWebView.postMessage('position:' + JSON.stringify(positionData));\r\n                } catch (e) {\r\n                  console.error('Error al monitorear posición de cámara:', e);\r\n                }\r\n              }, 500); // Actualizar cada 500ms\r\n            }\r\n            \r\n            // Timeout para verificar si realmente tenemos un globo visible\r\n            setTimeout(function() {\r\n              // Verificar si tenemos capas de imagen o si el globo está visible\r\n              if ((viewer.imageryLayers.length === 0 || !viewer.scene.globe.show) && \r\n                  document.getElementById('loadingOverlay').style.display !== 'none') {\r\n                \r\n                console.warn('No se ha detectado un globo visible, aplicando soluciones de respaldo');\r\n                \r\n                // Asegurar que el globo es visible\r\n                viewer.scene.globe.show = true;\r\n                \r\n                // Usar color azul y cargar textura directa\r\n                viewer.scene.globe.baseColor = Cesium.Color.BLUE;\r\n                loadDirectTexture();\r\n                \r\n                // Ocultar overlay después de intentarlo todo\r\n                setTimeout(function() {\r\n                  document.getElementById('loadingOverlay').style.display = 'none';\r\n                  window.ReactNativeWebView.postMessage('loaded');\r\n                }, 3000);\r\n              }\r\n            }, 10000);\r\n            \r\n            // Manejar interacción del usuario\r\n            let touchStarted = false;\r\n            \r\n            // Eventos táctiles simplificados, sin rotación automática\r\n            viewer.screenSpaceEventHandler.setInputAction(function() {\r\n              touchStarted = true;\r\n              \r\n              // Ya no es necesario manejar rotación automática\r\n            }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\r\n            \r\n            viewer.screenSpaceEventHandler.setInputAction(function() {\r\n              touchStarted = false;\r\n              \r\n              // Ya no es necesario reactivar rotación automática\r\n            }, Cesium.ScreenSpaceEventType.LEFT_UP);\r\n            \r\n            // Botón para centrar el globo (único botón que mantenemos)\r\n            const centerButton = document.createElement('button');\r\n            centerButton.textContent = 'Centrar Globo';\r\n            centerButton.style.position = 'absolute';\r\n            centerButton.style.bottom = '20px';\r\n            centerButton.style.right = '10px';\r\n            centerButton.style.zIndex = '1000';\r\n            centerButton.style.padding = '8px';\r\n            centerButton.style.backgroundColor = '#4CAF50';\r\n            centerButton.style.color = 'white';\r\n            centerButton.style.border = 'none';\r\n            centerButton.style.borderRadius = '4px';\r\n            centerButton.style.fontWeight = 'bold';\r\n            centerButton.onclick = function() {\r\n              // Llamar a la función de centrado\r\n              centerGlobe();\r\n            };\r\n            document.body.appendChild(centerButton);\r\n          } catch (error) {\r\n            console.error('Error al inicializar Cesium:', error);\r\n            window.ReactNativeWebView.postMessage('error:' + error);\r\n          }\r\n        }\r\n        \r\n        // Timeout de seguridad para asegurar que se muestra algo\r\n        setTimeout(function() {\r\n          if (document.getElementById('loadingOverlay').style.display !== 'none') {\r\n            updateProgress('Carga completa (timeout)');\r\n            document.getElementById('loadingOverlay').style.display = 'none';\r\n            window.ReactNativeWebView.postMessage('loaded');\r\n          }\r\n        }, 30000);\r\n        \r\n        // Manejo de errores global\r\n        window.onerror = function(message, source, lineno, colno, error) {\r\n          console.error('Error:', message);\r\n          \r\n          // Manejar errores de propiedad de solo lectura\r\n          if (message && (\r\n            message.includes('Cannot assign to read only property') || \r\n            message.toString().includes('normalize') ||\r\n            message.toString().includes('Cartesian3')\r\n          )) {\r\n            console.warn('Detectado error de propiedades de solo lectura, intentando recuperar...');\r\n            \r\n            // Reiniciar la vista de la cámara de forma segura\r\n            try {\r\n              if (window.viewer) {\r\n                window.viewer.camera.flyTo({\r\n                  destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, 15000000.0),\r\n                  orientation: {\r\n                    heading: 0,\r\n                    pitch: -Cesium.Math.PI_OVER_TWO,\r\n                    roll: 0\r\n                  },\r\n                  duration: 0.5\r\n                });\r\n              }\r\n            } catch(e) {\r\n              console.error('Error al recuperar la vista:', e);\r\n            }\r\n            \r\n            return true; // Evita propagar el error\r\n          }\r\n          \r\n          // Solo reportar errores significativos que no sean de workers\r\n          if (!message.includes('Worker') && !message.includes('importScripts')) {\r\n            window.ReactNativeWebView.postMessage('error:' + message);\r\n          }\r\n          return true;\r\n        };\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `;\r\n\r\n  // Manejador de mensajes desde el WebView\r\n  const handleWebViewMessage = (event: WebViewMessageEvent) => {\r\n    const message = event.nativeEvent.data;\r\n    \r\n    // Verificar si el mensaje contiene datos de posición\r\n    if (message.startsWith('position:')) {\r\n      try {\r\n        const positionData = JSON.parse(message.substring(9));\r\n        setCurrentPosition(positionData);\r\n        \r\n        // Cambiar vistas según la altitud\r\n        if (positionData.altitude < MAP_VIEW_DISTANCE_THRESHOLD && !showMapView) {\r\n          setShowMapView(true);\r\n          \r\n          // Detener rotación automática cuando se muestra el mapa\r\n          if (webViewRef.current) {\r\n            webViewRef.current.injectJavaScript(`\r\n              (function() {\r\n                try {\r\n                  // Detener la rotación automática\r\n                  autoRotate = false;\r\n                  console.log('Rotación automática detenida al mostrar el mapa');\r\n                } catch(e) {\r\n                  console.error('Error al detener rotación:', e);\r\n                }\r\n                return true;\r\n              })();\r\n            `);\r\n          }\r\n        } else if (positionData.altitude > GLOBE_VIEW_DISTANCE_THRESHOLD && showMapView) {\r\n          setShowMapView(false);\r\n        }\r\n      } catch (e) {\r\n        console.error('Error al procesar datos de posición:', e);\r\n      }\r\n    } else if (message === 'loaded') {\r\n      console.log('Cesium cargado correctamente');\r\n      setLoading(false);\r\n      \r\n      // Limpiar el timeout cuando se carga correctamente\r\n      if (loadTimeoutRef.current) {\r\n        clearTimeout(loadTimeoutRef.current);\r\n      }\r\n    } else if (message.startsWith('error:')) {\r\n      console.error('Error en Cesium WebView:', message.substring(6));\r\n      setError(message.substring(6));\r\n      handleError(message.substring(6));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.container, props.style]}>\r\n      {!useFallbackView && (\r\n        <>\r\n          {/* Mostrar WebView con Cesium cuando showMapView es false */}\r\n          <WebView\r\n            ref={webViewRef}\r\n            style={[styles.webview, showMapView ? styles.hiddenView : null]}\r\n            originWhitelist={['*']}\r\n            source={{ html: htmlContent }}\r\n            javaScriptEnabled={true}\r\n            domStorageEnabled={true}\r\n            allowFileAccess={true}\r\n            allowUniversalAccessFromFileURLs={true}\r\n            allowFileAccessFromFileURLs={true}\r\n            cacheEnabled={true}\r\n            javaScriptCanOpenWindowsAutomatically={true}\r\n            scrollEnabled={false}\r\n            bounces={false}\r\n            showsHorizontalScrollIndicator={false}\r\n            showsVerticalScrollIndicator={false}\r\n            onShouldStartLoadWithRequest={() => true}\r\n            startInLoadingState={true}\r\n            renderLoading={() => <View />}\r\n            onMessage={handleWebViewMessage}\r\n            onError={(syntheticEvent) => {\r\n              const { nativeEvent } = syntheticEvent;\r\n              console.error('WebView error:', nativeEvent);\r\n              handleError(`WebView error: ${nativeEvent.description}`);\r\n            }}\r\n            onHttpError={(syntheticEvent) => {\r\n              const { nativeEvent } = syntheticEvent;\r\n              console.error('WebView HTTP error:', nativeEvent);\r\n              handleError(`WebView HTTP error: ${nativeEvent.statusCode}`);\r\n            }}\r\n            onContentProcessDidTerminate={() => {\r\n              console.warn('WebView process terminated, falling back to simple globe');\r\n              handleError('La visualización 3D se cerró inesperadamente');\r\n            }}\r\n          />\r\n          \r\n          {/* Mostrar MapView cuando showMapView es true */}\r\n          {showMapView && (\r\n            <View style={styles.mapContainer}>\r\n              <MapView\r\n                ref={mapViewRef}\r\n                style={styles.map}\r\n                provider={PROVIDER_GOOGLE}\r\n                mapType=\"standard\" // Cambiar a vista política estándar\r\n                initialRegion={{\r\n                  latitude: currentPosition.latitude,\r\n                  longitude: currentPosition.longitude,\r\n                  latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\r\n                  longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom)),\r\n                }}\r\n                onMapReady={() => {\r\n                  // Asegurar que el mapa se actualiza con la posición actual\r\n                  if (mapViewRef.current) {\r\n                    mapViewRef.current.animateToRegion({\r\n                      latitude: currentPosition.latitude,\r\n                      longitude: currentPosition.longitude,\r\n                      latitudeDelta: 0.0922 * (10 / Math.max(1, currentPosition.zoom)),\r\n                      longitudeDelta: 0.0421 * (10 / Math.max(1, currentPosition.zoom)),\r\n                    }, 500);\r\n                  }\r\n                }}\r\n                onRegionChangeComplete={(region) => {\r\n                  // Actualizar la posición actual para mantener sincronización\r\n                  setCurrentPosition(prevState => ({\r\n                    ...prevState,\r\n                    latitude: region.latitude,\r\n                    longitude: region.longitude,\r\n                    // Calcular un zoom aproximado desde la región\r\n                    zoom: calculateZoomFromRegion(region)\r\n                  }));\r\n                  \r\n                  // Si el usuario se aleja mucho, volver a la vista de globo\r\n                  const zoom = calculateZoomFromRegion(region);\r\n                  if (zoom < 5) { // Valores bajos de zoom = más alejado\r\n                    setShowMapView(false);\r\n                    \r\n                    // Enviar mensaje al WebView para actualizar su vista\r\n                    if (webViewRef.current) {\r\n                      webViewRef.current.injectJavaScript(`\r\n                        (function() {\r\n                          try {\r\n                            if (window.viewer) {\r\n                              window.viewer.camera.flyTo({\r\n                                destination: Cesium.Cartesian3.fromDegrees(\r\n                                  ${region.longitude}, \r\n                                  ${region.latitude}, \r\n                                  ${GLOBE_VIEW_DISTANCE_THRESHOLD}\r\n                                ),\r\n                                orientation: {\r\n                                  heading: 0.0,\r\n                                  pitch: -Cesium.Math.PI_OVER_TWO,\r\n                                  roll: 0.0\r\n                                },\r\n                                duration: 1.0\r\n                              });\r\n                            }\r\n                          } catch(e) {\r\n                            console.error('Error al actualizar la vista del globo', e);\r\n                          }\r\n                          return true;\r\n                        })();\r\n                      `);\r\n                    }\r\n                  }\r\n                }}\r\n              />\r\n              <TouchableOpacity \r\n                style={styles.backToGlobeButton}\r\n                onPress={() => {\r\n                  setShowMapView(false);\r\n                  \r\n                  // Actualizar la vista del globo con la posición actual del mapa\r\n                  if (webViewRef.current && mapViewRef.current) {\r\n                    mapViewRef.current.getCamera().then(camera => {\r\n                      if (camera && webViewRef.current) {\r\n                        webViewRef.current.injectJavaScript(`\r\n                          (function() {\r\n                            try {\r\n                              if (window.viewer) {\r\n                                window.viewer.camera.flyTo({\r\n                                  destination: Cesium.Cartesian3.fromDegrees(\r\n                                    ${camera.center.longitude}, \r\n                                    ${camera.center.latitude}, \r\n                                    ${GLOBE_VIEW_DISTANCE_THRESHOLD}\r\n                                  ),\r\n                                  orientation: {\r\n                                    heading: 0.0,\r\n                                    pitch: -Cesium.Math.PI_OVER_TWO,\r\n                                    roll: 0.0\r\n                                  },\r\n                                  duration: 1.0\r\n                                });\r\n                              }\r\n                            } catch(e) {\r\n                              console.error('Error al actualizar la vista del globo', e);\r\n                            }\r\n                            return true;\r\n                          })();\r\n                        `);\r\n                      }\r\n                    }).catch(err => {\r\n                      console.error('Error al obtener la cámara de MapView:', err);\r\n                    });\r\n                  }\r\n                }}\r\n              >\r\n                <Text style={styles.backToGlobeButtonText}>Volver al Globo</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          )}\r\n        </>\r\n      )}\r\n      \r\n      {useFallbackView && (\r\n        <FallbackGlobeView style={props.style} />\r\n      )}\r\n      \r\n      {useFallbackView && (\r\n        <View style={styles.fallbackButtonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.retryButton}\r\n            onPress={retryCesium}\r\n          >\r\n            <Text style={styles.retryButtonText}>Intentar cargar mapa 3D</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n      \r\n      {error && !useFallbackView && (\r\n        <View style={styles.errorContainer}>\r\n          <Text style={styles.errorText}>Error: {error}</Text>\r\n          <Text style={styles.errorSubtext}>Cambiando a modo alternativo...</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n// Función para calcular el nivel de zoom a partir de la región\r\nconst calculateZoomFromRegion = (region: { latitudeDelta: number; longitudeDelta: number; }) => {\r\n  // Fórmula aproximada para convertir delta a nivel de zoom\r\n  const latDelta = region.latitudeDelta;\r\n  const lngDelta = region.longitudeDelta;\r\n  const zoomLat = Math.log(360 / latDelta) / Math.LN2;\r\n  const zoomLng = Math.log(360 / lngDelta) / Math.LN2;\r\n  return Math.min(zoomLat, zoomLng);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#000',\r\n    position: 'relative',\r\n  },\r\n  webview: {\r\n    flex: 1,\r\n    backgroundColor: 'transparent',\r\n  },\r\n  errorContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  errorText: {\r\n    color: '#ff6b6b',\r\n    fontSize: 18,\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n  },\r\n  errorSubtext: {\r\n    color: '#fff',\r\n    fontSize: 14,\r\n    textAlign: 'center',\r\n  },\r\n  fallbackButtonContainer: {\r\n    position: 'absolute',\r\n    top: 20,\r\n    right: 20,\r\n    zIndex: 1000,\r\n  },\r\n  retryButton: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 5,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n  },\r\n  retryButtonText: {\r\n    color: '#fff',\r\n    fontSize: 14,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  mapContainer: {\r\n    flex: 1,\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n  map: {\r\n    flex: 1,\r\n  },\r\n  backToGlobeButton: {\r\n    position: 'absolute',\r\n    top: 20,\r\n    right: 20,\r\n    zIndex: 1000,\r\n    padding: 10,\r\n    backgroundColor: '#4CAF50',\r\n    borderRadius: 5,\r\n  },\r\n  backToGlobeButtonText: {\r\n    color: '#fff',\r\n    fontSize: 14,\r\n    fontWeight: 'bold',\r\n  },\r\n  hiddenView: {\r\n    display: 'none',\r\n  },\r\n});\r\n\r\nexport default GlobeView; "],"mappings":"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ACfiF,KAAK,EAAEC,MAAM,CAACW,WAAY;UAC1BC,OAAO,EAAEd,WAAY;UAAAI,QAAA,EAErB7E,OAAA,CAACV,IAAI;YAACoF,KAAK,EAAEC,MAAM,CAACa,eAAgB;YAAAX,QAAA,EAAC;UAAuB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEX;EAGA,MAAMK,WAAW,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
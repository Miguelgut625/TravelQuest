{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore } from 'redux-persist';\nimport authReducer from \"./authSlice\";\nimport missionReducer from \"./missionSlice\";\nimport journalReducer from \"./journalSlice\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistReducer } from 'redux-persist';\nvar persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth'],\n  debug: true\n};\nvar persistedAuthReducer = persistReducer(persistConfig, authReducer);\nexport var store = configureStore({\n  reducer: {\n    auth: persistedAuthReducer,\n    missions: missionReducer,\n    journal: journalReducer\n  },\n  middleware: function middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n      }\n    });\n  }\n});\nexport var persistor = persistStore(store);\nstore.subscribe(function () {\n  console.log('Estado actual:', store.getState());\n});","map":{"version":3,"names":["configureStore","persistStore","authReducer","missionReducer","journalReducer","AsyncStorage","persistReducer","persistConfig","key","storage","whitelist","debug","persistedAuthReducer","store","reducer","auth","missions","journal","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","subscribe","console","log","getState"],"sources":["C:/Users/PC/TravelQuest/src/features/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore } from 'redux-persist';\r\nimport authReducer from './authSlice';\r\nimport missionReducer from './missionSlice';\r\nimport journalReducer from './journalSlice';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: AsyncStorage,\r\n  whitelist: ['auth'],\r\n  debug: true // Habilitar logs de depuración\r\n};\r\n\r\nconst persistedAuthReducer = persistReducer(persistConfig, authReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistedAuthReducer,\r\n    missions: missionReducer,\r\n    journal: journalReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// Agregar listener para depuración\r\nstore.subscribe(() => {\r\n  console.log('Estado actual:', store.getState());\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch; "],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,YAAY,QAAQ,eAAe;AAC5C,OAAOC,WAAW;AAClB,OAAOC,cAAc;AACrB,OAAOC,cAAc;AACrB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,cAAc,QAAQ,eAAe;AAE9C,IAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEJ,YAAY;EACrBK,SAAS,EAAE,CAAC,MAAM,CAAC;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,IAAMC,oBAAoB,GAAGN,cAAc,CAACC,aAAa,EAAEL,WAAW,CAAC;AAEvE,OAAO,IAAMW,KAAK,GAAGb,cAAc,CAAC;EAClCc,OAAO,EAAE;IACPC,IAAI,EAAEH,oBAAoB;IAC1BI,QAAQ,EAAEb,cAAc;IACxBc,OAAO,EAAEb;EACX,CAAC;EACDc,UAAU,EAAE,SAAZA,UAAUA,CAAGC,oBAAoB;IAAA,OAC/BA,oBAAoB,CAAC;MACnBC,iBAAiB,EAAE;QACjBC,cAAc,EAAE,CAAC,iBAAiB,EAAE,mBAAmB;MACzD;IACF,CAAC,CAAC;EAAA;AACN,CAAC,CAAC;AAEF,OAAO,IAAMC,SAAS,GAAGrB,YAAY,CAACY,KAAK,CAAC;AAG5CA,KAAK,CAACU,SAAS,CAAC,YAAM;EACpBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEZ,KAAK,CAACa,QAAQ,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
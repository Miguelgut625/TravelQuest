{"ast":null,"code":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useSelector } from 'react-redux';\nimport LoginScreen from \"../screens/auth/LoginScreen\";\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\nimport ForgotPasswordScreen from \"../screens/auth/ForgotPasswordScreen\";\nimport VerifyCodeScreen from \"../screens/auth/VerifyCodeScreen\";\nimport ResetPasswordScreen from \"../screens/auth/ResetPasswordScreen\";\nimport VerifyEmailScreen from \"../screens/auth/VerifyEmailScreen\";\nimport MapScreen from \"../screens/main/MapScreen\";\nimport MissionsScreen from \"../screens/main/MissionsScreen\";\nimport JournalScreen from \"../screens/main/JournalScreen\";\nimport ProfileScreen from \"../screens/main/ProfileScreen\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from \"react-native-paper/lib/module/core/theming\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar AppNavigator = function AppNavigator() {\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    authState = _useSelector.authState;\n  var theme = useTheme();\n  if (authState === 'loading') {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: theme.colors.primary\n      })\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: authState === 'authenticated' ? _jsxs(Tab.Navigator, {\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n            var iconName;\n            if (route.name === 'Map') {\n              iconName = focused ? 'map' : 'map-outline';\n            } else if (route.name === 'Missions') {\n              iconName = focused ? 'list' : 'list-outline';\n            } else if (route.name === 'Journal') {\n              iconName = focused ? 'book' : 'book-outline';\n            } else if (route.name === 'Profile') {\n              iconName = focused ? 'person' : 'person-outline';\n            }\n            return _jsx(Ionicons, {\n              name: iconName,\n              size: size,\n              color: color\n            });\n          },\n          tabBarActiveTintColor: theme.colors.primary,\n          tabBarInactiveTintColor: 'gray'\n        };\n      },\n      children: [_jsx(Tab.Screen, {\n        name: \"Map\",\n        component: MapScreen\n      }), _jsx(Tab.Screen, {\n        name: \"Missions\",\n        component: MissionsScreen\n      }), _jsx(Tab.Screen, {\n        name: \"Journal\",\n        component: JournalScreen\n      }), _jsx(Tab.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen\n      })]\n    }) : _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Register\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ForgotPassword\",\n        component: ForgotPasswordScreen\n      }), _jsx(Stack.Screen, {\n        name: \"VerifyCode\",\n        component: VerifyCodeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"VerifyEmail\",\n        component: VerifyEmailScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ResetPassword\",\n        component: ResetPasswordScreen\n      })]\n    })\n  });\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","NavigationContainer","createNativeStackNavigator","useSelector","LoginScreen","RegisterScreen","ForgotPasswordScreen","VerifyCodeScreen","ResetPasswordScreen","VerifyEmailScreen","MapScreen","MissionsScreen","JournalScreen","ProfileScreen","createBottomTabNavigator","Ionicons","useTheme","View","ActivityIndicator","jsx","_jsx","jsxs","_jsxs","Stack","Tab","AppNavigator","_useSelector","state","auth","authState","theme","style","flex","justifyContent","alignItems","children","size","color","colors","primary","Navigator","screenOptions","_ref","route","tabBarIcon","_ref2","focused","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","Screen","component","headerShown"],"sources":["C:/Users/migue/TravelQuest/src/navigation/AppNavigator.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../features/store';\r\nimport LoginScreen from '../screens/auth/LoginScreen';\r\nimport RegisterScreen from '../screens/auth/RegisterScreen';\r\nimport ForgotPasswordScreen from '../screens/auth/ForgotPasswordScreen';\r\nimport VerifyCodeScreen from '../screens/auth/VerifyCodeScreen';\r\nimport ResetPasswordScreen from '../screens/auth/ResetPasswordScreen';\r\nimport VerifyEmailScreen from '../screens/auth/VerifyEmailScreen';\r\nimport MapScreen from '../screens/main/MapScreen';\r\nimport MissionsScreen from '../screens/main/MissionsScreen';\r\nimport JournalScreen from '../screens/main/JournalScreen';\r\nimport ProfileScreen from '../screens/main/ProfileScreen';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useTheme } from 'react-native-paper';\r\nimport { RootStackParamList } from './types';\r\nimport { View, ActivityIndicator } from 'react-native';\r\n\r\ntype TabParamList = {\r\n  Map: undefined;\r\n  Missions: {\r\n    journeyId: string;\r\n    challenges: any[];\r\n  };\r\n  Journal: undefined;\r\n  Profile: undefined;\r\n};\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\nconst Tab = createBottomTabNavigator<TabParamList>();\r\n\r\nconst AppNavigator = () => {\r\n  const { authState } = useSelector((state: RootState) => state.auth);\r\n  const theme = useTheme();\r\n\r\n  // Si el estado de autenticaci√≥n es 'loading', mostrar un indicador de carga\r\n  if (authState === 'loading') {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      {authState === 'authenticated' ? (\r\n        <Tab.Navigator\r\n          screenOptions={({ route }) => ({\r\n            tabBarIcon: ({ focused, color, size }) => {\r\n              let iconName;\r\n\r\n              if (route.name === 'Map') {\r\n                iconName = focused ? 'map' : 'map-outline';\r\n              } else if (route.name === 'Missions') {\r\n                iconName = focused ? 'list' : 'list-outline';\r\n              } else if (route.name === 'Journal') {\r\n                iconName = focused ? 'book' : 'book-outline';\r\n              } else if (route.name === 'Profile') {\r\n                iconName = focused ? 'person' : 'person-outline';\r\n              }\r\n\r\n              return <Ionicons name={iconName as any} size={size} color={color} />;\r\n            },\r\n            tabBarActiveTintColor: theme.colors.primary,\r\n            tabBarInactiveTintColor: 'gray',\r\n          })}\r\n        >\r\n          <Tab.Screen name=\"Map\" component={MapScreen} />\r\n          <Tab.Screen name=\"Missions\" component={MissionsScreen} />\r\n          <Tab.Screen name=\"Journal\" component={JournalScreen} />\r\n          <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n        </Tab.Navigator>\r\n      ) : (\r\n        <Stack.Navigator\r\n          screenOptions={{\r\n            headerShown: false,\r\n          }}\r\n        >\r\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n          <Stack.Screen name=\"Register\" component={RegisterScreen} />\r\n          <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\r\n          <Stack.Screen name=\"VerifyCode\" component={VerifyCodeScreen} />\r\n          <Stack.Screen name=\"VerifyEmail\" component={VerifyEmailScreen} />\r\n          <Stack.Screen name=\"ResetPassword\" component={ResetPasswordScreen} />\r\n        </Stack.Navigator>\r\n      )}\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default AppNavigator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { getCloudinaryConfigInfo } from \"../services/cloudinaryService\";\nimport CloudinaryConfigGuide from \"./CloudinaryConfigGuide\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar CloudinaryStatusCard = function CloudinaryStatusCard(_ref) {\n  var _ref$title = _ref.title,\n    title = _ref$title === void 0 ? \"Estado de Cloudinary\" : _ref$title;\n  var _useState = useState(getCloudinaryConfigInfo()),\n    _useState2 = _slicedToArray(_useState, 2),\n    configInfo = _useState2[0],\n    setConfigInfo = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showConfigGuide = _useState4[0],\n    setShowConfigGuide = _useState4[1];\n  useEffect(function () {\n    var checkConfig = function checkConfig() {\n      setConfigInfo(getCloudinaryConfigInfo());\n    };\n    checkConfig();\n    var interval = setInterval(checkConfig, 5000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var getStatusIconName = function getStatusIconName() {\n    if (configInfo.isConfigured) {\n      return 'checkmark-circle';\n    } else if (__DEV__ && configInfo.usingFallback) {\n      return 'warning';\n    } else {\n      return 'close-circle';\n    }\n  };\n  var getStatusColor = function getStatusColor() {\n    if (configInfo.isConfigured) {\n      return '#4CAF50';\n    } else if (__DEV__ && configInfo.usingFallback) {\n      return '#FFA000';\n    } else {\n      return '#F44336';\n    }\n  };\n  var getStatusText = function getStatusText() {\n    if (configInfo.isConfigured) {\n      return \"Configurado correctamente\";\n    } else if (__DEV__ && configInfo.usingFallback) {\n      return \"Usando fallback para desarrollo\";\n    } else {\n      return \"No configurado\";\n    }\n  };\n  var getStatusDescription = function getStatusDescription() {\n    if (configInfo.isConfigured) {\n      return `Cloud Name: ${configInfo.cloudName}\\nUpload Preset: ${configInfo.uploadPreset}`;\n    } else if (__DEV__ && configInfo.usingFallback) {\n      return \"En modo desarrollo, se usarán URLs locales.\\nPara usar Cloudinary, configura tus credenciales.\";\n    } else {\n      return \"La subida de imágenes no funcionará. Por favor, configura Cloudinary.\";\n    }\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: title\n      }), _jsxs(View, {\n        style: styles.statusRow,\n        children: [_jsx(Ionicons, {\n          name: getStatusIconName(),\n          size: 24,\n          color: getStatusColor()\n        }), _jsx(Text, {\n          style: [styles.statusText, {\n            color: getStatusColor()\n          }],\n          children: getStatusText()\n        })]\n      }), _jsx(Text, {\n        style: styles.description,\n        children: getStatusDescription()\n      }), _jsx(TouchableOpacity, {\n        style: [styles.configButton, {\n          backgroundColor: getStatusColor()\n        }],\n        onPress: function onPress() {\n          return setShowConfigGuide(true);\n        },\n        children: _jsx(Text, {\n          style: styles.configButtonText,\n          children: configInfo.isConfigured ? 'Ver configuración' : 'Configurar ahora'\n        })\n      })]\n    }), showConfigGuide && _jsx(CloudinaryConfigGuide, {\n      onClose: function onClose() {\n        return setShowConfigGuide(false);\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 3\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    color: '#333'\n  },\n  statusRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  statusText: {\n    marginLeft: 8,\n    fontSize: 16,\n    fontWeight: '500'\n  },\n  description: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 15\n  },\n  configButton: {\n    borderRadius: 5,\n    padding: 10,\n    alignItems: 'center'\n  },\n  configButtonText: {\n    color: 'white',\n    fontWeight: '500'\n  }\n});\nexport default CloudinaryStatusCard;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","TouchableOpacity","Ionicons","getCloudinaryConfigInfo","CloudinaryConfigGuide","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CloudinaryStatusCard","_ref","_ref$title","title","_useState","_useState2","_slicedToArray","configInfo","setConfigInfo","_useState3","_useState4","showConfigGuide","setShowConfigGuide","checkConfig","interval","setInterval","clearInterval","getStatusIconName","isConfigured","__DEV__","usingFallback","getStatusColor","getStatusText","getStatusDescription","cloudName","uploadPreset","children","style","styles","container","statusRow","name","size","color","statusText","description","configButton","backgroundColor","onPress","configButtonText","onClose","create","borderRadius","padding","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","flexDirection","alignItems","marginLeft"],"sources":["C:/Users/migue/TravelQuest/src/components/CloudinaryStatusCard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { isCloudinaryConfigured, getCloudinaryConfigInfo } from '../services/cloudinaryService';\r\nimport CloudinaryConfigGuide from './CloudinaryConfigGuide';\r\n\r\ninterface CloudinaryStatusCardProps {\r\n  title?: string;\r\n}\r\n\r\nconst CloudinaryStatusCard: React.FC<CloudinaryStatusCardProps> = ({ \r\n  title = \"Estado de Cloudinary\" \r\n}) => {\r\n  const [configInfo, setConfigInfo] = useState(getCloudinaryConfigInfo());\r\n  const [showConfigGuide, setShowConfigGuide] = useState(false);\r\n\r\n  // Comprueba periódicamente el estado de la configuración\r\n  useEffect(() => {\r\n    const checkConfig = () => {\r\n      setConfigInfo(getCloudinaryConfigInfo());\r\n    };\r\n\r\n    // Comprobar una vez al cargar\r\n    checkConfig();\r\n\r\n    // Comprobar cada 5 segundos por si el usuario actualiza la configuración\r\n    const interval = setInterval(checkConfig, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getStatusIconName = () => {\r\n    if (configInfo.isConfigured) {\r\n      return 'checkmark-circle';\r\n    } else if (__DEV__ && configInfo.usingFallback) {\r\n      return 'warning';\r\n    } else {\r\n      return 'close-circle';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = () => {\r\n    if (configInfo.isConfigured) {\r\n      return '#4CAF50'; // Verde\r\n    } else if (__DEV__ && configInfo.usingFallback) {\r\n      return '#FFA000'; // Naranja\r\n    } else {\r\n      return '#F44336'; // Rojo\r\n    }\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    if (configInfo.isConfigured) {\r\n      return \"Configurado correctamente\";\r\n    } else if (__DEV__ && configInfo.usingFallback) {\r\n      return \"Usando fallback para desarrollo\";\r\n    } else {\r\n      return \"No configurado\";\r\n    }\r\n  };\r\n\r\n  const getStatusDescription = () => {\r\n    if (configInfo.isConfigured) {\r\n      return `Cloud Name: ${configInfo.cloudName}\\nUpload Preset: ${configInfo.uploadPreset}`;\r\n    } else if (__DEV__ && configInfo.usingFallback) {\r\n      return \"En modo desarrollo, se usarán URLs locales.\\nPara usar Cloudinary, configura tus credenciales.\";\r\n    } else {\r\n      return \"La subida de imágenes no funcionará. Por favor, configura Cloudinary.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}>{title}</Text>\r\n        \r\n        <View style={styles.statusRow}>\r\n          <Ionicons \r\n            name={getStatusIconName() as any} \r\n            size={24} \r\n            color={getStatusColor()} \r\n          />\r\n          <Text style={[styles.statusText, { color: getStatusColor() }]}>\r\n            {getStatusText()}\r\n          </Text>\r\n        </View>\r\n        \r\n        <Text style={styles.description}>{getStatusDescription()}</Text>\r\n        \r\n        <TouchableOpacity \r\n          style={[styles.configButton, { backgroundColor: getStatusColor() }]}\r\n          onPress={() => setShowConfigGuide(true)}\r\n        >\r\n          <Text style={styles.configButtonText}>\r\n            {configInfo.isConfigured ? 'Ver configuración' : 'Configurar ahora'}\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      \r\n      {showConfigGuide && (\r\n        <CloudinaryConfigGuide onClose={() => setShowConfigGuide(false)} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    padding: 15,\r\n    marginBottom: 15,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n    elevation: 3,\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    color: '#333',\r\n  },\r\n  statusRow: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  statusText: {\r\n    marginLeft: 8,\r\n    fontSize: 16,\r\n    fontWeight: '500',\r\n  },\r\n  description: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 15,\r\n  },\r\n  configButton: {\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    alignItems: 'center',\r\n  },\r\n  configButtonText: {\r\n    color: 'white',\r\n    fontWeight: '500',\r\n  },\r\n});\r\n\r\nexport default CloudinaryStatusCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\TravelQuest\\\\src\\\\screens\\\\NotificationsScreen.tsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { NotificationsList } from '../components/NotificationsList';\nimport { NotificationTest } from '../components/NotificationTest';\nimport { Button, Divider } from 'react-native-paper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const NotificationsScreen = () => {\n  const [showTest, setShowTest] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n  const onRefresh = () => {\n    setRefreshing(true);\n    setTimeout(() => {\n      setRefreshing(false);\n    }, 1000);\n  };\n  return _jsxDEV(ScrollView, {\n    style: styles.container,\n    refreshControl: _jsxDEV(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this),\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(Text, {\n        style: styles.title,\n        children: \"Notificaciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), _jsxDEV(Button, {\n        mode: \"contained\",\n        onPress: () => setShowTest(!showTest),\n        style: styles.testButton,\n        children: showTest ? 'Ocultar Pruebas' : 'Mostrar Pruebas'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), showTest && _jsxDEV(_Fragment, {\n      children: [_jsxDEV(NotificationTest, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), _jsxDEV(Divider, {\n        style: styles.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), _jsxDEV(View, {\n      style: styles.notificationsContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.sectionTitle,\n        children: \"Tus Notificaciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), _jsxDEV(NotificationsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  testButton: {\n    borderRadius: 20\n  },\n  divider: {\n    marginVertical: 16\n  },\n  notificationsContainer: {\n    padding: 16\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","ScrollView","RefreshControl","NotificationsList","NotificationTest","Button","Divider","jsxDEV","_jsxDEV","Fragment","_Fragment","NotificationsScreen","showTest","setShowTest","refreshing","setRefreshing","onRefresh","setTimeout","style","styles","container","refreshControl","fileName","_jsxFileName","lineNumber","columnNumber","children","header","title","mode","onPress","testButton","divider","notificationsContainer","sectionTitle","create","flex","backgroundColor","flexDirection","justifyContent","alignItems","padding","fontSize","fontWeight","borderRadius","marginVertical","marginBottom"],"sources":["C:/Users/PC/TravelQuest/src/screens/NotificationsScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, ScrollView, RefreshControl } from 'react-native';\r\nimport { NotificationsList } from '../components/NotificationsList';\r\nimport { NotificationTest } from '../components/NotificationTest';\r\nimport { Button, Divider } from 'react-native-paper';\r\n\r\nexport const NotificationsScreen = () => {\r\n    const [showTest, setShowTest] = useState(false);\r\n    const [refreshing, setRefreshing] = useState(false);\r\n\r\n    const onRefresh = () => {\r\n        setRefreshing(true);\r\n        // Aquí podrías agregar lógica para recargar las notificaciones\r\n        setTimeout(() => {\r\n            setRefreshing(false);\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <ScrollView\r\n            style={styles.container}\r\n            refreshControl={\r\n                <RefreshControl\r\n                    refreshing={refreshing}\r\n                    onRefresh={onRefresh}\r\n                />\r\n            }\r\n        >\r\n            <View style={styles.header}>\r\n                <Text style={styles.title}>Notificaciones</Text>\r\n                <Button\r\n                    mode=\"contained\"\r\n                    onPress={() => setShowTest(!showTest)}\r\n                    style={styles.testButton}\r\n                >\r\n                    {showTest ? 'Ocultar Pruebas' : 'Mostrar Pruebas'}\r\n                </Button>\r\n            </View>\r\n\r\n            {showTest && (\r\n                <>\r\n                    <NotificationTest />\r\n                    <Divider style={styles.divider} />\r\n                </>\r\n            )}\r\n\r\n            <View style={styles.notificationsContainer}>\r\n                <Text style={styles.sectionTitle}>Tus Notificaciones</Text>\r\n                <NotificationsList />\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#f5f5f5',\r\n    },\r\n    header: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: 16,\r\n        backgroundColor: '#fff',\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n    },\r\n    testButton: {\r\n        borderRadius: 20,\r\n    },\r\n    divider: {\r\n        marginVertical: 16,\r\n    },\r\n    notificationsContainer: {\r\n        padding: 16,\r\n    },\r\n    sectionTitle: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginBottom: 16,\r\n    },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
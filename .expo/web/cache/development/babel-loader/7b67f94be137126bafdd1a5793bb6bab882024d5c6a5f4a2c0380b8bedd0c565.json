{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useSelector } from 'react-redux';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { getConversation, sendMessage, markMessagesAsRead, subscribeToMessages } from \"../../services/messageService\";\nimport { supabase } from \"../../services/supabase\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatScreen = function ChatScreen() {\n  var route = useRoute();\n  var navigation = useNavigation();\n  var _route$params = route.params,\n    friendId = _route$params.friendId,\n    friendName = _route$params.friendName;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputText = _useState6[0],\n    setInputText = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    sending = _useState8[0],\n    setSending = _useState8[1];\n  var user = useSelector(function (state) {\n    return state.auth.user;\n  });\n  var flatListRef = useRef(null);\n  useEffect(function () {\n    checkUserAuth();\n    navigation.setOptions({\n      title: friendName || 'Chat'\n    });\n  }, []);\n  var handleNewMessage = function handleNewMessage(newMessage) {\n    if (newMessage.sender_id === friendId) {\n      setMessages(function (prevMessages) {\n        return [].concat(_toConsumableArray(prevMessages), [newMessage]);\n      });\n      markMessagesAsRead((user == null ? void 0 : user.id) || '', friendId);\n    }\n  };\n  var checkUserAuth = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!user) {\n        Alert.alert(\"No autenticado\", \"Por favor inicia sesión para acceder al chat\", [{\n          text: \"OK\",\n          onPress: function onPress() {\n            return navigation.reset({\n              index: 0,\n              routes: [{\n                name: 'Login'\n              }]\n            });\n          }\n        }]);\n        return;\n      }\n      var _yield$supabase$auth$ = yield supabase.auth.getUser(),\n        data = _yield$supabase$auth$.data,\n        error = _yield$supabase$auth$.error;\n      if (error) {\n        console.error('Error obteniendo información del usuario:', error);\n        return;\n      }\n      if (data && data.user && !data.user.email_confirmed_at) {\n        Alert.alert(\"Correo no verificado\", \"Por favor verifica tu correo electrónico para acceder al chat. Revisa tu bandeja de entrada.\", [{\n          text: \"OK\",\n          onPress: function onPress() {\n            var _data$user;\n            navigation.navigate('VerifyEmail', {\n              email: (_data$user = data.user) == null ? void 0 : _data$user.email\n            });\n          }\n        }]);\n        return;\n      }\n      loadMessages();\n      var subscription = subscribeToMessages(user.id, handleNewMessage, friendId);\n      return function () {\n        if (subscription) {\n          subscription.unsubscribe();\n        }\n      };\n    });\n    return function checkUserAuth() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var loadMessages = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!(user != null && user.id)) return;\n      var conversationMessages = yield getConversation(user.id, friendId);\n      setMessages(conversationMessages);\n      setLoading(false);\n      yield markMessagesAsRead(user.id, friendId);\n    });\n    return function loadMessages() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (messages.length > 0 && !loading) {\n      setTimeout(function () {\n        var _flatListRef$current;\n        (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToEnd({\n          animated: true\n        });\n      }, 200);\n    }\n  }, [messages, loading]);\n  var handleSendMessage = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!inputText.trim() || !(user != null && user.id) || sending) return;\n      setSending(true);\n      var trimmedMessage = inputText.trim();\n      setInputText('');\n      var newMessage = yield sendMessage(user.id, friendId, trimmedMessage);\n      if (newMessage) {\n        setMessages(function (prevMessages) {\n          return [].concat(_toConsumableArray(prevMessages), [newMessage]);\n        });\n      }\n      setSending(false);\n    });\n    return function handleSendMessage() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  if (loading) {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#005F9E\"\n      })\n    });\n  }\n  var renderMessageItem = function renderMessageItem(_ref4) {\n    var item = _ref4.item;\n    var isMyMessage = item.sender_id === (user == null ? void 0 : user.id);\n    return _jsxs(View, {\n      style: [styles.messageContainer, isMyMessage ? styles.myMessage : styles.friendMessage],\n      children: [_jsx(Text, {\n        style: styles.messageText,\n        children: item.content\n      }), _jsx(Text, {\n        style: styles.messageTime,\n        children: new Date(item.created_at).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      })]\n    });\n  };\n  return _jsxs(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS === 'ios' ? 'padding' : undefined,\n    keyboardVerticalOffset: Platform.OS === 'ios' ? 90 : 0,\n    children: [_jsx(FlatList, {\n      ref: flatListRef,\n      data: messages,\n      renderItem: renderMessageItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      contentContainerStyle: styles.messagesContainer\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: inputText,\n        onChangeText: setInputText,\n        placeholder: \"Escribe un mensaje...\",\n        multiline: true\n      }), _jsx(TouchableOpacity, {\n        style: [styles.sendButton, !inputText.trim() || sending ? styles.sendButtonDisabled : null],\n        onPress: handleSendMessage,\n        disabled: !inputText.trim() || sending,\n        children: sending ? _jsx(ActivityIndicator, {\n          size: \"small\",\n          color: \"#FFFFFF\"\n        }) : _jsx(Ionicons, {\n          name: \"send\",\n          size: 24,\n          color: \"white\"\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  messagesContainer: {\n    paddingHorizontal: 10,\n    paddingVertical: 10\n  },\n  messageContainer: {\n    maxWidth: '80%',\n    padding: 10,\n    marginVertical: 5,\n    borderRadius: 10\n  },\n  myMessage: {\n    alignSelf: 'flex-end',\n    backgroundColor: '#005F9E'\n  },\n  friendMessage: {\n    alignSelf: 'flex-start',\n    backgroundColor: '#000000'\n  },\n  messageText: {\n    fontSize: 16,\n    color: 'white'\n  },\n  messageTime: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.7)',\n    marginTop: 5,\n    textAlign: 'right'\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    paddingHorizontal: 10,\n    paddingVertical: 5\n  },\n  input: {\n    flex: 1,\n    padding: 10,\n    backgroundColor: '#f0f0f0',\n    borderRadius: 20,\n    maxHeight: 100\n  },\n  sendButton: {\n    marginLeft: 10,\n    backgroundColor: '#005F9E',\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  sendButtonDisabled: {\n    backgroundColor: '#ccc'\n  }\n});\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","StyleSheet","TextInput","TouchableOpacity","FlatList","ActivityIndicator","KeyboardAvoidingView","Platform","Alert","Ionicons","useSelector","useRoute","useNavigation","getConversation","sendMessage","markMessagesAsRead","subscribeToMessages","supabase","jsx","_jsx","jsxs","_jsxs","ChatScreen","route","navigation","_route$params","params","friendId","friendName","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","loading","setLoading","_useState5","_useState6","inputText","setInputText","_useState7","_useState8","sending","setSending","user","state","auth","flatListRef","checkUserAuth","setOptions","title","handleNewMessage","newMessage","sender_id","prevMessages","concat","_toConsumableArray","id","_ref","_asyncToGenerator","alert","text","onPress","reset","index","routes","name","_yield$supabase$auth$","getUser","data","error","console","email_confirmed_at","_data$user","navigate","email","loadMessages","subscription","unsubscribe","apply","arguments","_ref2","conversationMessages","length","setTimeout","_flatListRef$current","current","scrollToEnd","animated","handleSendMessage","_ref3","trim","trimmedMessage","style","styles","loadingContainer","children","size","color","renderMessageItem","_ref4","item","isMyMessage","messageContainer","myMessage","friendMessage","messageText","content","messageTime","Date","created_at","toLocaleTimeString","hour","minute","container","behavior","OS","undefined","keyboardVerticalOffset","ref","renderItem","keyExtractor","contentContainerStyle","messagesContainer","inputContainer","input","value","onChangeText","placeholder","multiline","sendButton","sendButtonDisabled","disabled","create","flex","backgroundColor","justifyContent","alignItems","paddingHorizontal","paddingVertical","maxWidth","padding","marginVertical","borderRadius","alignSelf","fontSize","marginTop","textAlign","flexDirection","maxHeight","marginLeft","width","height"],"sources":["C:/Users/migue/TravelQuest/src/screens/main/ChatScreen.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  FlatList,\r\n  ActivityIndicator,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  Alert\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { useRoute, useNavigation, RouteProp } from '@react-navigation/native';\r\nimport { getConversation, sendMessage, markMessagesAsRead, subscribeToMessages, Message } from '../../services/messageService';\r\nimport { supabase } from '../../services/supabase';\r\nimport { TabParamList } from '../../navigation/AppNavigator';\r\n\r\ntype ChatScreenRouteProp = RouteProp<{ Chat: { friendId: string, friendName: string } }, 'Chat'>;\r\n\r\nconst ChatScreen = () => {\r\n  const route = useRoute<ChatScreenRouteProp>();\r\n  const navigation = useNavigation();\r\n  const { friendId, friendName } = route.params;\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [inputText, setInputText] = useState('');\r\n  const [sending, setSending] = useState(false);\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n  const flatListRef = useRef<FlatList>(null);\r\n\r\n  useEffect(() => {\r\n    checkUserAuth();\r\n    \r\n    // Configurar el título de la pantalla con el nombre del amigo\r\n    navigation.setOptions({\r\n      title: friendName || 'Chat',\r\n    });\r\n  }, []);\r\n\r\n  // Manejador para nuevos mensajes recibidos\r\n  const handleNewMessage = (newMessage: Message) => {\r\n    if (newMessage.sender_id === friendId) {\r\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      // Marcar como leído inmediatamente\r\n      markMessagesAsRead(user?.id || '', friendId);\r\n    }\r\n  };\r\n\r\n  const checkUserAuth = async () => {\r\n    // Verificar si el usuario está autenticado\r\n    if (!user) {\r\n      Alert.alert(\r\n        \"No autenticado\",\r\n        \"Por favor inicia sesión para acceder al chat\",\r\n        [\r\n          { \r\n            text: \"OK\", \r\n            onPress: () => navigation.reset({\r\n              index: 0,\r\n              routes: [{ name: 'Login' }] as never[]\r\n            })\r\n          }\r\n        ]\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Verificar si el correo electrónico está verificado\r\n    const { data, error } = await supabase.auth.getUser();\r\n    if (error) {\r\n      console.error('Error obteniendo información del usuario:', error);\r\n      return;\r\n    }\r\n\r\n    if (data && data.user && !data.user.email_confirmed_at) {\r\n      Alert.alert(\r\n        \"Correo no verificado\",\r\n        \"Por favor verifica tu correo electrónico para acceder al chat. Revisa tu bandeja de entrada.\",\r\n        [\r\n          { \r\n            text: \"OK\", \r\n            onPress: () => {\r\n              // @ts-ignore - Para solucionar problemas de tipado con la navegación\r\n              navigation.navigate('VerifyEmail', { email: data.user?.email });\r\n            }\r\n          }\r\n        ]\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Si todo está bien, cargamos los mensajes y configuramos la suscripción\r\n    loadMessages();\r\n    \r\n    // Configurar suscripción a mensajes en tiempo real\r\n    // Pasamos friendId para suscribirnos específicamente a esta conversación\r\n    const subscription = subscribeToMessages(user.id, handleNewMessage, friendId);\r\n    \r\n    // Limpiar suscripción al desmontar\r\n    return () => {\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      }\r\n    };\r\n  };\r\n\r\n  // Función para cargar los mensajes\r\n  const loadMessages = async () => {\r\n    if (!user?.id) return;\r\n    \r\n    const conversationMessages = await getConversation(user.id, friendId);\r\n    setMessages(conversationMessages);\r\n    setLoading(false);\r\n    \r\n    // Marcar mensajes como leídos\r\n    await markMessagesAsRead(user.id, friendId);\r\n  };\r\n\r\n  // Desplazarse al último mensaje\r\n  useEffect(() => {\r\n    if (messages.length > 0 && !loading) {\r\n      setTimeout(() => {\r\n        flatListRef.current?.scrollToEnd({ animated: true });\r\n      }, 200);\r\n    }\r\n  }, [messages, loading]);\r\n\r\n  // Función para enviar un mensaje\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim() || !user?.id || sending) return;\r\n    \r\n    setSending(true);\r\n    const trimmedMessage = inputText.trim();\r\n    setInputText('');\r\n    \r\n    const newMessage = await sendMessage(user.id, friendId, trimmedMessage);\r\n    if (newMessage) {\r\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    }\r\n    \r\n    setSending(false);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#005F9E\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // Renderizar un mensaje individual\r\n  const renderMessageItem = ({ item }: { item: Message }) => {\r\n    const isMyMessage = item.sender_id === user?.id;\r\n    \r\n    return (\r\n      <View style={[\r\n        styles.messageContainer,\r\n        isMyMessage ? styles.myMessage : styles.friendMessage,\r\n      ]}>\r\n        <Text style={styles.messageText}>{item.content}</Text>\r\n        <Text style={styles.messageTime}>\r\n          {new Date(item.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n        </Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      style={styles.container}\r\n      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\r\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}\r\n    >\r\n      <FlatList\r\n        ref={flatListRef}\r\n        data={messages}\r\n        renderItem={renderMessageItem}\r\n        keyExtractor={(item) => item.id}\r\n        contentContainerStyle={styles.messagesContainer}\r\n      />\r\n      \r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          value={inputText}\r\n          onChangeText={setInputText}\r\n          placeholder=\"Escribe un mensaje...\"\r\n          multiline\r\n        />\r\n        <TouchableOpacity \r\n          style={[\r\n            styles.sendButton,\r\n            (!inputText.trim() || sending) ? styles.sendButtonDisabled : null\r\n          ]}\r\n          onPress={handleSendMessage}\r\n          disabled={!inputText.trim() || sending}\r\n        >\r\n          {sending ? (\r\n            <ActivityIndicator size=\"small\" color=\"#FFFFFF\" />\r\n          ) : (\r\n            <Ionicons name=\"send\" size={24} color=\"white\" />\r\n          )}\r\n        </TouchableOpacity>\r\n      </View>\r\n    </KeyboardAvoidingView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  messagesContainer: {\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 10,\r\n  },\r\n  messageContainer: {\r\n    maxWidth: '80%',\r\n    padding: 10,\r\n    marginVertical: 5,\r\n    borderRadius: 10,\r\n  },\r\n  myMessage: {\r\n    alignSelf: 'flex-end',\r\n    backgroundColor: '#005F9E',\r\n  },\r\n  friendMessage: {\r\n    alignSelf: 'flex-start',\r\n    backgroundColor: '#000000',\r\n  },\r\n  messageText: {\r\n    fontSize: 16,\r\n    color: 'white',\r\n  },\r\n  messageTime: {\r\n    fontSize: 12,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    marginTop: 5,\r\n    textAlign: 'right',\r\n  },\r\n  inputContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    padding: 10,\r\n    backgroundColor: '#f0f0f0',\r\n    borderRadius: 20,\r\n    maxHeight: 100,\r\n  },\r\n  sendButton: {\r\n    marginLeft: 10,\r\n    backgroundColor: '#005F9E',\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: 20,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  sendButtonDisabled: {\r\n    backgroundColor: '#ccc',\r\n  },\r\n});\r\n\r\nexport default ChatScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
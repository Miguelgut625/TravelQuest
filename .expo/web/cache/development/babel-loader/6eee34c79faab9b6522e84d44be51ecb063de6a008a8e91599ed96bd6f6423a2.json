{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nimport 'react-native-url-polyfill/auto';\nconst supabaseUrl = 'https://ynyxyzzpbyzyejgkfncm.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlueXh5enpwYnl6eWVqZ2tmbmNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODI4NDMsImV4cCI6MjA1NzM1ODg0M30.ntEnr5gFT5tllc0Z037LJPkPq60SM_RBLa6hct72xXs';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport const uploadImage = async (filePath, bucket) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from(bucket).upload(filePath, filePath);\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    throw error;\n  }\n};\nexport const getMissionsByCity = async cityId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('missions').select('*').eq('cityId', cityId);\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error fetching missions:', error);\n    throw error;\n  }\n};\nexport const updateMissionProgress = async (missionId, userId, completed) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('mission_progress').upsert({\n      mission_id: missionId,\n      user_id: userId,\n      completed,\n      updated_at: new Date().toISOString()\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating mission progress:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","uploadImage","filePath","bucket","data","error","storage","from","upload","console","getMissionsByCity","cityId","select","eq","updateMissionProgress","missionId","userId","completed","upsert","mission_id","user_id","updated_at","Date","toISOString"],"sources":["C:/Users/PC/TravelQuest/src/services/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport 'react-native-url-polyfill/auto';\r\n\r\nconst supabaseUrl = 'https://ynyxyzzpbyzyejgkfncm.supabase.co';\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlueXh5enpwYnl6eWVqZ2tmbmNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODI4NDMsImV4cCI6MjA1NzM1ODg0M30.ntEnr5gFT5tllc0Z037LJPkPq60SM_RBLa6hct72xXs';\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Funciones auxiliares para interactuar con Supabase\r\nexport const uploadImage = async (filePath: string, bucket: string) => {\r\n  try {\r\n    const { data, error } = await supabase.storage\r\n      .from(bucket)\r\n      .upload(filePath, filePath);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error uploading image:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMissionsByCity = async (cityId: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('missions')\r\n      .select('*')\r\n      .eq('cityId', cityId);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching missions:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateMissionProgress = async (missionId: string, userId: string, completed: boolean) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('mission_progress')\r\n      .upsert({\r\n        mission_id: missionId,\r\n        user_id: userId,\r\n        completed,\r\n        updated_at: new Date().toISOString(),\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error updating mission progress:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,OAAO,gCAAgC;AAEvC,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,eAAe,GAAG,kNAAkN;AAE1O,OAAO,MAAMC,QAAQ,GAAGH,YAAY,CAACC,WAAW,EAAEC,eAAe,CAAC;AAGlE,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,MAAc,KAAK;EACrE,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CAACM,OAAO,CAC3CC,IAAI,CAACJ,MAAM,CAAC,CACZK,MAAM,CAACN,QAAQ,EAAEA,QAAQ,CAAC;IAE7B,IAAIG,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAG,MAAOC,MAAc,IAAK;EACzD,IAAI;IACF,MAAM;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCO,IAAI,CAAC,UAAU,CAAC,CAChBK,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,QAAQ,EAAEF,MAAM,CAAC;IAEvB,IAAIN,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,qBAAqB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,MAAc,EAAEC,SAAkB,KAAK;EACpG,IAAI;IACF,MAAM;MAAEb,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCO,IAAI,CAAC,kBAAkB,CAAC,CACxBW,MAAM,CAAC;MACNC,UAAU,EAAEJ,SAAS;MACrBK,OAAO,EAAEJ,MAAM;MACfC,SAAS;MACTI,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACrC,CAAC,CAAC;IAEJ,IAAIlB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
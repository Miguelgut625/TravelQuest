{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\TravelQuest\\\\src\\\\components\\\\NotificationsList.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NotificationService from '../services/NotificationService';\nimport { useAppSelector } from '../features/hooks';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationsList = () => {\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const userId = useAppSelector(state => state.auth.user?.id);\n  const notificationService = NotificationService.getInstance();\n  useEffect(() => {\n    if (userId) {\n      loadNotifications();\n    }\n  }, [userId]);\n  const loadNotifications = async () => {\n    try {\n      setLoading(true);\n      const unreadNotifications = await notificationService.getUnreadNotifications(userId);\n      setNotifications(unreadNotifications);\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleNotificationPress = async notification => {\n    try {\n      await notificationService.markNotificationAsRead(notification.id);\n      loadNotifications();\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const renderNotification = ({\n    item\n  }) => _jsxDEV(TouchableOpacity, {\n    style: styles.notificationItem,\n    onPress: () => handleNotificationPress(item),\n    children: _jsxDEV(View, {\n      style: styles.notificationContent,\n      children: [_jsxDEV(Text, {\n        style: styles.notificationTitle,\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), _jsxDEV(Text, {\n        style: styles.notificationMessage,\n        children: item.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), _jsxDEV(Text, {\n        style: styles.notificationDate,\n        children: format(new Date(item.created_at), 'PPP p', {\n          locale: es\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n  if (loading) {\n    return _jsxDEV(View, {\n      style: styles.container,\n      children: _jsxDEV(Text, {\n        children: \"Cargando notificaciones...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: _jsxDEV(FlatList, {\n      data: notifications,\n      renderItem: renderNotification,\n      keyExtractor: item => item.id,\n      ListEmptyComponent: _jsxDEV(View, {\n        style: styles.emptyContainer,\n        children: _jsxDEV(Text, {\n          children: \"No hay notificaciones nuevas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  notificationItem: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2\n  },\n  notificationContent: {\n    flex: 1\n  },\n  notificationTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 4\n  },\n  notificationMessage: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8\n  },\n  notificationDate: {\n    fontSize: 12,\n    color: '#999'\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","TouchableOpacity","StyleSheet","NotificationService","useAppSelector","format","es","jsxDEV","_jsxDEV","NotificationsList","notifications","setNotifications","loading","setLoading","userId","state","auth","user","id","notificationService","getInstance","loadNotifications","unreadNotifications","getUnreadNotifications","error","console","handleNotificationPress","notification","markNotificationAsRead","renderNotification","item","style","styles","notificationItem","onPress","children","notificationContent","notificationTitle","title","fileName","_jsxFileName","lineNumber","columnNumber","notificationMessage","message","notificationDate","Date","created_at","locale","container","data","renderItem","keyExtractor","ListEmptyComponent","emptyContainer","create","flex","padding","backgroundColor","borderRadius","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","color","justifyContent","alignItems"],"sources":["C:/Users/Admin/TravelQuest/src/components/NotificationsList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport NotificationService from '../services/NotificationService';\r\nimport { useAppSelector } from '../features/hooks';\r\nimport { format } from 'date-fns';\r\nimport { es } from 'date-fns/locale';\r\nimport { Notification } from '../types/notifications';\r\n\r\nexport const NotificationsList = () => {\r\n    const [notifications, setNotifications] = useState<Notification[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const userId = useAppSelector(state => state.auth.user?.id);\r\n    const notificationService = NotificationService.getInstance();\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            loadNotifications();\r\n        }\r\n    }, [userId]);\r\n\r\n    const loadNotifications = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const unreadNotifications = await notificationService.getUnreadNotifications(userId!);\r\n            setNotifications(unreadNotifications);\r\n        } catch (error) {\r\n            console.error('Error loading notifications:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleNotificationPress = async (notification: Notification) => {\r\n        try {\r\n            await notificationService.markNotificationAsRead(notification.id);\r\n            loadNotifications(); // Recargar las notificaciones\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n        }\r\n    };\r\n\r\n    const renderNotification = ({ item }: { item: Notification }) => (\r\n        <TouchableOpacity\r\n            style={styles.notificationItem}\r\n            onPress={() => handleNotificationPress(item)}\r\n        >\r\n            <View style={styles.notificationContent}>\r\n                <Text style={styles.notificationTitle}>{item.title}</Text>\r\n                <Text style={styles.notificationMessage}>{item.message}</Text>\r\n                <Text style={styles.notificationDate}>\r\n                    {format(new Date(item.created_at), 'PPP p', { locale: es })}\r\n                </Text>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n\r\n    if (loading) {\r\n        return (\r\n            <View style={styles.container}>\r\n                <Text>Cargando notificaciones...</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                data={notifications}\r\n                renderItem={renderNotification}\r\n                keyExtractor={item => item.id}\r\n                ListEmptyComponent={\r\n                    <View style={styles.emptyContainer}>\r\n                        <Text>No hay notificaciones nuevas</Text>\r\n                    </View>\r\n                }\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 16,\r\n    },\r\n    notificationItem: {\r\n        backgroundColor: '#fff',\r\n        borderRadius: 8,\r\n        padding: 16,\r\n        marginBottom: 8,\r\n        shadowColor: '#000',\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.1,\r\n        shadowRadius: 3,\r\n        elevation: 2,\r\n    },\r\n    notificationContent: {\r\n        flex: 1,\r\n    },\r\n    notificationTitle: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n        marginBottom: 4,\r\n    },\r\n    notificationMessage: {\r\n        fontSize: 14,\r\n        color: '#666',\r\n        marginBottom: 8,\r\n    },\r\n    notificationDate: {\r\n        fontSize: 12,\r\n        color: '#999',\r\n    },\r\n    emptyContainer: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 20,\r\n    },\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const mapNotificationResponse = response => {\n  return Object.assign({}, response, {\n    notification: mapNotification(response.notification)\n  });\n};\nexport const mapNotification = notification => Object.assign({}, notification, {\n  request: mapNotificationRequest(notification.request)\n});\nexport const mapNotificationRequest = request => Object.assign({}, request, {\n  content: mapNotificationContent(request.content)\n});\nexport const mapNotificationContent = content => {\n  const mappedContent = Object.assign({}, content);\n  try {\n    const dataString = mappedContent['dataString'];\n    if (typeof dataString === 'string') {\n      mappedContent.data = JSON.parse(dataString);\n      delete mappedContent.dataString;\n    }\n  } catch (e) {\n    console.log(`Error in notification: ${e}`);\n  }\n  return mappedContent;\n};","map":{"version":3,"names":["mapNotificationResponse","response","Object","assign","notification","mapNotification","request","mapNotificationRequest","content","mapNotificationContent","mappedContent","dataString","data","JSON","parse","e","console","log"],"sources":["C:\\Users\\PC\\TravelQuest\\node_modules\\expo-notifications\\src\\utils\\mapNotificationResponse.ts"],"sourcesContent":["import {\n  Notification,\n  NotificationContent,\n  NotificationRequest,\n  NotificationResponse,\n} from '../Notifications.types';\n\n/**\n * @hidden\n *\n * Does any required processing of a notification response from native code\n * before it is passed to a notification response listener, or to the\n * last notification response hook.\n *\n * @param response The raw response passed in from native code\n * @returns the mapped response.\n */\nexport const mapNotificationResponse = (response: NotificationResponse) => {\n  return {\n    ...response,\n    notification: mapNotification(response.notification),\n  };\n};\n\n/**\n * @hidden\n *\n * Does any required processing of a notification from native code\n * before it is passed to a notification listener.\n *\n * @param notification The raw notification passed in from native code\n * @returns the mapped notification.\n */\nexport const mapNotification = (notification: Notification) => ({\n  ...notification,\n  request: mapNotificationRequest(notification.request),\n});\n\n/**\n * @hidden\n *\n * Does any required processing of a notification request from native code\n * before it is passed to other JS code.\n *\n * @param request The raw request passed in from native code\n * @returns the mapped request.\n */\nexport const mapNotificationRequest = (request: NotificationRequest) => ({\n  ...request,\n  content: mapNotificationContent(request.content),\n});\n\n/**\n * @hidden\n * Does any required processing of notification content from native code\n * before being passed to other JS code.\n *\n * @param content The raw content passed in from native code\n * @returns the mapped content.\n */\nexport const mapNotificationContent = (content: NotificationContent) => {\n  const mappedContent: NotificationContent & { dataString?: string } = { ...content };\n  try {\n    const dataString = mappedContent['dataString'];\n    if (typeof dataString === 'string') {\n      mappedContent.data = JSON.parse(dataString);\n      delete mappedContent.dataString;\n    }\n  } catch (e: any) {\n    console.log(`Error in notification: ${e}`);\n  }\n  return mappedContent;\n};\n"],"mappings":"AAiBA,OAAO,MAAMA,uBAAuB,GAAIC,QAA8B,IAAI;EACxE,OAAAC,MAAA,CAAAC,MAAA,KACKF,QAAQ;IACXG,YAAY,EAAEC,eAAe,CAACJ,QAAQ,CAACG,YAAY;EAAC;AAExD,CAAC;AAWD,OAAO,MAAMC,eAAe,GAAID,YAA0B,IAAAF,MAAA,CAAAC,MAAA,KACrDC,YAAY;EACfE,OAAO,EAAEC,sBAAsB,CAACH,YAAY,CAACE,OAAO;AAAC,EACrD;AAWF,OAAO,MAAMC,sBAAsB,GAAID,OAA4B,IAAAJ,MAAA,CAAAC,MAAA,KAC9DG,OAAO;EACVE,OAAO,EAAEC,sBAAsB,CAACH,OAAO,CAACE,OAAO;AAAC,EAChD;AAUF,OAAO,MAAMC,sBAAsB,GAAID,OAA4B,IAAI;EACrE,MAAME,aAAa,GAAAR,MAAA,CAAAC,MAAA,KAAuDK,OAAO,CAAE;EACnF,IAAI;IACF,MAAMG,UAAU,GAAGD,aAAa,CAAC,YAAY,CAAC;IAC9C,IAAI,OAAOC,UAAU,KAAK,QAAQ,EAAE;MAClCD,aAAa,CAACE,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;MAC3C,OAAOD,aAAa,CAACC,UAAU;;GAElC,CAAC,OAAOI,CAAM,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,0BAA0BF,CAAC,EAAE,CAAC;;EAE5C,OAAOL,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
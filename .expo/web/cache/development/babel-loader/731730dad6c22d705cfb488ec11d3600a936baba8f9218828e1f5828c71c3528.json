{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport URL from 'url-parse';\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\nconst assetMapOverride = getManifest().assetMapOverride;\nexport function selectAssetSource(meta) {\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = Object.assign({}, meta, assetMapOverride[meta.hash]);\n  }\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash\n    };\n  }\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(uri),\n      hash\n    };\n  }\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}?platform=${encodeURIComponent(Platform.OS)}&hash=${encodeURIComponent(meta.hash)}`;\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return {\n      uri,\n      hash\n    };\n  }\n  const manifest2 = getManifest2();\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash\n    };\n  }\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash\n    };\n  }\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash\n  };\n}\nexport function resolveUri(uri) {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n  const {\n    protocol\n  } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}","map":{"version":3,"names":["Platform","path","PixelRatio","URL","AssetSourceResolver","getManifest","getManifest2","manifestBaseUrl","assetMapOverride","selectAssetSource","meta","hasOwnProperty","hash","Object","assign","scale","pickScale","scales","get","index","findIndex","s","fileHashes","uri","fileUris","resolveUri","assetUrlOverride","join","fileScale","fileExtension","type","encodeURIComponent","suffix","name","OS","test","httpServerLocation","manifest2","extra","expoGo","developer","baseUrl","debuggerHost","set","href","bundleUrl","protocol","resolvedPath","startsWith","pathname"],"sources":["C:\\Users\\PC\\TravelQuest\\node_modules\\expo-asset\\src\\AssetSources.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport { PackagerAsset } from 'react-native/Libraries/Image/AssetRegistry';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = Pick<\n  PackagerAsset,\n  'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'\n> & {\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
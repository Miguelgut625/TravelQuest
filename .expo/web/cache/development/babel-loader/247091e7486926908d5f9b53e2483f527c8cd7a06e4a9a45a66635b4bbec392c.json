{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CLOUDINARY_CONFIG } from \"../config/cloudinary\";\nvar CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\nvar CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\nvar CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\nexport var uploadImageToCloudinary = function () {\n  var _ref = _asyncToGenerator(function* (uri, missionId) {\n    try {\n      console.log('Subiendo imagen a Cloudinary...', {\n        uri: uri,\n        missionId: missionId\n      });\n      if (__DEV__ && (!CLOUDINARY_CLOUD_NAME || CLOUDINARY_CLOUD_NAME === 'tu_cloud_name')) {\n        console.warn('ATENCIÓN: Usando URI local como fallback por falta de configuración de Cloudinary');\n        console.warn('Para habilitar Cloudinary, actualiza tus credenciales en src/config/cloudinary.ts');\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1500);\n        });\n        return uri;\n      }\n      var formData = new FormData();\n      var filename = uri.split('/').pop() || 'photo.jpg';\n      var localUri = uri;\n      if (Platform.OS === 'web') {\n        var _response = yield fetch(uri);\n        var blob = yield _response.blob();\n        formData.append('file', blob, filename);\n      } else {\n        var match = /\\.(\\w+)$/.exec(filename);\n        var type = match ? `image/${match[1]}` : 'image/jpeg';\n        formData.append('file', {\n          uri: localUri,\n          type: type,\n          name: filename\n        });\n      }\n      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\n      formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\n      formData.append('public_id', `mission_${missionId}_${Date.now()}`);\n      if (CLOUDINARY_CONFIG.TRANSFORMATION) {\n        var _CLOUDINARY_CONFIG$TR = CLOUDINARY_CONFIG.TRANSFORMATION,\n          WIDTH = _CLOUDINARY_CONFIG$TR.WIDTH,\n          HEIGHT = _CLOUDINARY_CONFIG$TR.HEIGHT,\n          QUALITY = _CLOUDINARY_CONFIG$TR.QUALITY;\n        if (WIDTH) formData.append('width', WIDTH.toString());\n        if (HEIGHT) formData.append('height', HEIGHT.toString());\n        if (QUALITY) formData.append('quality', QUALITY.toString());\n      }\n      console.log('Enviando solicitud a Cloudinary:', CLOUDINARY_URL);\n      var response = yield fetch(CLOUDINARY_URL, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        var errorText = yield response.text();\n        console.error('Error respuesta Cloudinary:', {\n          status: response.status,\n          statusText: response.statusText,\n          responseText: errorText\n        });\n        throw new Error(`Error al subir imagen: ${response.statusText} - ${errorText}`);\n      }\n      var data = yield response.json();\n      console.log('Imagen subida exitosamente:', data.secure_url);\n      return data.secure_url;\n    } catch (error) {\n      console.error('Error subiendo imagen a Cloudinary:', error);\n      if (__DEV__) {\n        console.warn('MODO DESARROLLO: Devolviendo URI local como fallback tras error');\n        return uri;\n      }\n      throw error;\n    }\n  });\n  return function uploadImageToCloudinary(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CLOUDINARY_CONFIG","CLOUDINARY_CLOUD_NAME","CLOUD_NAME","CLOUDINARY_UPLOAD_PRESET","UPLOAD_PRESET","CLOUDINARY_URL","uploadImageToCloudinary","_ref","_asyncToGenerator","uri","missionId","console","log","__DEV__","warn","Promise","resolve","setTimeout","formData","FormData","filename","split","pop","localUri","Platform","OS","response","fetch","blob","append","match","exec","type","name","FOLDER","Date","now","TRANSFORMATION","_CLOUDINARY_CONFIG$TR","WIDTH","HEIGHT","QUALITY","toString","method","body","ok","errorText","text","error","status","statusText","responseText","Error","data","json","secure_url","_x","_x2","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/cloudinaryService.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\nimport { CLOUDINARY_CONFIG } from '../config/cloudinary';\r\n\r\n// Configuración de Cloudinary\r\nconst CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\r\nconst CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\r\n\r\n/**\r\n * Sube una imagen a Cloudinary\r\n * @param uri URI de la imagen local\r\n * @param missionId ID de la misión asociada a la imagen\r\n * @returns URL de la imagen subida a Cloudinary\r\n */\r\nexport const uploadImageToCloudinary = async (uri: string, missionId: string): Promise<string> => {\r\n  try {\r\n    console.log('Subiendo imagen a Cloudinary...', { uri, missionId });\r\n    \r\n    // Para pruebas, si estamos en desarrollo y no está configurado Cloudinary\r\n    // retornamos la URI local para simular el proceso\r\n    if (__DEV__ && (!CLOUDINARY_CLOUD_NAME || CLOUDINARY_CLOUD_NAME === 'tu_cloud_name')) {\r\n      console.warn('ATENCIÓN: Usando URI local como fallback por falta de configuración de Cloudinary');\r\n      console.warn('Para habilitar Cloudinary, actualiza tus credenciales en src/config/cloudinary.ts');\r\n      // Simulamos un retardo para que parezca que se está subiendo\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      return uri; // Devolvemos la URI local como fallback\r\n    }\r\n    \r\n    // Preparar el formulario para la subida\r\n    const formData = new FormData();\r\n    \r\n    // Adaptamos la URI para web vs nativo\r\n    const filename = uri.split('/').pop() || 'photo.jpg';\r\n    let localUri = uri;\r\n    \r\n    if (Platform.OS === 'web') {\r\n      // Para web, podemos usar la URI directamente como Blob\r\n      const response = await fetch(uri);\r\n      const blob = await response.blob();\r\n      formData.append('file', blob, filename);\r\n    } else {\r\n      // Para nativo, necesitamos formatear la URI y tipo MIME\r\n      const match = /\\.(\\w+)$/.exec(filename);\r\n      const type = match ? `image/${match[1]}` : 'image/jpeg';\r\n      \r\n      formData.append('file', {\r\n        // @ts-ignore - Esto es necesario porque React Native y TypeScript manejan FormData de manera diferente\r\n        uri: localUri,\r\n        type,\r\n        name: filename,\r\n      } as any);\r\n    }\r\n    \r\n    // Añadir preset y metadatos\r\n    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n    formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\r\n    formData.append('public_id', `mission_${missionId}_${Date.now()}`);\r\n    \r\n    // Añadir parámetros de transformación si están configurados\r\n    if (CLOUDINARY_CONFIG.TRANSFORMATION) {\r\n      const { WIDTH, HEIGHT, QUALITY } = CLOUDINARY_CONFIG.TRANSFORMATION;\r\n      if (WIDTH) formData.append('width', WIDTH.toString());\r\n      if (HEIGHT) formData.append('height', HEIGHT.toString());\r\n      if (QUALITY) formData.append('quality', QUALITY.toString());\r\n    }\r\n    \r\n    console.log('Enviando solicitud a Cloudinary:', CLOUDINARY_URL);\r\n    \r\n    // Realizar la solicitud\r\n    const response = await fetch(CLOUDINARY_URL, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Error respuesta Cloudinary:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        responseText: errorText\r\n      });\r\n      throw new Error(`Error al subir imagen: ${response.statusText} - ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Imagen subida exitosamente:', data.secure_url);\r\n    return data.secure_url;\r\n  } catch (error) {\r\n    console.error('Error subiendo imagen a Cloudinary:', error);\r\n    \r\n    // En desarrollo, si hay error, devolvemos la URI local como fallback\r\n    if (__DEV__) {\r\n      console.warn('MODO DESARROLLO: Devolviendo URI local como fallback tras error');\r\n      return uri;\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CLOUDINARY_CONFIG } from \"../config/cloudinary\";\nvar CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\nvar CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\nvar CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\nexport var isCloudinaryConfigured = function isCloudinaryConfigured() {\n  return Boolean(CLOUDINARY_CLOUD_NAME && CLOUDINARY_UPLOAD_PRESET && CLOUDINARY_CLOUD_NAME !== 'tu_cloud_name' && CLOUDINARY_UPLOAD_PRESET !== 'tu_upload_preset');\n};\nexport var getCloudinaryConfigInfo = function getCloudinaryConfigInfo() {\n  var isConfigured = isCloudinaryConfigured();\n  return {\n    isConfigured: isConfigured,\n    cloudName: CLOUDINARY_CLOUD_NAME,\n    uploadPreset: CLOUDINARY_UPLOAD_PRESET,\n    cloudNameValid: CLOUDINARY_CLOUD_NAME && CLOUDINARY_CLOUD_NAME !== 'tu_cloud_name',\n    uploadPresetValid: CLOUDINARY_UPLOAD_PRESET && CLOUDINARY_UPLOAD_PRESET !== 'tu_upload_preset',\n    usingFallback: __DEV__ && !isConfigured,\n    uploadUrl: CLOUDINARY_URL\n  };\n};\nvar isBase64Image = function isBase64Image(uri) {\n  return uri.startsWith('data:image');\n};\nexport var uploadImageToCloudinary = function () {\n  var _ref = _asyncToGenerator(function* (uri, missionId) {\n    try {\n      console.log('Subiendo imagen a Cloudinary...', {\n        uri: uri.substring(0, 30) + '...',\n        missionId: missionId\n      });\n      if (isBase64Image(uri)) {\n        console.warn('ATENCIÓN: La imagen ya está en formato base64');\n        if (__DEV__) {\n          console.warn('En modo desarrollo, usando la imagen base64 directamente');\n          return uri;\n        }\n      }\n      var configInfo = getCloudinaryConfigInfo();\n      console.log('Estado configuración Cloudinary:', configInfo);\n      if (__DEV__ && !configInfo.isConfigured) {\n        console.warn('ATENCIÓN: Usando URI local como fallback por falta de configuración de Cloudinary');\n        console.warn('Para habilitar Cloudinary, actualiza tus credenciales en src/config/cloudinary.ts');\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1500);\n        });\n        return uri;\n      }\n      if (!configInfo.isConfigured) {\n        throw new Error('La configuración de Cloudinary no es válida. Verifica tu CLOUD_NAME y UPLOAD_PRESET.');\n      }\n      var formData = new FormData();\n      var filename = uri.split('/').pop() || 'photo.jpg';\n      var localUri = uri;\n      if (Platform.OS === 'web') {\n        if (isBase64Image(uri)) {\n          var base64Data = uri.split(',')[1];\n          var byteCharacters = atob(base64Data);\n          var byteArrays = [];\n          for (var offset = 0; offset < byteCharacters.length; offset += 512) {\n            var slice = byteCharacters.slice(offset, offset + 512);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n              byteNumbers[i] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n          }\n          var blob = new Blob(byteArrays, {\n            type: 'image/png'\n          });\n          formData.append('file', blob, filename);\n        } else {\n          var _response = yield fetch(uri);\n          var _blob = yield _response.blob();\n          formData.append('file', _blob, filename);\n        }\n      } else {\n        if (isBase64Image(uri)) {\n          console.error('Imagen en formato base64 en plataforma nativa no soportada para subida a Cloudinary');\n          if (__DEV__) {\n            return uri;\n          } else {\n            throw new Error('Formato de imagen no soportado para subida a Cloudinary en esta plataforma');\n          }\n        }\n        var match = /\\.(\\w+)$/.exec(filename);\n        var type = match ? `image/${match[1]}` : 'image/jpeg';\n        formData.append('file', {\n          uri: localUri,\n          type: type,\n          name: filename\n        });\n      }\n      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\n      formData.append('folder', CLOUDINARY_CONFIG.FOLDER || 'missions');\n      formData.append('public_id', `mission_${missionId}_${Date.now()}`);\n      if (CLOUDINARY_CONFIG.TRANSFORMATION) {\n        var _CLOUDINARY_CONFIG$TR = CLOUDINARY_CONFIG.TRANSFORMATION,\n          WIDTH = _CLOUDINARY_CONFIG$TR.WIDTH,\n          HEIGHT = _CLOUDINARY_CONFIG$TR.HEIGHT,\n          QUALITY = _CLOUDINARY_CONFIG$TR.QUALITY;\n        if (WIDTH) formData.append('width', WIDTH.toString());\n        if (HEIGHT) formData.append('height', HEIGHT.toString());\n        if (QUALITY) formData.append('quality', QUALITY.toString());\n      }\n      console.log('Enviando solicitud a Cloudinary:', CLOUDINARY_URL);\n      var response = yield fetch(CLOUDINARY_URL, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        var errorText = yield response.text();\n        console.error('Error respuesta Cloudinary:', {\n          status: response.status,\n          statusText: response.statusText,\n          responseText: errorText\n        });\n        throw new Error(`Error al subir imagen (${response.status}): ${response.statusText} - ${errorText}`);\n      }\n      var data = yield response.json();\n      console.log('Imagen subida exitosamente:', data.secure_url);\n      return data.secure_url;\n    } catch (error) {\n      var _error$message, _error$message2, _error$message3;\n      console.error('Error subiendo imagen a Cloudinary:', error);\n      if (__DEV__ && ((_error$message = error.message) != null && _error$message.includes('configuración') || (_error$message2 = error.message) != null && _error$message2.includes('CLOUD_NAME') || (_error$message3 = error.message) != null && _error$message3.includes('400'))) {\n        console.warn('MODO DESARROLLO: Devolviendo URI local como fallback tras error de configuración');\n        return uri;\n      }\n      throw error;\n    }\n  });\n  return function uploadImageToCloudinary(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CLOUDINARY_CONFIG","CLOUDINARY_CLOUD_NAME","CLOUD_NAME","CLOUDINARY_UPLOAD_PRESET","UPLOAD_PRESET","CLOUDINARY_URL","isCloudinaryConfigured","Boolean","getCloudinaryConfigInfo","isConfigured","cloudName","uploadPreset","cloudNameValid","uploadPresetValid","usingFallback","__DEV__","uploadUrl","isBase64Image","uri","startsWith","uploadImageToCloudinary","_ref","_asyncToGenerator","missionId","console","log","substring","warn","configInfo","Promise","resolve","setTimeout","Error","formData","FormData","filename","split","pop","localUri","Platform","OS","base64Data","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","Blob","type","append","response","fetch","error","match","exec","name","FOLDER","Date","now","TRANSFORMATION","_CLOUDINARY_CONFIG$TR","WIDTH","HEIGHT","QUALITY","toString","method","body","ok","errorText","text","status","statusText","responseText","data","json","secure_url","_error$message","_error$message2","_error$message3","message","includes","_x","_x2","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/cloudinaryService.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\nimport { CLOUDINARY_CONFIG } from '../config/cloudinary';\r\n\r\n// Configuración de Cloudinary\r\nconst CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\r\nconst CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\r\n\r\n/**\r\n * Verifica si la configuración de Cloudinary es válida\r\n * @returns {boolean} true si la configuración es válida\r\n */\r\nexport const isCloudinaryConfigured = (): boolean => {\r\n  return Boolean(\r\n    CLOUDINARY_CLOUD_NAME && \r\n    CLOUDINARY_UPLOAD_PRESET && \r\n    CLOUDINARY_CLOUD_NAME !== 'tu_cloud_name' && \r\n    CLOUDINARY_UPLOAD_PRESET !== 'tu_upload_preset'\r\n  );\r\n};\r\n\r\n/**\r\n * Obtiene detalles sobre la configuración actual de Cloudinary\r\n * @returns Objeto con información sobre el estado de la configuración\r\n */\r\nexport const getCloudinaryConfigInfo = () => {\r\n  const isConfigured = isCloudinaryConfigured();\r\n  \r\n  return {\r\n    isConfigured,\r\n    cloudName: CLOUDINARY_CLOUD_NAME,\r\n    uploadPreset: CLOUDINARY_UPLOAD_PRESET,\r\n    cloudNameValid: CLOUDINARY_CLOUD_NAME && CLOUDINARY_CLOUD_NAME !== 'tu_cloud_name',\r\n    uploadPresetValid: CLOUDINARY_UPLOAD_PRESET && CLOUDINARY_UPLOAD_PRESET !== 'tu_upload_preset',\r\n    usingFallback: __DEV__ && !isConfigured,\r\n    uploadUrl: CLOUDINARY_URL,\r\n  };\r\n};\r\n\r\n/**\r\n * Comprueba si una URL es una imagen en formato base64\r\n */\r\nconst isBase64Image = (uri: string): boolean => {\r\n  return uri.startsWith('data:image');\r\n};\r\n\r\n/**\r\n * Sube una imagen a Cloudinary\r\n * @param uri URI de la imagen local\r\n * @param missionId ID de la misión asociada a la imagen\r\n * @returns URL de la imagen subida a Cloudinary\r\n */\r\nexport const uploadImageToCloudinary = async (uri: string, missionId: string): Promise<string> => {\r\n  try {\r\n    console.log('Subiendo imagen a Cloudinary...', { uri: uri.substring(0, 30) + '...', missionId });\r\n    \r\n    // Si la imagen ya está en formato base64, en desarrollo podemos devolverla directamente\r\n    if (isBase64Image(uri)) {\r\n      console.warn('ATENCIÓN: La imagen ya está en formato base64');\r\n      if (__DEV__) {\r\n        console.warn('En modo desarrollo, usando la imagen base64 directamente');\r\n        return uri;\r\n      }\r\n    }\r\n    \r\n    const configInfo = getCloudinaryConfigInfo();\r\n    console.log('Estado configuración Cloudinary:', configInfo);\r\n    \r\n    // Para pruebas, si estamos en desarrollo y no está configurado Cloudinary\r\n    // retornamos la URI local para simular el proceso\r\n    if (__DEV__ && !configInfo.isConfigured) {\r\n      console.warn('ATENCIÓN: Usando URI local como fallback por falta de configuración de Cloudinary');\r\n      console.warn('Para habilitar Cloudinary, actualiza tus credenciales en src/config/cloudinary.ts');\r\n      // Simulamos un retardo para que parezca que se está subiendo\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      return uri; // Devolvemos la URI local como fallback\r\n    }\r\n    \r\n    // Verificar configuración antes de intentar subir\r\n    if (!configInfo.isConfigured) {\r\n      throw new Error('La configuración de Cloudinary no es válida. Verifica tu CLOUD_NAME y UPLOAD_PRESET.');\r\n    }\r\n    \r\n    // Preparar el formulario para la subida\r\n    const formData = new FormData();\r\n    \r\n    // Adaptamos la URI para web vs nativo\r\n    const filename = uri.split('/').pop() || 'photo.jpg';\r\n    let localUri = uri;\r\n    \r\n    if (Platform.OS === 'web') {\r\n      // Para web, necesitamos manejar diferentes formatos de imagen\r\n      if (isBase64Image(uri)) {\r\n        // Si es una imagen en base64, la convertimos a blob\r\n        const base64Data = uri.split(',')[1];\r\n        const byteCharacters = atob(base64Data);\r\n        const byteArrays = [];\r\n        \r\n        for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n          const slice = byteCharacters.slice(offset, offset + 512);\r\n          \r\n          const byteNumbers = new Array(slice.length);\r\n          for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n          }\r\n          \r\n          const byteArray = new Uint8Array(byteNumbers);\r\n          byteArrays.push(byteArray);\r\n        }\r\n        \r\n        const blob = new Blob(byteArrays, { type: 'image/png' });\r\n        formData.append('file', blob, filename);\r\n      } else {\r\n        // URI normal\r\n        const response = await fetch(uri);\r\n        const blob = await response.blob();\r\n        formData.append('file', blob, filename);\r\n      }\r\n    } else {\r\n      // Para nativo, necesitamos formatear la URI y tipo MIME\r\n      if (isBase64Image(uri)) {\r\n        // Si es base64 en nativo, no podemos procesarlo directamente\r\n        console.error('Imagen en formato base64 en plataforma nativa no soportada para subida a Cloudinary');\r\n        if (__DEV__) {\r\n          return uri; // En desarrollo retornamos la imagen base64\r\n        } else {\r\n          throw new Error('Formato de imagen no soportado para subida a Cloudinary en esta plataforma');\r\n        }\r\n      }\r\n      \r\n      const match = /\\.(\\w+)$/.exec(filename);\r\n      const type = match ? `image/${match[1]}` : 'image/jpeg';\r\n      \r\n      formData.append('file', {\r\n        // @ts-ignore - Esto es necesario porque React Native y TypeScript manejan FormData de manera diferente\r\n        uri: localUri,\r\n        type,\r\n        name: filename,\r\n      } as any);\r\n    }\r\n    \r\n    // Añadir preset y metadatos\r\n    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n    formData.append('folder', CLOUDINARY_CONFIG.FOLDER || 'missions');\r\n    formData.append('public_id', `mission_${missionId}_${Date.now()}`);\r\n    \r\n    // Añadir parámetros de transformación si están configurados\r\n    if (CLOUDINARY_CONFIG.TRANSFORMATION) {\r\n      const { WIDTH, HEIGHT, QUALITY } = CLOUDINARY_CONFIG.TRANSFORMATION;\r\n      if (WIDTH) formData.append('width', WIDTH.toString());\r\n      if (HEIGHT) formData.append('height', HEIGHT.toString());\r\n      if (QUALITY) formData.append('quality', QUALITY.toString());\r\n    }\r\n    \r\n    console.log('Enviando solicitud a Cloudinary:', CLOUDINARY_URL);\r\n    \r\n    // Realizar la solicitud\r\n    const response = await fetch(CLOUDINARY_URL, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Error respuesta Cloudinary:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        responseText: errorText\r\n      });\r\n      throw new Error(`Error al subir imagen (${response.status}): ${response.statusText} - ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Imagen subida exitosamente:', data.secure_url);\r\n    return data.secure_url;\r\n  } catch (error: any) {\r\n    console.error('Error subiendo imagen a Cloudinary:', error);\r\n    \r\n    // Si es un error de configuración en desarrollo, devolvemos la URI local\r\n    if (__DEV__ && (\r\n      error.message?.includes('configuración') || \r\n      error.message?.includes('CLOUD_NAME') || \r\n      error.message?.includes('400')\r\n    )) {\r\n      console.warn('MODO DESARROLLO: Devolviendo URI local como fallback tras error de configuración');\r\n      return uri;\r\n    }\r\n    \r\n    // Re-lanzar el error para manejarlo en el componente\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
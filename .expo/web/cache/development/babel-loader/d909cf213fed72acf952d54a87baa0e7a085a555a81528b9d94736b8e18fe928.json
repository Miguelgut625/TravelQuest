{"ast":null,"code":"import * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { supabase } from './supabase';\nimport { useSelector } from 'react-redux';\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true\n  })\n});\nexport const setupNotifications = async () => {\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C'\n    });\n  }\n  const {\n    status: existingStatus\n  } = await Notifications.getPermissionsAsync();\n  let finalStatus = existingStatus;\n  if (existingStatus !== 'granted') {\n    const {\n      status\n    } = await Notifications.requestPermissionsAsync();\n    finalStatus = status;\n  }\n  if (finalStatus !== 'granted') {\n    console.log('Permiso denegado para notificaciones');\n    return;\n  }\n  const token = (await Notifications.getExpoPushTokenAsync()).data;\n  return token;\n};\nexport const scheduleMissionExpirationNotification = async (missionId, expirationDate) => {\n  const eightHoursBefore = new Date(expirationDate.getTime() - 8 * 60 * 60 * 1000);\n  if (eightHoursBefore > new Date()) {\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title: '¡Misión por expirar!',\n        body: 'Tienes una misión que expirará en 8 horas',\n        data: {\n          missionId\n        }\n      },\n      trigger: {\n        date: eightHoursBefore\n      }\n    });\n  }\n};\nexport const checkFriendshipRequests = async () => {\n  const {\n    user\n  } = useSelector(state => state.auth);\n  if (!user?.id) return;\n  const {\n    data,\n    error\n  } = await supabase.from('friendship_invitations').select('id, senderId, created_at').eq('receiverId', user.id).eq('status', 'Pending').order('created_at', {\n    ascending: false\n  }).limit(1);\n  if (error) {\n    console.error('Error al verificar solicitudes:', error);\n    return;\n  }\n  if (data && data.length > 0) {\n    const lastRequest = data[0];\n    const {\n      data: sender\n    } = await supabase.from('users').select('username').eq('id', lastRequest.senderId).single();\n    if (sender) {\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title: 'Nueva solicitud de amistad',\n          body: `${sender.username} te ha enviado una solicitud de amistad`,\n          data: {\n            requestId: lastRequest.id\n          }\n        },\n        trigger: null\n      });\n    }\n  }\n};\nexport const checkSharedJourneys = async () => {\n  const {\n    user\n  } = useSelector(state => state.auth);\n  if (!user?.id) return;\n  const {\n    data,\n    error\n  } = await supabase.from('journeys').select('id, name, created_at, creatorId').eq('sharedWith', user.id).order('created_at', {\n    ascending: false\n  }).limit(1);\n  if (error) {\n    console.error('Error al verificar viajes compartidos:', error);\n    return;\n  }\n  if (data && data.length > 0) {\n    const lastJourney = data[0];\n    const {\n      data: creator\n    } = await supabase.from('users').select('username').eq('id', lastJourney.creatorId).single();\n    if (creator) {\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title: 'Nuevo viaje compartido',\n          body: `${creator.username} ha compartido un viaje contigo: ${lastJourney.name}`,\n          data: {\n            journeyId: lastJourney.id\n          }\n        },\n        trigger: null\n      });\n    }\n  }\n};\nexport const setupNotificationListeners = () => {\n  Notifications.addNotificationReceivedListener(notification => {\n    console.log('Notificación recibida:', notification);\n  });\n  Notifications.addNotificationResponseReceivedListener(response => {\n    console.log('Usuario interactuó con la notificación:', response);\n    const {\n      missionId,\n      requestId,\n      journeyId\n    } = response.notification.request.content.data;\n    if (missionId) {} else if (requestId) {} else if (journeyId) {}\n  });\n};","map":{"version":3,"names":["Notifications","Platform","supabase","useSelector","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","setupNotifications","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","console","log","token","getExpoPushTokenAsync","data","scheduleMissionExpirationNotification","missionId","expirationDate","eightHoursBefore","Date","getTime","scheduleNotificationAsync","content","title","body","trigger","date","checkFriendshipRequests","user","state","auth","id","error","from","select","eq","order","ascending","limit","length","lastRequest","sender","senderId","single","username","requestId","checkSharedJourneys","lastJourney","creator","creatorId","journeyId","setupNotificationListeners","addNotificationReceivedListener","notification","addNotificationResponseReceivedListener","response","request"],"sources":["C:/Users/PC/TravelQuest/src/services/notifications.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport { Platform } from 'react-native';\r\nimport { supabase } from './supabase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../features/store';\r\n\r\n// Configurar el comportamiento de las notificaciones\r\nNotifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n        shouldShowAlert: true,\r\n        shouldPlaySound: true,\r\n        shouldSetBadge: true,\r\n    }),\r\n});\r\n\r\nexport const setupNotifications = async () => {\r\n    if (Platform.OS === 'android') {\r\n        await Notifications.setNotificationChannelAsync('default', {\r\n            name: 'default',\r\n            importance: Notifications.AndroidImportance.MAX,\r\n            vibrationPattern: [0, 250, 250, 250],\r\n            lightColor: '#FF231F7C',\r\n        });\r\n    }\r\n\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n\r\n    if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        finalStatus = status;\r\n    }\r\n\r\n    if (finalStatus !== 'granted') {\r\n        console.log('Permiso denegado para notificaciones');\r\n        return;\r\n    }\r\n\r\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    return token;\r\n};\r\n\r\nexport const scheduleMissionExpirationNotification = async (missionId: string, expirationDate: Date) => {\r\n    const eightHoursBefore = new Date(expirationDate.getTime() - 8 * 60 * 60 * 1000);\r\n\r\n    if (eightHoursBefore > new Date()) {\r\n        await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n                title: '¡Misión por expirar!',\r\n                body: 'Tienes una misión que expirará en 8 horas',\r\n                data: { missionId },\r\n            },\r\n            trigger: {\r\n                date: eightHoursBefore,\r\n            },\r\n        });\r\n    }\r\n};\r\n\r\nexport const checkFriendshipRequests = async () => {\r\n    const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n    if (!user?.id) return;\r\n\r\n    const { data, error } = await supabase\r\n        .from('friendship_invitations')\r\n        .select('id, senderId, created_at')\r\n        .eq('receiverId', user.id)\r\n        .eq('status', 'Pending')\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n    if (error) {\r\n        console.error('Error al verificar solicitudes:', error);\r\n        return;\r\n    }\r\n\r\n    if (data && data.length > 0) {\r\n        const lastRequest = data[0];\r\n        const { data: sender } = await supabase\r\n            .from('users')\r\n            .select('username')\r\n            .eq('id', lastRequest.senderId)\r\n            .single();\r\n\r\n        if (sender) {\r\n            await Notifications.scheduleNotificationAsync({\r\n                content: {\r\n                    title: 'Nueva solicitud de amistad',\r\n                    body: `${sender.username} te ha enviado una solicitud de amistad`,\r\n                    data: { requestId: lastRequest.id },\r\n                },\r\n                trigger: null, // Notificación inmediata\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const checkSharedJourneys = async () => {\r\n    const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n    if (!user?.id) return;\r\n\r\n    const { data, error } = await supabase\r\n        .from('journeys')\r\n        .select('id, name, created_at, creatorId')\r\n        .eq('sharedWith', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n    if (error) {\r\n        console.error('Error al verificar viajes compartidos:', error);\r\n        return;\r\n    }\r\n\r\n    if (data && data.length > 0) {\r\n        const lastJourney = data[0];\r\n        const { data: creator } = await supabase\r\n            .from('users')\r\n            .select('username')\r\n            .eq('id', lastJourney.creatorId)\r\n            .single();\r\n\r\n        if (creator) {\r\n            await Notifications.scheduleNotificationAsync({\r\n                content: {\r\n                    title: 'Nuevo viaje compartido',\r\n                    body: `${creator.username} ha compartido un viaje contigo: ${lastJourney.name}`,\r\n                    data: { journeyId: lastJourney.id },\r\n                },\r\n                trigger: null, // Notificación inmediata\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const setupNotificationListeners = () => {\r\n    // Listener para cuando la notificación es recibida\r\n    Notifications.addNotificationReceivedListener(notification => {\r\n        console.log('Notificación recibida:', notification);\r\n    });\r\n\r\n    // Listener para cuando el usuario interactúa con la notificación\r\n    Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log('Usuario interactuó con la notificación:', response);\r\n        // Aquí puedes manejar la navegación basada en el tipo de notificación\r\n        const { missionId, requestId, journeyId } = response.notification.request.content.data;\r\n\r\n        if (missionId) {\r\n            // Navegar a la misión\r\n        } else if (requestId) {\r\n            // Navegar a la pantalla de solicitudes\r\n        } else if (journeyId) {\r\n            // Navegar al viaje compartido\r\n        }\r\n    });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
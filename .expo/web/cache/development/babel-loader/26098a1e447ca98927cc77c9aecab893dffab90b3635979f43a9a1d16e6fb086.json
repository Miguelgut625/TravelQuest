{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nexport var getUserPoints = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$supabase$from$ = yield supabase.from('users').select('points').eq('id', userId).maybeSingle(),\n        data = _yield$supabase$from$.data,\n        error = _yield$supabase$from$.error;\n      if (error) throw error;\n      return (data == null ? void 0 : data.points) || 0;\n    } catch (error) {\n      console.error('Error obteniendo puntos del usuario:', error);\n      return 0;\n    }\n  });\n  return function getUserPoints(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addPointsToUser = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, points) {\n    try {\n      var currentPoints = yield getUserPoints(userId);\n      var _yield$supabase$from$2 = yield supabase.from('users').update({\n          points: currentPoints + points,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId),\n        error = _yield$supabase$from$2.error;\n      if (error) throw error;\n      return currentPoints + points;\n    } catch (error) {\n      console.error('Error añadiendo puntos al usuario:', error);\n      throw error;\n    }\n  });\n  return function addPointsToUser(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var completeMission = function () {\n  var _ref3 = _asyncToGenerator(function* (missionId, userId, imageUrl) {\n    try {\n      var _yield$supabase$from$3 = yield supabase.from('journeys_missions').select(`\n                id,\n                journeyId,\n                challenge:challenges (\n                    id,\n                    title,\n                    description,\n                    points\n                )\n            `).eq('id', missionId).single(),\n        missionData = _yield$supabase$from$3.data,\n        missionError = _yield$supabase$from$3.error;\n      if (missionError) throw missionError;\n      var _yield$supabase$from$4 = yield supabase.from('journeys_missions').update({\n          completed: true,\n          completed_at: new Date().toISOString(),\n          photo_url: imageUrl || null\n        }).eq('id', missionId),\n        updateError = _yield$supabase$from$4.error;\n      if (updateError) throw updateError;\n      var points = missionData.challenge.points;\n      yield addPointsToUser(userId, points);\n      if (imageUrl) {\n        var _yield$supabase$from$5 = yield supabase.from('journeys').select(`\n                    id,\n                    cityId,\n                    cities (name)\n                `).eq('id', missionData.journeyId).single(),\n          journeyData = _yield$supabase$from$5.data,\n          journeyError = _yield$supabase$from$5.error;\n        if (journeyError) throw journeyError;\n        var _yield$supabase$from$6 = yield supabase.from('journal_entries').insert({\n            userId: userId,\n            cityId: journeyData.cityId,\n            missionId: missionId,\n            title: missionData.challenge.title,\n            content: `Misión completada: ${missionData.challenge.description}`,\n            photos: [imageUrl],\n            location: null,\n            created_at: new Date().toISOString(),\n            tags: ['misión', journeyData.cities.name.toLowerCase()]\n          }),\n          journalError = _yield$supabase$from$6.error;\n        if (journalError) throw journalError;\n      }\n      return points;\n    } catch (error) {\n      console.error('Error completando la misión:', error);\n      throw error;\n    }\n  });\n  return function completeMission(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","getUserPoints","_ref","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","maybeSingle","data","error","points","console","_x","apply","arguments","addPointsToUser","_ref2","currentPoints","_yield$supabase$from$2","update","updated_at","Date","toISOString","_x2","_x3","completeMission","_ref3","missionId","imageUrl","_yield$supabase$from$3","single","missionData","missionError","_yield$supabase$from$4","completed","completed_at","photo_url","updateError","challenge","_yield$supabase$from$5","journeyId","journeyData","journeyError","_yield$supabase$from$6","insert","cityId","title","content","description","photos","location","created_at","tags","cities","name","toLowerCase","journalError","_x4","_x5","_x6"],"sources":["C:/Users/migue/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const getUserPoints = async (userId: string) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('users')\r\n            .select('points')\r\n            .eq('id', userId)\r\n            .maybeSingle();\r\n\r\n        if (error) throw error;\r\n\r\n        return data?.points || 0;\r\n    } catch (error) {\r\n        console.error('Error obteniendo puntos del usuario:', error);\r\n        return 0; // Retornamos 0 en caso de error\r\n    }\r\n};\r\n\r\nexport const addPointsToUser = async (userId: string, points: number) => {\r\n    try {\r\n        // Primero obtenemos los puntos actuales\r\n        const currentPoints = await getUserPoints(userId);\r\n\r\n        // Actualizamos los puntos\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({\r\n                points: currentPoints + points,\r\n                updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId);\r\n\r\n        if (error) throw error;\r\n\r\n        return currentPoints + points;\r\n    } catch (error) {\r\n        console.error('Error añadiendo puntos al usuario:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const completeMission = async (missionId: string, userId: string, imageUrl?: string) => {\r\n    try {\r\n        // Primero obtenemos los datos de la misión\r\n        const { data: missionData, error: missionError } = await supabase\r\n            .from('journeys_missions')\r\n            .select(`\r\n                id,\r\n                journeyId,\r\n                challenge:challenges (\r\n                    id,\r\n                    title,\r\n                    description,\r\n                    points\r\n                )\r\n            `)\r\n            .eq('id', missionId)\r\n            .single();\r\n\r\n        if (missionError) throw missionError;\r\n\r\n        // Marcar la misión como completada\r\n        const { error: updateError } = await supabase\r\n            .from('journeys_missions')\r\n            .update({ \r\n                completed: true,\r\n                completed_at: new Date().toISOString(),\r\n                photo_url: imageUrl || null\r\n            })\r\n            .eq('id', missionId);\r\n\r\n        if (updateError) throw updateError;\r\n\r\n        // Añadir los puntos al usuario\r\n        const points = missionData.challenge.points;\r\n        await addPointsToUser(userId, points);\r\n\r\n        // Si hay una imagen, agregar una entrada al diario\r\n        if (imageUrl) {\r\n            // Obtener información de la ciudad\r\n            const { data: journeyData, error: journeyError } = await supabase\r\n                .from('journeys')\r\n                .select(`\r\n                    id,\r\n                    cityId,\r\n                    cities (name)\r\n                `)\r\n                .eq('id', missionData.journeyId)\r\n                .single();\r\n\r\n            if (journeyError) throw journeyError;\r\n\r\n            // Crear entrada en el diario\r\n            const { error: journalError } = await supabase\r\n                .from('journal_entries')\r\n                .insert({\r\n                    userId,\r\n                    cityId: journeyData.cityId,\r\n                    missionId,\r\n                    title: missionData.challenge.title,\r\n                    content: `Misión completada: ${missionData.challenge.description}`,\r\n                    photos: [imageUrl],\r\n                    location: null, // Se podría obtener de la misión si estuviera disponible\r\n                    created_at: new Date().toISOString(),\r\n                    tags: ['misión', journeyData.cities.name.toLowerCase()]\r\n                });\r\n\r\n            if (journalError) throw journalError;\r\n        }\r\n\r\n        return points;\r\n    } catch (error) {\r\n        console.error('Error completando la misión:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
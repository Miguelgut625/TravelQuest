{"ast":null,"code":"import { LegacyEventEmitter, Platform } from 'expo-modules-core';\nimport PushTokenManager from './PushTokenManager';\nimport { warnOfExpoGoPushUsage } from './warnOfExpoGoPushUsage';\nconst tokenEmitter = new LegacyEventEmitter(PushTokenManager);\nconst newTokenEventName = 'onDevicePushToken';\nexport function addPushTokenListener(listener) {\n  warnOfExpoGoPushUsage();\n  const wrappingListener = ({\n    devicePushToken\n  }) => listener({\n    data: devicePushToken,\n    type: Platform.OS\n  });\n  return tokenEmitter.addListener(newTokenEventName, wrappingListener);\n}\nexport function removePushTokenSubscription(subscription) {\n  subscription.remove();\n}","map":{"version":3,"names":["LegacyEventEmitter","Platform","PushTokenManager","warnOfExpoGoPushUsage","tokenEmitter","newTokenEventName","addPushTokenListener","listener","wrappingListener","devicePushToken","data","type","OS","addListener","removePushTokenSubscription","subscription","remove"],"sources":["C:\\Users\\PC\\TravelQuest\\node_modules\\expo-notifications\\src\\TokenEmitter.ts"],"sourcesContent":["import { LegacyEventEmitter, type EventSubscription, Platform } from 'expo-modules-core';\n\nimport PushTokenManager from './PushTokenManager';\nimport { DevicePushToken } from './Tokens.types';\nimport { warnOfExpoGoPushUsage } from './warnOfExpoGoPushUsage';\n\n/**\n * A function accepting a device push token ([`DevicePushToken`](#devicepushtoken)) as an argument.\n * > **Note:** You should not call `getDevicePushTokenAsync` inside this function, as it triggers the listener and may lead to an infinite loop.\n * @header fetch\n */\nexport type PushTokenListener = (token: DevicePushToken) => void;\n\n// Web uses SyntheticEventEmitter\nconst tokenEmitter = new LegacyEventEmitter(PushTokenManager);\nconst newTokenEventName = 'onDevicePushToken';\n\n/**\n * In rare situations, a push token may be changed by the push notification service while the app is running.\n * When a token is rolled, the old one becomes invalid and sending notifications to it will fail.\n * A push token listener will let you handle this situation gracefully by registering the new token with your backend right away.\n * @param listener A function accepting a push token as an argument, it will be called whenever the push token changes.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @header fetch\n * @example Registering a push token listener using a React hook.\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * import { registerDevicePushTokenAsync } from '../api';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n */\nexport function addPushTokenListener(listener: PushTokenListener): EventSubscription {\n  warnOfExpoGoPushUsage();\n  const wrappingListener = ({ devicePushToken }) =>\n    listener({ data: devicePushToken, type: Platform.OS });\n  return tokenEmitter.addListener(newTokenEventName, wrappingListener);\n}\n\n/**\n * Removes a push token subscription returned by an `addPushTokenListener` call.\n * @param subscription A subscription returned by `addPushTokenListener` method.\n * @header fetch\n */\nexport function removePushTokenSubscription(subscription: EventSubscription) {\n  subscription.remove();\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAA0BC,QAAQ,QAAQ,mBAAmB;AAExF,OAAOC,gBAAgB,MAAM,oBAAoB;AAEjD,SAASC,qBAAqB,QAAQ,yBAAyB;AAU/D,MAAMC,YAAY,GAAG,IAAIJ,kBAAkB,CAACE,gBAAgB,CAAC;AAC7D,MAAMG,iBAAiB,GAAG,mBAAmB;AA4B7C,OAAM,SAAUC,oBAAoBA,CAACC,QAA2B;EAC9DJ,qBAAqB,EAAE;EACvB,MAAMK,gBAAgB,GAAGA,CAAC;IAAEC;EAAe,CAAE,KAC3CF,QAAQ,CAAC;IAAEG,IAAI,EAAED,eAAe;IAAEE,IAAI,EAAEV,QAAQ,CAACW;EAAE,CAAE,CAAC;EACxD,OAAOR,YAAY,CAACS,WAAW,CAACR,iBAAiB,EAAEG,gBAAgB,CAAC;AACtE;AAOA,OAAM,SAAUM,2BAA2BA,CAACC,YAA+B;EACzEA,YAAY,CAACC,MAAM,EAAE;AACvB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
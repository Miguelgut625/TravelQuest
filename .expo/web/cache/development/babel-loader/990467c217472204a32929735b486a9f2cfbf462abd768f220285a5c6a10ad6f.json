{"ast":null,"code":"import { supabase } from './supabase';\nexport const checkJournalTables = async () => {\n  try {\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([supabase.from('journal_entries').select('id').limit(1), supabase.from('journey_diary').select('id').limit(1)]);\n    return {\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n    };\n  } catch (error) {\n    console.error('Error verificando tablas del diario:', error);\n    return {\n      journalEntriesExists: false,\n      journeyDiaryExists: false\n    };\n  }\n};\nexport const getUserJournalEntries = async userId => {\n  try {\n    const {\n      journalEntriesExists,\n      journeyDiaryExists\n    } = await checkJournalTables();\n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return {};\n    }\n    let entriesData = null;\n    let error = null;\n    if (journalEntriesExists) {\n      try {\n        const {\n          data,\n          error: entriesError\n        } = await supabase.from('journal_entries').select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `).eq('userid', userId).order('created_at', {\n          ascending: false\n        });\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (entriesError.message.includes('cityid') || entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200' || entriesError.code === '42703')) {\n          try {\n            const {\n              data: basicData,\n              error: basicError\n            } = await supabase.from('journal_entries').select('*').eq('userid', userId).order('created_at', {\n              ascending: false\n            });\n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              const {\n                data: altData,\n                error: altError\n              } = await supabase.from('journal_entries').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n              });\n              if (!altError) {\n                entriesData = altData;\n              } else {\n                error = altError;\n              }\n            }\n          } catch (e) {\n            console.warn('Error al obtener datos sin relación:', e);\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries:', e);\n      }\n    }\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        const possibleQueries = [supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', {\n          ascending: false\n        }), supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', {\n          ascending: false\n        })];\n        for (const query of possibleQueries) {\n          try {\n            const {\n              data: diaryData,\n              error: diaryError\n            } = await query;\n            if (!diaryError && diaryData && diaryData.length > 0) {\n              entriesData = diaryData;\n              break;\n            }\n          } catch (e) {\n            console.warn('Error en consulta alternativa:', e);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary:', e);\n      }\n    }\n    if (!entriesData && error) {\n      throw error;\n    }\n    if (!entriesData) {\n      return {};\n    }\n    return organizeCityEntries(entriesData, true);\n  } catch (error) {\n    console.error('Error obteniendo entradas del diario:', error);\n    throw error;\n  }\n};\nconst organizeCityEntries = (data, missingCityRelation = false) => {\n  const entriesByCity = {};\n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  data.forEach(entry => {\n    let cityName = 'Ciudad Desconocida';\n    if (!missingCityRelation && entry.cities?.name) {\n      cityName = entry.cities.name;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.cityname) {\n      cityName = entry.cityname;\n    } else if (entry.cities && entry.cities.name) {\n      cityName = entry.cities.name;\n    } else if (entry.city?.name) {\n      cityName = entry.city.name;\n    } else {\n      if (entry.tags && Array.isArray(entry.tags)) {\n        const commonTags = ['misión', 'mission', 'viaje', 'travel', 'foto', 'photo'];\n        const possibleCityTag = entry.tags.find(tag => !commonTags.includes(tag.toLowerCase()) && tag.charAt(0).toUpperCase() === tag.charAt(0));\n        if (possibleCityTag) {\n          cityName = possibleCityTag;\n        }\n      }\n      if (cityName === 'Ciudad Desconocida' && entry.content) {\n        const contentMatch = entry.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n        if (contentMatch && contentMatch[1]) {\n          cityName = contentMatch[1].trim();\n        }\n      }\n    }\n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    const processedEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || entry.user_id || entry.userid || '',\n      cityId: entry.cityId || entry.city_id || entry.cityid || '',\n      missionId: entry.missionId || entry.mission_id || entry.missionid || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    entriesByCity[cityName].push(processedEntry);\n  });\n  return entriesByCity;\n};\nexport const getMissionJournalEntries = async (userId, missionId) => {\n  try {\n    const {\n      journalEntriesExists,\n      journeyDiaryExists\n    } = await checkJournalTables();\n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return [];\n    }\n    let entriesData = null;\n    let error = null;\n    if (journalEntriesExists) {\n      try {\n        const {\n          data,\n          error: entriesError\n        } = await supabase.from('journal_entries').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n          ascending: false\n        });\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200')) {\n          const {\n            data: basicData,\n            error: basicError\n          } = await supabase.from('journal_entries').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n            ascending: false\n          });\n          if (!basicError) {\n            entriesData = basicData;\n          } else {\n            error = basicError;\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\n      }\n    }\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        const {\n          data,\n          error: diaryError\n        } = await supabase.from('journey_diary').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n          ascending: false\n        });\n        if (!diaryError) {\n          entriesData = data;\n        } else if (diaryError.message && (diaryError.message.includes('cityId') || diaryError.message.includes('relationship') || diaryError.code === 'PGRST200')) {\n          const {\n            data: basicData,\n            error: basicError\n          } = await supabase.from('journey_diary').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n            ascending: false\n          });\n          if (!basicError) {\n            entriesData = basicData;\n          } else if (!error) {\n            error = basicError;\n          }\n        } else if (!error) {\n          error = diaryError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\n      }\n    }\n    if (!entriesData && error) {\n      throw error;\n    }\n    if (!entriesData || entriesData.length === 0) {\n      return [];\n    }\n    return entriesData.map(entry => {\n      let cityName = 'Ciudad Desconocida';\n      if (entry.cities?.name) {\n        cityName = entry.cities.name;\n      } else if (entry.cityName) {\n        cityName = entry.cityName;\n      } else if (entry.city_name) {\n        cityName = entry.city_name;\n      } else if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find(tag => tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel');\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n        }\n      }\n      return {\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        userId: entry.userId || '',\n        cityId: entry.cityId || '',\n        missionId: entry.missionId || missionId,\n        title: entry.title || 'Entrada sin título',\n        content: entry.content || '',\n        photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n        location: entry.location || null,\n        created_at: entry.created_at || new Date().toISOString(),\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\n        city_name: cityName\n      };\n    });\n  } catch (error) {\n    console.error('Error obteniendo entradas de la misión:', error);\n    throw error;\n  }\n};\nexport const createJournalEntry = async data => {\n  try {\n    console.log('Intentando crear entrada de diario con datos:', data);\n    let cityName = null;\n    try {\n      const {\n        data: cityData,\n        error: cityError\n      } = await supabase.from('cities').select('name').eq('id', data.cityId).single();\n      if (!cityError && cityData && cityData.name) {\n        cityName = cityData.name;\n        console.log('Nombre de ciudad encontrado:', cityName);\n      } else {\n        console.warn('No se pudo obtener el nombre de la ciudad (1):', cityError);\n        const {\n          data: journeyData,\n          error: journeyError\n        } = await supabase.from('journeys').select(`\n            cities (\n              name\n            )\n          `).eq('cityId', data.cityId).single();\n        if (!journeyError && journeyData && journeyData.cities && journeyData.cities.name) {\n          cityName = journeyData.cities.name;\n          console.log('Nombre de ciudad encontrado en journeys:', cityName);\n        } else {\n          console.warn('No se pudo obtener el nombre de la ciudad (2):', journeyError);\n        }\n      }\n    } catch (e) {\n      console.warn('Error al buscar el nombre de la ciudad:', e);\n    }\n    if (!cityName) {\n      try {\n        const {\n          data: missionData,\n          error: missionError\n        } = await supabase.from('journeys_missions').select(`\n            journeyId,\n            journey:journeyId (\n              cityId,\n              cities:cityId (\n                name\n              )\n            )\n          `).eq('id', data.missionId).single();\n        if (!missionError && missionData?.journey?.cities?.name) {\n          cityName = missionData.journey.cities.name;\n          console.log('Nombre de ciudad encontrado a través de la misión:', cityName);\n        } else {\n          console.warn('No se pudo obtener el nombre a través de la misión:', missionError);\n        }\n      } catch (e) {\n        console.warn('Error buscando ciudad a través de misión:', e);\n      }\n    }\n    if (!cityName) {\n      const contentCityMatch = data.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n      if (contentCityMatch && contentCityMatch[1]) {\n        cityName = contentCityMatch[1].trim();\n        console.log('Nombre de ciudad extraído del contenido:', cityName);\n      } else {\n        if (typeof data.cityId === 'string' && data.cityId.length > 2 && !/^[0-9a-f-]+$/.test(data.cityId)) {\n          cityName = data.cityId;\n          console.log('Usando cityId como nombre:', cityName);\n        } else {\n          cityName = 'Ciudad Desconocida';\n          console.warn('Usando nombre de ciudad por defecto');\n        }\n      }\n    }\n    const updatedTags = [...(data.tags || [])];\n    if (cityName && !updatedTags.includes(cityName)) {\n      updatedTags.push(cityName);\n    }\n    try {\n      const {\n        data: tableInfo,\n        error: tableError\n      } = await supabase.from('journal_entries').select('*').limit(1);\n      let columnStructure = {};\n      if (!tableError && tableInfo) {\n        if (tableInfo.length > 0) {\n          const firstRow = tableInfo[0];\n          if (firstRow && typeof firstRow === 'object') {\n            Object.keys(firstRow).forEach(key => {\n              columnStructure[key] = true;\n            });\n            console.log(\"Estructura de columnas detectada:\", Object.keys(columnStructure));\n          }\n        }\n      }\n      const baseData = {\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      };\n      const insertData = Object.assign({}, baseData);\n      if ('user_id' in columnStructure) insertData.user_id = data.userId;else if ('userid' in columnStructure) insertData.userid = data.userId;else if ('userId' in columnStructure) insertData.userId = data.userId;else insertData.userid = data.userId;\n      if ('city_id' in columnStructure) insertData.city_id = data.cityId;else if ('cityid' in columnStructure) insertData.cityid = data.cityId;else if ('cityId' in columnStructure) insertData.cityId = data.cityId;\n      if ('city_name' in columnStructure) insertData.city_name = cityName;else if ('cityname' in columnStructure) insertData.cityname = cityName;else if ('cityName' in columnStructure) insertData.cityName = cityName;\n      if ('mission_id' in columnStructure) insertData.mission_id = data.missionId;else if ('missionid' in columnStructure) insertData.missionid = data.missionId;else if ('missionId' in columnStructure) insertData.missionId = data.missionId;\n      console.log('Intentando insertar con datos adaptados:', insertData);\n      const {\n        error\n      } = await supabase.from('journal_entries').insert(insertData);\n      if (!error) {\n        console.log('Entrada creada exitosamente');\n        return true;\n      }\n      console.warn('Error al insertar con datos adaptados:', error);\n      const insertDataOptions = [{\n        user_id: data.userId,\n        city_id: data.cityId,\n        mission_id: data.missionId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        city_name: cityName,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      }, {\n        userId: data.userId,\n        cityId: data.cityId,\n        missionId: data.missionId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        cityName: cityName,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      }, {\n        userid: data.userId,\n        cityid: data.cityId,\n        missionid: data.missionId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        cityname: cityName,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      }, {\n        userid: data.userId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      }];\n      for (const insertOption of insertDataOptions) {\n        try {\n          console.log('Intentando insertar con formato alternativo:', insertOption);\n          const {\n            error\n          } = await supabase.from('journal_entries').insert(insertOption);\n          if (!error) {\n            console.log('Entrada creada exitosamente con formato alternativo');\n            return true;\n          }\n          console.warn('Error al insertar con este formato:', error);\n        } catch (e) {\n          console.warn('Excepción al insertar con este formato:', e);\n        }\n      }\n      try {\n        const {\n          data: checkData,\n          error: checkError\n        } = await supabase.from('journey_diary').select('id').limit(1);\n        if (!checkError) {\n          console.log('Intentando insertar en journey_diary como alternativa');\n          const {\n            error: diaryError\n          } = await supabase.from('journey_diary').insert({\n            userid: data.userId,\n            title: data.title,\n            content: data.content,\n            photos: data.photos,\n            created_at: new Date().toISOString(),\n            tags: updatedTags\n          });\n          if (!diaryError) {\n            console.log('Entrada creada exitosamente en journey_diary');\n            return true;\n          }\n          console.warn('Error al insertar en journey_diary:', diaryError);\n        }\n      } catch (e) {\n        console.warn('Error comprobando journey_diary:', e);\n      }\n      console.error('No se pudo crear entrada en el diario con ningún formato');\n      return false;\n    } catch (tableErr) {\n      console.error('Error al obtener estructura de tabla:', tableErr);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error inesperado al crear entrada en el diario:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","checkJournalTables","journalEntriesResult","journeyDiaryResult","Promise","allSettled","from","select","limit","journalEntriesExists","status","value","error","journeyDiaryExists","console","getUserJournalEntries","userId","warn","entriesData","data","entriesError","eq","order","ascending","message","includes","code","basicData","basicError","altData","altError","e","possibleQueries","query","diaryData","diaryError","length","organizeCityEntries","missingCityRelation","entriesByCity","forEach","entry","cityName","cities","name","city_name","cityname","city","tags","Array","isArray","commonTags","possibleCityTag","find","tag","toLowerCase","charAt","toUpperCase","content","contentMatch","match","trim","processedEntry","id","Date","now","Math","random","toString","substring","user_id","userid","cityId","city_id","cityid","missionId","mission_id","missionid","undefined","title","photos","location","created_at","toISOString","push","getMissionJournalEntries","map","cityTag","slice","createJournalEntry","log","cityData","cityError","single","journeyData","journeyError","missionData","missionError","journey","contentCityMatch","test","updatedTags","tableInfo","tableError","columnStructure","firstRow","Object","keys","key","baseData","insertData","assign","insert","insertDataOptions","insertOption","checkData","checkError","tableErr"],"sources":["C:/Users/PC/TravelQuest/src/services/journalService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport interface JournalEntryDB {\r\n  id: string;\r\n  userId: string;\r\n  cityId: string;\r\n  missionId?: string;\r\n  title: string;\r\n  content: string;\r\n  photos: string[];\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n  } | null;\r\n  created_at: string;\r\n  tags: string[];\r\n}\r\n\r\nexport interface CityJournalEntry extends JournalEntryDB {\r\n  city_name: string;\r\n}\r\n\r\n/**\r\n * Verifica si existe la tabla journal_entries o journey_diary en la base de datos\r\n * @returns objeto con la información de qué tablas existen\r\n */\r\nexport const checkJournalTables = async (): Promise<{journalEntriesExists: boolean, journeyDiaryExists: boolean}> => {\r\n  try {\r\n    // Probamos si las tablas existen obteniendo solo una fila de cada una\r\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([\r\n      supabase.from('journal_entries').select('id').limit(1),\r\n      supabase.from('journey_diary').select('id').limit(1)\r\n    ]);\r\n    \r\n    return {\r\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\r\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\r\n    };\r\n  } catch (error) {\r\n    console.error('Error verificando tablas del diario:', error);\r\n    return {\r\n      journalEntriesExists: false,\r\n      journeyDiaryExists: false\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene todas las entradas del diario del usuario agrupadas por ciudad\r\n * @param userId ID del usuario \r\n * @returns Entradas del diario agrupadas por ciudad\r\n */\r\nexport const getUserJournalEntries = async (userId: string): Promise<{ [cityName: string]: CityJournalEntry[] }> => {\r\n  try {\r\n    // Verificar qué tablas existen\r\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\r\n    \r\n    if (!journalEntriesExists && !journeyDiaryExists) {\r\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\r\n      return {}; // Devolvemos un objeto vacío\r\n    }\r\n\r\n    let entriesData = null;\r\n    let error = null;\r\n\r\n    // Primero intentamos con journal_entries si existe\r\n    if (journalEntriesExists) {\r\n      try {\r\n        // Intentamos con la relación a cities\r\n        const { data, error: entriesError } = await supabase\r\n          .from('journal_entries')\r\n          .select(`\r\n            *,\r\n            cities:cityid (\r\n              name\r\n            )\r\n          `)\r\n          .eq('userid', userId)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (!entriesError) {\r\n          entriesData = data;\r\n        } else if (entriesError.message && (\r\n          entriesError.message.includes('cityid') || \r\n          entriesError.message.includes('cityId') || \r\n          entriesError.message.includes('relationship') ||\r\n          entriesError.code === 'PGRST200' ||\r\n          entriesError.code === '42703')) {\r\n          \r\n          // Si hay error de relación, intentamos sin la relación y con nombres alternativos\r\n          try {\r\n            const { data: basicData, error: basicError } = await supabase\r\n              .from('journal_entries')\r\n              .select('*')\r\n              .eq('userid', userId)\r\n              .order('created_at', { ascending: false });\r\n            \r\n            if (!basicError) {\r\n              entriesData = basicData;\r\n            } else {\r\n              // Intentar con user_id (otra convención común en PostgreSQL)\r\n              const { data: altData, error: altError } = await supabase\r\n                .from('journal_entries')\r\n                .select('*')\r\n                .eq('user_id', userId)\r\n                .order('created_at', { ascending: false });\r\n              \r\n              if (!altError) {\r\n                entriesData = altData;\r\n              } else {\r\n                error = altError;\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.warn('Error al obtener datos sin relación:', e);\r\n          }\r\n        } else {\r\n          error = entriesError;\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error al obtener datos de journal_entries:', e);\r\n      }\r\n    }\r\n\r\n    // Si no obtuvimos datos de journal_entries o hubo un error, intentamos con journey_diary\r\n    if (!entriesData && journeyDiaryExists) {\r\n      try {\r\n        // Intentamos diferentes convenciones de nombres para las columnas\r\n        const possibleQueries = [\r\n          // Versión 1: Lowercase\r\n          supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', { ascending: false }),\r\n          // Versión 2: Underscore\r\n          supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', { ascending: false }),\r\n        ];\r\n        \r\n        for (const query of possibleQueries) {\r\n          try {\r\n            const { data: diaryData, error: diaryError } = await query;\r\n            if (!diaryError && diaryData && diaryData.length > 0) {\r\n              entriesData = diaryData;\r\n              break;\r\n            }\r\n          } catch (e) {\r\n            // Continuar con la siguiente consulta\r\n            console.warn('Error en consulta alternativa:', e);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error al obtener datos de journey_diary:', e);\r\n      }\r\n    }\r\n\r\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\r\n    if (!entriesData && error) {\r\n      throw error;\r\n    }\r\n\r\n    // Si no hay datos (pero no hubo error), devolvemos un objeto vacío\r\n    if (!entriesData) {\r\n      return {};\r\n    }\r\n    \r\n    // Organizar las entradas por ciudad\r\n    return organizeCityEntries(entriesData, true);\r\n  } catch (error) {\r\n    console.error('Error obteniendo entradas del diario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Organiza las entradas del diario por ciudad\r\n * @param data Datos de las entradas\r\n * @param missingCityRelation Indica si falta la relación con la ciudad\r\n * @returns Entradas organizadas por ciudad\r\n */\r\nconst organizeCityEntries = (\r\n  data: any[] | null, \r\n  missingCityRelation: boolean = false\r\n): { [cityName: string]: CityJournalEntry[] } => {\r\n  const entriesByCity: { [cityName: string]: CityJournalEntry[] } = {};\r\n  \r\n  if (!data || data.length === 0) {\r\n    return entriesByCity;\r\n  }\r\n  \r\n  data.forEach((entry: any) => {\r\n    // Intentar todas las posibles formas del nombre de la ciudad\r\n    let cityName = 'Ciudad Desconocida';\r\n    \r\n    // Orden de prioridad para obtener el nombre de la ciudad\r\n    if (!missingCityRelation && entry.cities?.name) {\r\n      cityName = entry.cities.name;\r\n    } else if (entry.city_name) {\r\n      cityName = entry.city_name;\r\n    } else if (entry.cityName) {\r\n      cityName = entry.cityName;\r\n    } else if (entry.cityname) {\r\n      cityName = entry.cityname;\r\n    } else if (entry.cities && entry.cities.name) {\r\n      cityName = entry.cities.name;\r\n    } else if (entry.city?.name) {\r\n      cityName = entry.city.name;\r\n    } else {\r\n      // Buscar en las etiquetas cualquier nombre que parezca ser de ciudad\r\n      if (entry.tags && Array.isArray(entry.tags)) {\r\n        // Filtrar tags comunes que no son ciudades\r\n        const commonTags = ['misión', 'mission', 'viaje', 'travel', 'foto', 'photo'];\r\n        const possibleCityTag = entry.tags.find((tag: string) => \r\n          !commonTags.includes(tag.toLowerCase()) && \r\n          tag.charAt(0).toUpperCase() === tag.charAt(0) // Primera letra mayúscula\r\n        );\r\n        \r\n        if (possibleCityTag) {\r\n          cityName = possibleCityTag;\r\n        }\r\n      }\r\n      \r\n      // Buscar en el contenido de la entrada\r\n      if (cityName === 'Ciudad Desconocida' && entry.content) {\r\n        const contentMatch = entry.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\r\n        if (contentMatch && contentMatch[1]) {\r\n          cityName = contentMatch[1].trim();\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!entriesByCity[cityName]) {\r\n      entriesByCity[cityName] = [];\r\n    }\r\n    \r\n    // Nos aseguramos de que todos los campos necesarios existan\r\n    const processedEntry: CityJournalEntry = {\r\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\r\n      userId: entry.userId || entry.user_id || entry.userid || '',\r\n      cityId: entry.cityId || entry.city_id || entry.cityid || '',\r\n      missionId: entry.missionId || entry.mission_id || entry.missionid || undefined,\r\n      title: entry.title || 'Entrada sin título',\r\n      content: entry.content || '',\r\n      photos: Array.isArray(entry.photos) ? entry.photos : \r\n              (entry.photos ? [entry.photos] : []),\r\n      location: entry.location || null,\r\n      created_at: entry.created_at || new Date().toISOString(),\r\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\r\n      city_name: cityName\r\n    };\r\n    \r\n    entriesByCity[cityName].push(processedEntry);\r\n  });\r\n\r\n  return entriesByCity;\r\n};\r\n\r\n/**\r\n * Obtiene las entradas del diario relacionadas con una misión específica\r\n * @param userId ID del usuario\r\n * @param missionId ID de la misión\r\n * @returns Entradas del diario relacionadas con la misión\r\n */\r\nexport const getMissionJournalEntries = async (userId: string, missionId: string): Promise<CityJournalEntry[]> => {\r\n  try {\r\n    // Verificar qué tablas existen\r\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\r\n    \r\n    if (!journalEntriesExists && !journeyDiaryExists) {\r\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\r\n      return []; // Devolvemos un array vacío\r\n    }\r\n\r\n    let entriesData = null;\r\n    let error = null;\r\n\r\n    // Primero intentamos con journal_entries si existe\r\n    if (journalEntriesExists) {\r\n      try {\r\n        // Intentamos con la relación a cities\r\n        const { data, error: entriesError } = await supabase\r\n          .from('journal_entries')\r\n          .select(`\r\n            *,\r\n            cities:cityId (\r\n              name\r\n            )\r\n          `)\r\n          .eq('userId', userId)\r\n          .eq('missionId', missionId)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (!entriesError) {\r\n          entriesData = data;\r\n        } else if (entriesError.message && (\r\n          entriesError.message.includes('cityId') || \r\n          entriesError.message.includes('relationship') ||\r\n          entriesError.code === 'PGRST200')) {\r\n          \r\n          // Si hay error de relación, intentamos sin la relación\r\n          const { data: basicData, error: basicError } = await supabase\r\n            .from('journal_entries')\r\n            .select('*')\r\n            .eq('userId', userId)\r\n            .eq('missionId', missionId)\r\n            .order('created_at', { ascending: false });\r\n          \r\n          if (!basicError) {\r\n            entriesData = basicData;\r\n          } else {\r\n            error = basicError;\r\n          }\r\n        } else {\r\n          error = entriesError;\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\r\n      }\r\n    }\r\n\r\n    // Si no obtuvimos datos de journal_entries o hubo error, intentamos con journey_diary\r\n    if (!entriesData && journeyDiaryExists) {\r\n      try {\r\n        // Intentamos con la relación a cities\r\n        const { data, error: diaryError } = await supabase\r\n          .from('journey_diary')\r\n          .select(`\r\n            *,\r\n            cities:cityId (\r\n              name\r\n            )\r\n          `)\r\n          .eq('userId', userId)\r\n          .eq('missionId', missionId)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (!diaryError) {\r\n          entriesData = data;\r\n        } else if (diaryError.message && (\r\n          diaryError.message.includes('cityId') || \r\n          diaryError.message.includes('relationship') ||\r\n          diaryError.code === 'PGRST200')) {\r\n          \r\n          // Si hay error de relación, intentamos sin la relación\r\n          const { data: basicData, error: basicError } = await supabase\r\n            .from('journey_diary')\r\n            .select('*')\r\n            .eq('userId', userId)\r\n            .eq('missionId', missionId)\r\n            .order('created_at', { ascending: false });\r\n          \r\n          if (!basicError) {\r\n            entriesData = basicData;\r\n          } else if (!error) { // Solo guardamos este error si no teníamos uno previo\r\n            error = basicError;\r\n          }\r\n        } else if (!error) { // Solo guardamos este error si no teníamos uno previo\r\n          error = diaryError;\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\r\n      }\r\n    }\r\n\r\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\r\n    if (!entriesData && error) {\r\n      throw error;\r\n    }\r\n\r\n    // Si no hay datos (pero no hubo error), devolvemos un array vacío\r\n    if (!entriesData || entriesData.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    // Procesamos las entradas para asegurar el formato correcto\r\n    return entriesData.map((entry: any) => {\r\n      let cityName = 'Ciudad Desconocida';\r\n      \r\n      if (entry.cities?.name) {\r\n        cityName = entry.cities.name;\r\n      } else if (entry.cityName) {\r\n        cityName = entry.cityName;\r\n      } else if (entry.city_name) {\r\n        cityName = entry.city_name;\r\n      } else if (entry.tags && Array.isArray(entry.tags)) {\r\n        const cityTag = entry.tags.find((tag: string) => \r\n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\r\n        );\r\n        if (cityTag) {\r\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\r\n        }\r\n      }\r\n      \r\n      return {\r\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\r\n        userId: entry.userId || '',\r\n        cityId: entry.cityId || '',\r\n        missionId: entry.missionId || missionId,\r\n        title: entry.title || 'Entrada sin título',\r\n        content: entry.content || '',\r\n        photos: Array.isArray(entry.photos) ? entry.photos : \r\n                (entry.photos ? [entry.photos] : []),\r\n        location: entry.location || null,\r\n        created_at: entry.created_at || new Date().toISOString(),\r\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\r\n        city_name: cityName\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error obteniendo entradas de la misión:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createJournalEntry = async (data: {\r\n  userId: string;\r\n  cityId: string;\r\n  missionId: string;\r\n  title: string;\r\n  content: string;\r\n  photos: string[];\r\n  tags?: string[];\r\n}) => {\r\n  try {\r\n    console.log('Intentando crear entrada de diario con datos:', data);\r\n    \r\n    // Primero, obtener el nombre de la ciudad usando cityId\r\n    let cityName = null;\r\n    try {\r\n      // Consulta directa a la tabla cities\r\n      const { data: cityData, error: cityError } = await supabase\r\n        .from('cities')\r\n        .select('name')\r\n        .eq('id', data.cityId)\r\n        .single();\r\n      \r\n      if (!cityError && cityData && cityData.name) {\r\n        cityName = cityData.name;\r\n        console.log('Nombre de ciudad encontrado:', cityName);\r\n      } else {\r\n        console.warn('No se pudo obtener el nombre de la ciudad (1):', cityError);\r\n        \r\n        // Intento alternativo: buscar en journeys\r\n        const { data: journeyData, error: journeyError } = await supabase\r\n          .from('journeys')\r\n          .select(`\r\n            cities (\r\n              name\r\n            )\r\n          `)\r\n          .eq('cityId', data.cityId)\r\n          .single();\r\n        \r\n        if (!journeyError && journeyData && journeyData.cities && journeyData.cities.name) {\r\n          cityName = journeyData.cities.name;\r\n          console.log('Nombre de ciudad encontrado en journeys:', cityName);\r\n        } else {\r\n          console.warn('No se pudo obtener el nombre de la ciudad (2):', journeyError);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.warn('Error al buscar el nombre de la ciudad:', e);\r\n    }\r\n    \r\n    // Si no pudimos obtener el nombre de la ciudad, vamos a intentar con datos de la misión\r\n    if (!cityName) {\r\n      try {\r\n        // Buscar en la tabla journeys_missions\r\n        const { data: missionData, error: missionError } = await supabase\r\n          .from('journeys_missions')\r\n          .select(`\r\n            journeyId,\r\n            journey:journeyId (\r\n              cityId,\r\n              cities:cityId (\r\n                name\r\n              )\r\n            )\r\n          `)\r\n          .eq('id', data.missionId)\r\n          .single();\r\n        \r\n        if (!missionError && missionData?.journey?.cities?.name) {\r\n          cityName = missionData.journey.cities.name;\r\n          console.log('Nombre de ciudad encontrado a través de la misión:', cityName);\r\n        } else {\r\n          console.warn('No se pudo obtener el nombre a través de la misión:', missionError);\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error buscando ciudad a través de misión:', e);\r\n      }\r\n    }\r\n    \r\n    // Si todavía no tenemos nombre, usar algún valor por defecto\r\n    if (!cityName) {\r\n      // Último intento: verificar si hay texto en el contenido que indique la ciudad\r\n      const contentCityMatch = data.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\r\n      if (contentCityMatch && contentCityMatch[1]) {\r\n        cityName = contentCityMatch[1].trim();\r\n        console.log('Nombre de ciudad extraído del contenido:', cityName);\r\n      } else {\r\n        // Si cityId parece ser un nombre de ciudad, usarlo directamente\r\n        if (typeof data.cityId === 'string' && data.cityId.length > 2 && !/^[0-9a-f-]+$/.test(data.cityId)) {\r\n          cityName = data.cityId;\r\n          console.log('Usando cityId como nombre:', cityName);\r\n        } else {\r\n          cityName = 'Ciudad Desconocida';\r\n          console.warn('Usando nombre de ciudad por defecto');\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Añadir el nombre de la ciudad a las etiquetas\r\n    const updatedTags = [...(data.tags || [])];\r\n    if (cityName && !updatedTags.includes(cityName)) {\r\n      updatedTags.push(cityName);\r\n    }\r\n    \r\n    // NUEVO: Primero, obtener estructura de la tabla para conocer las columnas reales\r\n    try {\r\n      const { data: tableInfo, error: tableError } = await supabase\r\n        .from('journal_entries')\r\n        .select('*')\r\n        .limit(1);\r\n      \r\n      let columnStructure: Record<string, boolean> = {};\r\n      if (!tableError && tableInfo) {\r\n        // Si pudimos obtener datos, analizamos el primer registro para ver las columnas\r\n        if (tableInfo.length > 0) {\r\n          // Usamos un enfoque tipado más seguro\r\n          const firstRow = tableInfo[0];\r\n          if (firstRow && typeof firstRow === 'object') {\r\n            // Iterar sobre las propiedades del objeto de manera segura\r\n            Object.keys(firstRow).forEach(key => {\r\n              columnStructure[key] = true;\r\n            });\r\n            console.log(\"Estructura de columnas detectada:\", Object.keys(columnStructure));\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Preparamos una estructura básica de datos para la inserción\r\n      const baseData: Record<string, any> = {\r\n        title: data.title,\r\n        content: data.content,\r\n        photos: data.photos,\r\n        created_at: new Date().toISOString(),\r\n        tags: updatedTags\r\n      };\r\n      \r\n      // Añadimos los campos de IDs según las columnas detectadas\r\n      const insertData: Record<string, any> = { ...baseData };\r\n      \r\n      // Usuario\r\n      if ('user_id' in columnStructure) insertData.user_id = data.userId;\r\n      else if ('userid' in columnStructure) insertData.userid = data.userId;\r\n      else if ('userId' in columnStructure) insertData.userId = data.userId;\r\n      else insertData.userid = data.userId; // Por defecto\r\n      \r\n      // Ciudad\r\n      if ('city_id' in columnStructure) insertData.city_id = data.cityId;\r\n      else if ('cityid' in columnStructure) insertData.cityid = data.cityId;\r\n      else if ('cityId' in columnStructure) insertData.cityId = data.cityId;\r\n      \r\n      // Nombre de ciudad (si existe columna)\r\n      if ('city_name' in columnStructure) insertData.city_name = cityName;\r\n      else if ('cityname' in columnStructure) insertData.cityname = cityName;\r\n      else if ('cityName' in columnStructure) insertData.cityName = cityName;\r\n      \r\n      // Misión\r\n      if ('mission_id' in columnStructure) insertData.mission_id = data.missionId;\r\n      else if ('missionid' in columnStructure) insertData.missionid = data.missionId;\r\n      else if ('missionId' in columnStructure) insertData.missionId = data.missionId;\r\n      \r\n      console.log('Intentando insertar con datos adaptados:', insertData);\r\n      const { error } = await supabase.from('journal_entries').insert(insertData);\r\n      \r\n      if (!error) {\r\n        console.log('Entrada creada exitosamente');\r\n        return true;\r\n      }\r\n      \r\n      console.warn('Error al insertar con datos adaptados:', error);\r\n      \r\n      // Si falló, intentamos con las tres versiones anteriores\r\n      const insertDataOptions = [\r\n        // Versión 1: snake_case (formato tradicional PostgreSQL)\r\n        {\r\n      user_id: data.userId,\r\n      city_id: data.cityId,\r\n      mission_id: data.missionId,\r\n      title: data.title,\r\n      content: data.content,\r\n      photos: data.photos,\r\n          city_name: cityName,\r\n          created_at: new Date().toISOString(),\r\n          tags: updatedTags\r\n        },\r\n        // Versión 2: camelCase\r\n        {\r\n          userId: data.userId,\r\n          cityId: data.cityId,\r\n          missionId: data.missionId,\r\n          title: data.title,\r\n          content: data.content,\r\n          photos: data.photos,\r\n          cityName: cityName,\r\n      created_at: new Date().toISOString(),\r\n          tags: updatedTags\r\n        },\r\n        // Versión 3: lowercase\r\n        {\r\n      userid: data.userId,\r\n      cityid: data.cityId,\r\n      missionid: data.missionId,\r\n          title: data.title,\r\n          content: data.content,\r\n          photos: data.photos,\r\n          cityname: cityName,\r\n          created_at: new Date().toISOString(),\r\n          tags: updatedTags\r\n        },\r\n        // Versión 4: solo campos obligatorios mínimos\r\n        {\r\n          userid: data.userId,\r\n      title: data.title,\r\n      content: data.content,\r\n      photos: data.photos,\r\n      created_at: new Date().toISOString(),\r\n          tags: updatedTags\r\n        }\r\n      ];\r\n      \r\n      // Intentar cada formato de nombres de columnas\r\n      for (const insertOption of insertDataOptions) {\r\n        try {\r\n          console.log('Intentando insertar con formato alternativo:', insertOption);\r\n          const { error } = await supabase.from('journal_entries').insert(insertOption);\r\n          \r\n          if (!error) {\r\n            console.log('Entrada creada exitosamente con formato alternativo');\r\n            return true;\r\n          }\r\n          \r\n          console.warn('Error al insertar con este formato:', error);\r\n        } catch (e) {\r\n          console.warn('Excepción al insertar con este formato:', e);\r\n        }\r\n      }\r\n      \r\n      // Último intento: usar la tabla journey_diary si está disponible\r\n      try {\r\n        const { data: checkData, error: checkError } = await supabase\r\n          .from('journey_diary')\r\n          .select('id')\r\n          .limit(1);\r\n        \r\n        if (!checkError) {\r\n          // La tabla journey_diary existe, intentamos insertar ahí\r\n          console.log('Intentando insertar en journey_diary como alternativa');\r\n          const { error: diaryError } = await supabase.from('journey_diary').insert({\r\n            userid: data.userId,\r\n            title: data.title,\r\n            content: data.content,\r\n            photos: data.photos,\r\n            created_at: new Date().toISOString(),\r\n            tags: updatedTags\r\n          });\r\n          \r\n          if (!diaryError) {\r\n          console.log('Entrada creada exitosamente en journey_diary');\r\n          return true;\r\n          }\r\n          \r\n          console.warn('Error al insertar en journey_diary:', diaryError);\r\n        }\r\n      } catch (e) {\r\n        console.warn('Error comprobando journey_diary:', e);\r\n      }\r\n      \r\n      // Si llegamos aquí, ninguno de los formatos funcionó\r\n      console.error('No se pudo crear entrada en el diario con ningún formato');\r\n      return false;\r\n    } catch (tableErr) {\r\n      console.error('Error al obtener estructura de tabla:', tableErr);\r\n    return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error inesperado al crear entrada en el diario:', error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch } from 'react-redux';\nimport { supabase } from \"../../services/supabase\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    email = _useState4[0],\n    setEmail = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    password = _useState6[0],\n    setPassword = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    error = _useState8[0],\n    setError = _useState8[1];\n  var dispatch = useDispatch();\n  var handleRegister = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var _yield$supabase$auth$ = yield supabase.auth.signUp({\n            email: email,\n            password: password\n          }),\n          user = _yield$supabase$auth$.user,\n          _error = _yield$supabase$auth$.error;\n        console.log('Respuesta de Supabase:', {\n          user: user,\n          error: _error\n        });\n        if (_error) {\n          setError(_error.message);\n          return;\n        }\n        var _yield$supabase$from$ = yield supabase.from('users').insert([{\n            id: user.id,\n            email: email,\n            username: username\n          }]),\n          insertError = _yield$supabase$from$.error;\n        if (insertError) throw insertError;\n        navigation.navigate('Login');\n      } catch (error) {\n        setError(error.message);\n      }\n    });\n    return function handleRegister() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Crear Cuenta\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Nombre de usuario\",\n      value: username,\n      onChangeText: setUsername\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Contrase\\xF1a\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), error ? _jsx(Text, {\n      style: styles.errorText,\n      children: error\n    }) : null, _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleRegister,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Registrarse\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('Login');\n      },\n      children: _jsx(Text, {\n        style: styles.link,\n        children: \"\\xBFYa tienes cuenta? Inicia sesi\\xF3n\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: '#f5f5f5'\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    marginBottom: 40,\n    color: '#333'\n  },\n  input: {\n    width: '100%',\n    height: 50,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    marginBottom: 15,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  button: {\n    width: '100%',\n    height: 50,\n    backgroundColor: '#4CAF50',\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  link: {\n    marginTop: 20,\n    color: '#4CAF50',\n    textDecorationLine: 'underline'\n  },\n  errorText: {\n    color: 'red',\n    marginTop: 10\n  }\n});\nexport default RegisterScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    },\n    \":is(.flex)\": {\n      \"display\": \"flex\"\n    },\n    \":is(.underline)\": {\n      \"textDecorationLine\": \"underline\"\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  topics: {\n    \"container\": [\"width\"]\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","useDispatch","supabase","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","error","setError","dispatch","handleRegister","_ref2","_asyncToGenerator","_yield$supabase$auth$","auth","signUp","user","console","log","message","_yield$supabase$from$","from","insert","id","insertError","navigate","apply","arguments","style","styles","container","children","title","input","placeholder","value","onChangeText","autoCapitalize","secureTextEntry","errorText","button","onPress","buttonText","link","create","flex","justifyContent","alignItems","padding","backgroundColor","fontSize","fontWeight","marginBottom","color","width","height","borderRadius","paddingHorizontal","borderWidth","borderColor","marginTop","textDecorationLine","_NativeWindStyleSheet","atRules","topics"],"sources":["C:/Users/migue/TravelQuest/src/screens/auth/RegisterScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser, setToken } from '../../features/authSlice';\r\nimport { supabase } from '../../services/supabase';\r\n\r\nconst RegisterScreen = ({ navigation }: any) => {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRegister = async () => {\r\n    try {\r\n      const { user, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      console.log('Respuesta de Supabase:', { user, error });\r\n\r\n      if (error) {\r\n        setError(error.message);\r\n        return;\r\n      }\r\n\r\n      // Guardar el usuario en la tabla de usuarios\r\n      const { error: insertError } = await supabase\r\n        .from('users')\r\n        .insert([{ id: user.id, email, username }]);\r\n\r\n      if (insertError) throw insertError;\r\n\r\n      navigation.navigate('Login'); // Redirigir a la pantalla de inicio de sesión\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Crear Cuenta</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Nombre de usuario\"\r\n        value={username}\r\n        onChangeText={setUsername}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Email\"\r\n        value={email}\r\n        onChangeText={setEmail}\r\n        autoCapitalize=\"none\"\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Contraseña\"\r\n        value={password}\r\n        onChangeText={setPassword}\r\n        secureTextEntry\r\n      />\r\n      {error ? <Text style={styles.errorText}>{error}</Text> : null}\r\n      <TouchableOpacity style={styles.button} onPress={handleRegister}>\r\n        <Text style={styles.buttonText}>Registrarse</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={() => navigation.navigate('Login')}>\r\n        <Text style={styles.link}>¿Ya tienes cuenta? Inicia sesión</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n    marginBottom: 40,\r\n    color: '#333',\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    height: 50,\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    paddingHorizontal: 15,\r\n    marginBottom: 15,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n  },\r\n  button: {\r\n    width: '100%',\r\n    height: 50,\r\n    backgroundColor: '#4CAF50',\r\n    borderRadius: 10,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  link: {\r\n    marginTop: 20,\r\n    color: '#4CAF50',\r\n    textDecorationLine: 'underline',\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\nexport default RegisterScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useSelector } from 'react-redux';\nimport Map from \"../../components/maps\";\nimport * as Location from 'expo-location';\nimport { useNavigation } from '@react-navigation/native';\nimport generateMission from \"../../services/missionGenerator\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar MapScreen = function MapScreen() {\n  var navigation = useNavigation();\n  var _useState = useState({\n      latitude: 40.416775,\n      longitude: -3.703790,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    region = _useState2[0],\n    setRegion = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    searchCity = _useState4[0],\n    setSearchCity = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    duration = _useState6[0],\n    setDuration = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    missionCount = _useState8[0],\n    setMissionCount = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    errorMsg = _useState10[0],\n    setErrorMsg = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    missions = _useState12[0],\n    setMissions = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    cityMarker = _useState14[0],\n    setCityMarker = _useState14[1];\n  var missionsFromRedux = useSelector(function (state) {\n    return state.missions.missions;\n  });\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== 'granted') {\n        setErrorMsg('Se requiere permiso para acceder a la ubicación');\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({});\n      setRegion({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      });\n    })();\n  }, []);\n  var getCityNameFromCoordinates = function () {\n    var _ref2 = _asyncToGenerator(function* (latitude, longitude) {\n      try {\n        console.log('Obteniendo nombre de ciudad para coordenadas:', latitude, longitude);\n        setCityMarker({\n          coordinate: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n          description: 'Obteniendo nombre de la ciudad...'\n        });\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1000);\n        });\n        var response = yield fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=18&addressdetails=1&accept-language=es`, {\n          headers: {\n            'User-Agent': 'TravelQuest/1.0'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Error de la API: ${response.status}`);\n        }\n        var data = yield response.json();\n        console.log('Respuesta de la API:', data);\n        if (data.address) {\n          if (data.address.country_code !== 'es') {\n            setErrorMsg('Esta ubicación está fuera de nuestra zona de influencia. Por favor, selecciona una ciudad en España.');\n            setCityMarker(null);\n            setSearchCity('');\n            return;\n          }\n          var cityName = data.address.city || data.address.town || data.address.village || data.address.suburb || 'Ubicación desconocida';\n          console.log('Nombre de ciudad encontrado:', cityName);\n          setCityMarker({\n            coordinate: {\n              latitude: latitude,\n              longitude: longitude\n            },\n            title: cityName,\n            description: 'Ciudad seleccionada'\n          });\n          setSearchCity(cityName);\n          setErrorMsg(null);\n        } else {\n          console.log('No se encontraron resultados para las coordenadas');\n          setCityMarker({\n            coordinate: {\n              latitude: latitude,\n              longitude: longitude\n            },\n            title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n            description: 'Ubicación seleccionada'\n          });\n          setSearchCity(`Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`);\n        }\n      } catch (error) {\n        console.error('Error al obtener nombre de la ciudad:', error);\n        setErrorMsg('Error al obtener el nombre de la ciudad. Por favor, inténtalo de nuevo.');\n        setCityMarker({\n          coordinate: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n          description: 'Ubicación seleccionada'\n        });\n        setSearchCity(`Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`);\n      }\n    });\n    return function getCityNameFromCoordinates(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getCityCoordinates = function () {\n    var _ref3 = _asyncToGenerator(function* (cityName) {\n      try {\n        console.log('Buscando coordenadas para:', cityName);\n        var response = yield fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(cityName)}&limit=1&addressdetails=1&accept-language=es&featuretype=city&countrycodes=es`, {\n          headers: {\n            'User-Agent': 'TravelQuest/1.0'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Error de la API: ${response.status}`);\n        }\n        var data = yield response.json();\n        console.log('Respuesta de la API:', data);\n        if (data && data[0]) {\n          var _data$ = data[0],\n            lat = _data$.lat,\n            lon = _data$.lon;\n          var _cityName = data[0].address.city || data[0].address.town || data[0].address.village || data[0].display_name.split(',')[0];\n          console.log('Nombre de ciudad encontrado:', _cityName);\n          setCityMarker({\n            coordinate: {\n              latitude: parseFloat(lat),\n              longitude: parseFloat(lon)\n            },\n            title: _cityName,\n            description: 'Ciudad seleccionada'\n          });\n          setRegion({\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lon),\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          });\n          setSearchCity(_cityName);\n          setErrorMsg(null);\n        } else {\n          setErrorMsg('No se encontró la ciudad en España. Por favor, intenta con otra ciudad.');\n        }\n      } catch (error) {\n        console.error('Error al obtener coordenadas:', error);\n        setErrorMsg('Error al obtener las coordenadas de la ciudad');\n      }\n    });\n    return function getCityCoordinates(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleMapPress = function handleMapPress(event) {\n    console.log('Map pressed:', event.nativeEvent);\n    var coordinate = event.nativeEvent.coordinate;\n    if (coordinate) {\n      var latitude = coordinate.latitude,\n        longitude = coordinate.longitude;\n      setCityMarker(null);\n      setTimeout(function () {\n        getCityNameFromCoordinates(latitude, longitude);\n      }, 300);\n    }\n  };\n  var handleSearch = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var durationNum = parseInt(duration);\n      var missionCountNum = parseInt(missionCount);\n      if (searchCity && durationNum && missionCountNum) {\n        try {\n          yield getCityCoordinates(searchCity);\n          yield generateMission(searchCity, durationNum, missionCountNum);\n          navigation.navigate('Missions');\n        } catch (error) {\n          console.error('Error:', error);\n        }\n      } else {\n        console.log('Por favor, ingresa una ciudad, duración y número de misiones válidos.');\n      }\n    });\n    return function handleSearch() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.searchContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Buscar ciudad\",\n        value: searchCity,\n        onChangeText: setSearchCity\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Duraci\\xF3n (d\\xEDas)\",\n        value: duration,\n        onChangeText: setDuration,\n        keyboardType: \"numeric\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"N\\xFAmero de misiones\",\n        value: missionCount,\n        onChangeText: setMissionCount,\n        keyboardType: \"numeric\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: handleSearch,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Buscar Aventuras\"\n        })\n      }), errorMsg ? _jsx(Text, {\n        style: styles.errorText,\n        children: errorMsg\n      }) : null]\n    }), _jsx(View, {\n      style: styles.mapContainer,\n      children: _jsx(Map, {\n        initialRegion: region,\n        markers: [].concat(_toConsumableArray(cityMarker ? [cityMarker] : []), _toConsumableArray(missions.map(function (mission) {\n          return {\n            coordinate: mission.location,\n            title: mission.title,\n            description: mission.description\n          };\n        }))),\n        onMarkerPress: function onMarkerPress(marker) {\n          console.log('Marker pressed in MapScreen:', marker);\n          handleMapPress({\n            nativeEvent: marker\n          });\n        }\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  searchContainer: {\n    backgroundColor: 'white',\n    padding: 15,\n    margin: 10,\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    zIndex: 1\n  },\n  mapContainer: {\n    flex: 1,\n    margin: 10,\n    height: Platform.OS === 'web' ? height * 0.6 : height * 0.5,\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: 'white',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    borderRadius: 10\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n    backgroundColor: 'white'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  errorText: {\n    color: 'red',\n    marginTop: 10,\n    textAlign: 'center'\n  }\n});\nexport default MapScreen;","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","TextInput","TouchableOpacity","Text","Dimensions","Platform","useSelector","Map","Location","useNavigation","generateMission","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","height","MapScreen","navigation","_useState","latitude","longitude","latitudeDelta","longitudeDelta","_useState2","_slicedToArray","region","setRegion","_useState3","_useState4","searchCity","setSearchCity","_useState5","_useState6","duration","setDuration","_useState7","_useState8","missionCount","setMissionCount","_useState9","_useState10","errorMsg","setErrorMsg","_useState11","_useState12","missions","setMissions","_useState13","_useState14","cityMarker","setCityMarker","missionsFromRedux","state","_asyncToGenerator","_yield$Location$reque","requestForegroundPermissionsAsync","status","location","getCurrentPositionAsync","coords","getCityNameFromCoordinates","_ref2","console","log","coordinate","title","toFixed","description","Promise","resolve","setTimeout","response","fetch","headers","ok","Error","data","json","address","country_code","cityName","city","town","village","suburb","error","_x","_x2","apply","arguments","getCityCoordinates","_ref3","encodeURIComponent","_data$","lat","lon","display_name","split","parseFloat","_x3","handleMapPress","event","nativeEvent","handleSearch","_ref4","durationNum","parseInt","missionCountNum","navigate","style","styles","container","children","searchContainer","input","placeholder","value","onChangeText","keyboardType","button","onPress","buttonText","errorText","mapContainer","initialRegion","markers","concat","_toConsumableArray","map","mission","onMarkerPress","marker","create","flex","backgroundColor","padding","margin","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","zIndex","OS","overflow","borderColor","borderWidth","marginBottom","paddingHorizontal","alignItems","color","fontWeight","marginTop","textAlign"],"sources":["C:/Users/Guacter/TravelQuest/src/screens/main/MapScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, TextInput, TouchableOpacity, Text, Dimensions, Platform } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../features/store';\nimport { Mission } from '../../features/missionSlice';\nimport Map from '../../components/maps';\nimport { MapMarker } from '../../components/maps/index';\nimport * as Location from 'expo-location';\nimport { getMissionsByCityAndDuration } from '../../services/missionService';\nimport { useNavigation } from '@react-navigation/native';\nimport { MainTabNavigationProp } from '../../types/navigation';\nimport generateMission from '../../services/missionGenerator';\n\ninterface CityMarker {\n  coordinate: {\n    latitude: number;\n    longitude: number;\n  };\n  title: string;\n  description: string;\n}\n\nconst { width, height } = Dimensions.get('window');\n\nconst MapScreen = () => {\n  const navigation = useNavigation<MainTabNavigationProp>();\n  const [region, setRegion] = useState({\n    latitude: 40.416775,\n    longitude: -3.703790,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n  const [searchCity, setSearchCity] = useState('');\n  const [duration, setDuration] = useState('');\n  const [missionCount, setMissionCount] = useState('');\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n  const [missions, setMissions] = useState<Mission[]>([]);\n  const [cityMarker, setCityMarker] = useState<CityMarker | null>(null);\n\n  const missionsFromRedux = useSelector((state: RootState) => state.missions.missions);\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Se requiere permiso para acceder a la ubicación');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setRegion({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      });\n    })();\n  }, []);\n\n  const getCityNameFromCoordinates = async (latitude: number, longitude: number) => {\n    try {\n      console.log('Obteniendo nombre de ciudad para coordenadas:', latitude, longitude);\n      \n      setCityMarker({\n        coordinate: { latitude, longitude },\n        title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n        description: 'Obteniendo nombre de la ciudad...'\n      });\n\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=18&addressdetails=1&accept-language=es`,\n        {\n          headers: {\n            'User-Agent': 'TravelQuest/1.0'\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Error de la API: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Respuesta de la API:', data);\n      \n      if (data.address) {\n        // Verificar si la ubicación está en España\n        if (data.address.country_code !== 'es') {\n          setErrorMsg('Esta ubicación está fuera de nuestra zona de influencia. Por favor, selecciona una ciudad en España.');\n          setCityMarker(null);\n          setSearchCity('');\n          return;\n        }\n\n        const cityName = data.address.city || data.address.town || data.address.village || data.address.suburb || 'Ubicación desconocida';\n        console.log('Nombre de ciudad encontrado:', cityName);\n\n        setCityMarker({\n          coordinate: { latitude, longitude },\n          title: cityName,\n          description: 'Ciudad seleccionada'\n        });\n        setSearchCity(cityName);\n        setErrorMsg(null);\n      } else {\n        console.log('No se encontraron resultados para las coordenadas');\n        setCityMarker({\n          coordinate: { latitude, longitude },\n          title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n          description: 'Ubicación seleccionada'\n        });\n        setSearchCity(`Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`);\n      }\n    } catch (error) {\n      console.error('Error al obtener nombre de la ciudad:', error);\n      setErrorMsg('Error al obtener el nombre de la ciudad. Por favor, inténtalo de nuevo.');\n      setCityMarker({\n        coordinate: { latitude, longitude },\n        title: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,\n        description: 'Ubicación seleccionada'\n      });\n      setSearchCity(`Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`);\n    }\n  };\n\n  const getCityCoordinates = async (cityName: string) => {\n    try {\n      console.log('Buscando coordenadas para:', cityName);\n      \n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(cityName)}&limit=1&addressdetails=1&accept-language=es&featuretype=city&countrycodes=es`,\n        {\n          headers: {\n            'User-Agent': 'TravelQuest/1.0'\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Error de la API: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Respuesta de la API:', data);\n      \n      if (data && data[0]) {\n        const { lat, lon } = data[0];\n        const cityName = data[0].address.city || data[0].address.town || data[0].address.village || data[0].display_name.split(',')[0];\n        console.log('Nombre de ciudad encontrado:', cityName);\n        \n        setCityMarker({\n          coordinate: { \n            latitude: parseFloat(lat), \n            longitude: parseFloat(lon) \n          },\n          title: cityName,\n          description: 'Ciudad seleccionada'\n        });\n        \n        setRegion({\n          latitude: parseFloat(lat),\n          longitude: parseFloat(lon),\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421,\n        });\n        \n        setSearchCity(cityName);\n        setErrorMsg(null);\n      } else {\n        setErrorMsg('No se encontró la ciudad en España. Por favor, intenta con otra ciudad.');\n      }\n    } catch (error) {\n      console.error('Error al obtener coordenadas:', error);\n      setErrorMsg('Error al obtener las coordenadas de la ciudad');\n    }\n  };\n\n  const handleMapPress = (event: any) => {\n    console.log('Map pressed:', event.nativeEvent);\n    const { coordinate } = event.nativeEvent;\n    if (coordinate) {\n      const { latitude, longitude } = coordinate;\n      // Limpiar el marcador anterior\n      setCityMarker(null);\n      // Aumentar el delay para asegurar que el marcador anterior se limpie\n      setTimeout(() => {\n        getCityNameFromCoordinates(latitude, longitude);\n      }, 300);\n    }\n  };\n\n  const handleSearch = async () => {\n    const durationNum = parseInt(duration);\n    const missionCountNum = parseInt(missionCount);\n    \n    if (searchCity && durationNum && missionCountNum) {\n      try {\n        await getCityCoordinates(searchCity);\n        //Aqui tengo que crear los viajes\n        await generateMission(searchCity, durationNum, missionCountNum);\n        navigation.navigate('Missions');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else {\n      console.log('Por favor, ingresa una ciudad, duración y número de misiones válidos.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.searchContainer}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Buscar ciudad\"\n          value={searchCity}\n          onChangeText={setSearchCity}\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Duración (días)\"\n          value={duration}\n          onChangeText={setDuration}\n          keyboardType=\"numeric\"\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Número de misiones\"\n          value={missionCount}\n          onChangeText={setMissionCount}\n          keyboardType=\"numeric\"\n        />\n        <TouchableOpacity style={styles.button} onPress={handleSearch}>\n          <Text style={styles.buttonText}>Buscar Aventuras</Text>\n        </TouchableOpacity>\n        {errorMsg ? <Text style={styles.errorText}>{errorMsg}</Text> : null}\n      </View>\n      \n      <View style={styles.mapContainer}>\n        <Map\n          initialRegion={region}\n          markers={[\n            ...(cityMarker ? [cityMarker] : []),\n            ...missions.map((mission) => ({\n              coordinate: mission.location,\n              title: mission.title,\n              description: mission.description\n            }))\n          ]}\n          onMarkerPress={(marker) => {\n            console.log('Marker pressed in MapScreen:', marker);\n            handleMapPress({ nativeEvent: marker });\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  searchContainer: {\n    backgroundColor: 'white',\n    padding: 15,\n    margin: 10,\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    zIndex: 1,\n  },\n  mapContainer: {\n    flex: 1,\n    margin: 10,\n    height: Platform.OS === 'web' ? height * 0.6 : height * 0.5,\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: 'white',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    borderRadius: 10,\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n    backgroundColor: 'white',\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 5,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n  errorText: {\n    color: 'red',\n    marginTop: 10,\n    textAlign: 'center',\n  }\n});\n\nexport default MapScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport class NotificationService {\n  static async registerForPushNotificationsAsync() {\n    let token;\n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    if (Device.isDevice) {\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Failed to get push token for push notification!');\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n    } else {\n      console.log('Must use physical device for Push Notifications');\n    }\n    return token;\n  }\n  static async scheduleNotification(title, body, data = {}) {\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title,\n        body,\n        data\n      },\n      trigger: null\n    });\n  }\n}","map":{"version":3,"names":["Notifications","Device","Platform","NotificationService","registerForPushNotificationsAsync","token","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","console","log","getExpoPushTokenAsync","data","scheduleNotification","title","body","scheduleNotificationAsync","content","trigger"],"sources":["C:/Users/PC/TravelQuest/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport * as Device from 'expo-device';\r\nimport { Platform } from 'react-native';\r\n\r\nexport class NotificationService {\r\n    static async registerForPushNotificationsAsync() {\r\n        let token;\r\n\r\n        if (Platform.OS === 'android') {\r\n            await Notifications.setNotificationChannelAsync('default', {\r\n                name: 'default',\r\n                importance: Notifications.AndroidImportance.MAX,\r\n                vibrationPattern: [0, 250, 250, 250],\r\n                lightColor: '#FF231F7C',\r\n            });\r\n        }\r\n\r\n        if (Device.isDevice) {\r\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n            let finalStatus = existingStatus;\r\n\r\n            if (existingStatus !== 'granted') {\r\n                const { status } = await Notifications.requestPermissionsAsync();\r\n                finalStatus = status;\r\n            }\r\n\r\n            if (finalStatus !== 'granted') {\r\n                console.log('Failed to get push token for push notification!');\r\n                return;\r\n            }\r\n\r\n            token = (await Notifications.getExpoPushTokenAsync()).data;\r\n        } else {\r\n            console.log('Must use physical device for Push Notifications');\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    static async scheduleNotification(title: string, body: string, data: any = {}) {\r\n        await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n                title,\r\n                body,\r\n                data,\r\n            },\r\n            trigger: null, // Se enviar√° inmediatamente\r\n        });\r\n    }\r\n} "],"mappings":"AAAA,OAAO,KAAKA,aAAa,MAAM,oBAAoB;AACnD,OAAO,KAAKC,MAAM,MAAM,aAAa;AAAC,OAAAC,QAAA;AAGtC,OAAO,MAAMC,mBAAmB,CAAC;EAC7B,aAAaC,iCAAiCA,CAAA,EAAG;IAC7C,IAAIC,KAAK;IAET,IAAIH,QAAQ,CAACI,EAAE,KAAK,SAAS,EAAE;MAC3B,MAAMN,aAAa,CAACO,2BAA2B,CAAC,SAAS,EAAE;QACvDC,IAAI,EAAE,SAAS;QACfC,UAAU,EAAET,aAAa,CAACU,iBAAiB,CAACC,GAAG;QAC/CC,gBAAgB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QACpCC,UAAU,EAAE;MAChB,CAAC,CAAC;IACN;IAEA,IAAIZ,MAAM,CAACa,QAAQ,EAAE;MACjB,MAAM;QAAEC,MAAM,EAAEC;MAAe,CAAC,GAAG,MAAMhB,aAAa,CAACiB,mBAAmB,CAAC,CAAC;MAC5E,IAAIC,WAAW,GAAGF,cAAc;MAEhC,IAAIA,cAAc,KAAK,SAAS,EAAE;QAC9B,MAAM;UAAED;QAAO,CAAC,GAAG,MAAMf,aAAa,CAACmB,uBAAuB,CAAC,CAAC;QAChED,WAAW,GAAGH,MAAM;MACxB;MAEA,IAAIG,WAAW,KAAK,SAAS,EAAE;QAC3BE,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9D;MACJ;MAEAhB,KAAK,GAAG,CAAC,MAAML,aAAa,CAACsB,qBAAqB,CAAC,CAAC,EAAEC,IAAI;IAC9D,CAAC,MAAM;MACHH,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAClE;IAEA,OAAOhB,KAAK;EAChB;EAEA,aAAamB,oBAAoBA,CAACC,KAAa,EAAEC,IAAY,EAAEH,IAAS,GAAG,CAAC,CAAC,EAAE;IAC3E,MAAMvB,aAAa,CAAC2B,yBAAyB,CAAC;MAC1CC,OAAO,EAAE;QACLH,KAAK;QACLC,IAAI;QACJH;MACJ,CAAC;MACDM,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
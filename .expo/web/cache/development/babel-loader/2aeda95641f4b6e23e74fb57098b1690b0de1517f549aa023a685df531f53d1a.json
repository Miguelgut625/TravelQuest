{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CLOUDINARY_CONFIG } from \"../config/cloudinary\";\nvar CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\nvar CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\nvar CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\nexport var isCloudinaryConfigured = function isCloudinaryConfigured() {\n  return !!CLOUDINARY_CONFIG.CLOUD_NAME && !!CLOUDINARY_CONFIG.UPLOAD_PRESET;\n};\nexport var getCloudinaryConfigInfo = function getCloudinaryConfigInfo() {\n  var isConfigured = isCloudinaryConfigured();\n  return {\n    isConfigured: isConfigured,\n    usingFallback: __DEV__ && !isConfigured,\n    cloudName: CLOUDINARY_CONFIG.CLOUD_NAME,\n    uploadPreset: CLOUDINARY_CONFIG.UPLOAD_PRESET\n  };\n};\nvar isBase64Image = function isBase64Image(uri) {\n  return uri.startsWith('data:image');\n};\nexport var uploadImageToCloudinary = function () {\n  var _ref = _asyncToGenerator(function* (imageUri, missionId) {\n    if (!isCloudinaryConfigured()) {\n      if (__DEV__) {\n        console.warn('Cloudinary no está configurado. En modo de desarrollo, retornando URI local.');\n        return imageUri;\n      }\n      throw new Error('Cloudinary no está configurado correctamente');\n    }\n    try {\n      var formData = new FormData();\n      if (imageUri.startsWith('data:image')) {\n        formData.append('file', imageUri);\n      } else {\n        var filename = imageUri.split('/').pop() || `mission_${missionId}_${Date.now()}`;\n        var file = {\n          uri: imageUri,\n          type: 'image/jpeg',\n          name: filename\n        };\n        formData.append('file', file);\n      }\n      formData.append('upload_preset', CLOUDINARY_CONFIG.UPLOAD_PRESET);\n      if (CLOUDINARY_CONFIG.FOLDER) {\n        formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\n      }\n      if (CLOUDINARY_CONFIG.TRANSFORMATION) {\n        if (CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH) {\n          formData.append('width', CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH.toString());\n        }\n        if (CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT) {\n          formData.append('height', CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT.toString());\n        }\n        if (CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY) {\n          formData.append('quality', CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY.toString());\n        }\n      }\n      var cloudinaryUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.CLOUD_NAME}/upload`;\n      console.log('Intentando subir imagen a:', cloudinaryUrl);\n      var response = yield fetch(cloudinaryUrl, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        var errorText = yield response.text();\n        throw new Error(`Error en la respuesta de Cloudinary (${response.status}): ${errorText}`);\n      }\n      var data = yield response.json();\n      console.log('Imagen subida exitosamente a Cloudinary:', data.secure_url);\n      return data.secure_url;\n    } catch (error) {\n      console.error('Error subiendo imagen a Cloudinary:', error);\n      if (__DEV__) {\n        console.warn('En modo desarrollo, retornando URI local como fallback.');\n        return imageUri;\n      }\n      throw error;\n    }\n  });\n  return function uploadImageToCloudinary(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CLOUDINARY_CONFIG","CLOUDINARY_CLOUD_NAME","CLOUD_NAME","CLOUDINARY_UPLOAD_PRESET","UPLOAD_PRESET","CLOUDINARY_URL","isCloudinaryConfigured","getCloudinaryConfigInfo","isConfigured","usingFallback","__DEV__","cloudName","uploadPreset","isBase64Image","uri","startsWith","uploadImageToCloudinary","_ref","_asyncToGenerator","imageUri","missionId","console","warn","Error","formData","FormData","append","filename","split","pop","Date","now","file","type","name","FOLDER","TRANSFORMATION","WIDTH","toString","HEIGHT","QUALITY","cloudinaryUrl","log","response","fetch","method","body","ok","errorText","text","status","data","json","secure_url","error","_x","_x2","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/cloudinaryService.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\nimport { CLOUDINARY_CONFIG } from '../config/cloudinary';\r\n\r\n// Configuración de Cloudinary\r\nconst CLOUDINARY_CLOUD_NAME = CLOUDINARY_CONFIG.CLOUD_NAME;\r\nconst CLOUDINARY_UPLOAD_PRESET = CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\nconst CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;\r\n\r\n/**\r\n * Verifica si la configuración de Cloudinary es válida\r\n * @returns {boolean} true si la configuración es válida\r\n */\r\nexport const isCloudinaryConfigured = () => {\r\n  return !!CLOUDINARY_CONFIG.CLOUD_NAME && !!CLOUDINARY_CONFIG.UPLOAD_PRESET;\r\n};\r\n\r\n/**\r\n * Obtiene detalles sobre la configuración actual de Cloudinary\r\n * @returns Objeto con información sobre el estado de la configuración\r\n */\r\nexport const getCloudinaryConfigInfo = () => {\r\n  const isConfigured = isCloudinaryConfigured();\r\n  \r\n  return {\r\n    isConfigured,\r\n    usingFallback: __DEV__ && !isConfigured,\r\n    cloudName: CLOUDINARY_CONFIG.CLOUD_NAME,\r\n    uploadPreset: CLOUDINARY_CONFIG.UPLOAD_PRESET\r\n  };\r\n};\r\n\r\n/**\r\n * Comprueba si una URL es una imagen en formato base64\r\n */\r\nconst isBase64Image = (uri: string): boolean => {\r\n  return uri.startsWith('data:image');\r\n};\r\n\r\n/**\r\n * Sube una imagen a Cloudinary\r\n * @param uri URI de la imagen local\r\n * @param missionId ID de la misión asociada a la imagen\r\n * @returns URL de la imagen subida a Cloudinary\r\n */\r\nexport const uploadImageToCloudinary = async (imageUri: string, missionId: string): Promise<string> => {\r\n  // Verificar si Cloudinary está configurado\r\n  if (!isCloudinaryConfigured()) {\r\n    if (__DEV__) {\r\n      console.warn('Cloudinary no está configurado. En modo de desarrollo, retornando URI local.');\r\n      return imageUri;\r\n    }\r\n    throw new Error('Cloudinary no está configurado correctamente');\r\n  }\r\n\r\n  try {\r\n    // Convertir URI a base64 para plataformas web\r\n    let formData = new FormData();\r\n    \r\n    // En web, el URI puede ser una cadena base64\r\n    if (imageUri.startsWith('data:image')) {\r\n      formData.append('file', imageUri);\r\n    } else {\r\n      // En dispositivos móviles, creamos un objeto de archivo\r\n      const filename = imageUri.split('/').pop() || `mission_${missionId}_${Date.now()}`;\r\n      \r\n      // Crear un objeto de archivo para supabase\r\n      const file = {\r\n        uri: imageUri,\r\n        type: 'image/jpeg',\r\n        name: filename\r\n      };\r\n      \r\n      // @ts-ignore - TypeScript no reconoce correctamente el tipo para React Native\r\n      formData.append('file', file);\r\n    }\r\n    \r\n    // Añadir parámetros para Cloudinary\r\n    formData.append('upload_preset', CLOUDINARY_CONFIG.UPLOAD_PRESET);\r\n    \r\n    // Añadir carpeta si está configurada\r\n    if (CLOUDINARY_CONFIG.FOLDER) {\r\n      formData.append('folder', CLOUDINARY_CONFIG.FOLDER);\r\n    }\r\n    \r\n    // Añadir transformaciones si están configuradas\r\n    if (CLOUDINARY_CONFIG.TRANSFORMATION) {\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH) {\r\n        formData.append('width', CLOUDINARY_CONFIG.TRANSFORMATION.WIDTH.toString());\r\n      }\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT) {\r\n        formData.append('height', CLOUDINARY_CONFIG.TRANSFORMATION.HEIGHT.toString());\r\n      }\r\n      if (CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY) {\r\n        formData.append('quality', CLOUDINARY_CONFIG.TRANSFORMATION.QUALITY.toString());\r\n      }\r\n    }\r\n    \r\n    // Crear URL para la subida a Cloudinary\r\n    const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.CLOUD_NAME}/upload`;\r\n    console.log('Intentando subir imagen a:', cloudinaryUrl);\r\n    \r\n    // Realizar la solicitud\r\n    const response = await fetch(cloudinaryUrl, {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n    \r\n    // Verificar respuesta\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error en la respuesta de Cloudinary (${response.status}): ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Imagen subida exitosamente a Cloudinary:', data.secure_url);\r\n    \r\n    return data.secure_url;\r\n  } catch (error: any) {\r\n    console.error('Error subiendo imagen a Cloudinary:', error);\r\n    \r\n    if (__DEV__) {\r\n      console.warn('En modo desarrollo, retornando URI local como fallback.');\r\n      return imageUri;\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { supabase } from \"./supabase\";\nexport const getUserPoints = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('points').eq('id', userId).maybeSingle();\n    if (error) throw error;\n    return data?.points || 0;\n  } catch (error) {\n    console.error('Error obteniendo puntos del usuario:', error);\n    return 0;\n  }\n};\nexport const addPointsToUser = async (userId, points) => {\n  try {\n    const currentPoints = await getUserPoints(userId);\n    const {\n      error\n    } = await supabase.from('users').update({\n      points: currentPoints + points,\n      updated_at: new Date().toISOString()\n    }).eq('id', userId);\n    if (error) throw error;\n    return currentPoints + points;\n  } catch (error) {\n    console.error('Error añadiendo puntos al usuario:', error);\n    throw error;\n  }\n};\nexport const completeMission = async (missionId, userId) => {\n  try {\n    const {\n      data: mission,\n      error: missionError\n    } = await supabase.from('journeys_missions').select(`\n        challenge:challenges (\n          points\n        )\n      `).eq('id', missionId).single();\n    if (missionError) throw missionError;\n    const {\n      error: updateError\n    } = await supabase.from('journeys_missions').update({\n      completed: true\n    }).eq('id', missionId);\n    if (updateError) throw updateError;\n    const points = mission.challenge.points;\n    await addPointsToUser(userId, points);\n    return points;\n  } catch (error) {\n    console.error('Error completando la misión:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","getUserPoints","userId","data","error","from","select","eq","maybeSingle","points","console","addPointsToUser","currentPoints","update","updated_at","Date","toISOString","completeMission","missionId","mission","missionError","single","updateError","completed","challenge"],"sources":["C:/Users/migue/TravelQuest/src/services/pointsService.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const getUserPoints = async (userId: string) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('users')\r\n            .select('points')\r\n            .eq('id', userId)\r\n            .maybeSingle();\r\n\r\n        if (error) throw error;\r\n\r\n        return data?.points || 0;\r\n    } catch (error) {\r\n        console.error('Error obteniendo puntos del usuario:', error);\r\n        return 0; // Retornamos 0 en caso de error\r\n    }\r\n};\r\n\r\nexport const addPointsToUser = async (userId: string, points: number) => {\r\n    try {\r\n        // Primero obtenemos los puntos actuales\r\n        const currentPoints = await getUserPoints(userId);\r\n\r\n        // Actualizamos los puntos\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({\r\n                points: currentPoints + points,\r\n                updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId);\r\n\r\n        if (error) throw error;\r\n\r\n        return currentPoints + points;\r\n    } catch (error) {\r\n        console.error('Error añadiendo puntos al usuario:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const completeMission = async (missionId: string, userId: string) => {\r\n    try {\r\n        // Primero obtenemos los puntos de la misión\r\n        const { data: mission, error: missionError } = await supabase\r\n            .from('journeys_missions')\r\n            .select(`\r\n        challenge:challenges (\r\n          points\r\n        )\r\n      `)\r\n            .eq('id', missionId)\r\n            .single();\r\n\r\n        if (missionError) throw missionError;\r\n\r\n        // Marcar la misión como completada\r\n        const { error: updateError } = await supabase\r\n            .from('journeys_missions')\r\n            .update({ completed: true })\r\n            .eq('id', missionId);\r\n\r\n        if (updateError) throw updateError;\r\n\r\n        // Añadir los puntos al usuario\r\n        const points = mission.challenge.points;\r\n        await addPointsToUser(userId, points);\r\n\r\n        return points;\r\n    } catch (error) {\r\n        console.error('Error completando la misión:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,QAAQ;AAEjB,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAc,IAAK;EACnD,IAAI;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACjCK,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,QAAQ,CAAC,CAChBC,EAAE,CAAC,IAAI,EAAEL,MAAM,CAAC,CAChBM,WAAW,CAAC,CAAC;IAElB,IAAIJ,KAAK,EAAE,MAAMA,KAAK;IAEtB,OAAOD,IAAI,EAAEM,MAAM,IAAI,CAAC;EAC5B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZM,OAAO,CAACN,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,CAAC;EACZ;AACJ,CAAC;AAED,OAAO,MAAMO,eAAe,GAAG,MAAAA,CAAOT,MAAc,EAAEO,MAAc,KAAK;EACrE,IAAI;IAEA,MAAMG,aAAa,GAAG,MAAMX,aAAa,CAACC,MAAM,CAAC;IAGjD,MAAM;MAAEE;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC3BK,IAAI,CAAC,OAAO,CAAC,CACbQ,MAAM,CAAC;MACJJ,MAAM,EAAEG,aAAa,GAAGH,MAAM;MAC9BK,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACvC,CAAC,CAAC,CACDT,EAAE,CAAC,IAAI,EAAEL,MAAM,CAAC;IAErB,IAAIE,KAAK,EAAE,MAAMA,KAAK;IAEtB,OAAOQ,aAAa,GAAGH,MAAM;EACjC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZM,OAAO,CAACN,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMa,eAAe,GAAG,MAAAA,CAAOC,SAAiB,EAAEhB,MAAc,KAAK;EACxE,IAAI;IAEA,MAAM;MAAEC,IAAI,EAAEgB,OAAO;MAAEf,KAAK,EAAEgB;IAAa,CAAC,GAAG,MAAMpB,QAAQ,CACxDK,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC;AACpB;AACA;AACA;AACA,OAAO,CAAC,CACKC,EAAE,CAAC,IAAI,EAAEW,SAAS,CAAC,CACnBG,MAAM,CAAC,CAAC;IAEb,IAAID,YAAY,EAAE,MAAMA,YAAY;IAGpC,MAAM;MAAEhB,KAAK,EAAEkB;IAAY,CAAC,GAAG,MAAMtB,QAAQ,CACxCK,IAAI,CAAC,mBAAmB,CAAC,CACzBQ,MAAM,CAAC;MAAEU,SAAS,EAAE;IAAK,CAAC,CAAC,CAC3BhB,EAAE,CAAC,IAAI,EAAEW,SAAS,CAAC;IAExB,IAAII,WAAW,EAAE,MAAMA,WAAW;IAGlC,MAAMb,MAAM,GAAGU,OAAO,CAACK,SAAS,CAACf,MAAM;IACvC,MAAME,eAAe,CAACT,MAAM,EAAEO,MAAM,CAAC;IAErC,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZM,OAAO,CAACN,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true\n  })\n});\nclass NotificationService {\n  constructor() {\n    this.configureNotifications();\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  async configureNotifications() {\n    try {\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Permiso para notificaciones denegado');\n        return;\n      }\n      if (Platform.OS === 'android') {\n        await Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n    } catch (error) {\n      console.error('Error al configurar notificaciones:', error);\n    }\n  }\n  async scheduleLocalNotification(title, body, trigger) {\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Las notificaciones locales no están disponibles en web');\n        return;\n      }\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title,\n          body,\n          sound: true,\n          priority: Notifications.AndroidNotificationPriority.HIGH\n        },\n        trigger\n      });\n    } catch (error) {\n      console.error('Error al programar notificación local:', error);\n    }\n  }\n  async cancelAllNotifications() {\n    await Notifications.cancelAllScheduledNotificationsAsync();\n  }\n  async cancelNotification(notificationId) {\n    await Notifications.cancelScheduledNotificationAsync(notificationId);\n  }\n}\nexport default NotificationService;","map":{"version":3,"names":["Notifications","Platform","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","NotificationService","constructor","configureNotifications","getInstance","instance","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","console","log","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","error","scheduleLocalNotification","title","body","trigger","scheduleNotificationAsync","content","sound","priority","AndroidNotificationPriority","HIGH","cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelNotification","notificationId","cancelScheduledNotificationAsync"],"sources":["C:/Users/PC/TravelQuest/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport { Platform } from 'react-native';\n\n// Configurar el comportamiento de las notificaciones\nNotifications.setNotificationHandler({\n    handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true,\n    }),\n});\n\nclass NotificationService {\n    private static instance: NotificationService;\n\n    private constructor() {\n        this.configureNotifications();\n    }\n\n    public static getInstance(): NotificationService {\n        if (!NotificationService.instance) {\n            NotificationService.instance = new NotificationService();\n        }\n        return NotificationService.instance;\n    }\n\n    private async configureNotifications() {\n        try {\n            // Solicitar permisos\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n\n            if (existingStatus !== 'granted') {\n                const { status } = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n\n            if (finalStatus !== 'granted') {\n                console.log('Permiso para notificaciones denegado');\n                return;\n            }\n\n            // Configurar el canal de notificaciones para Android\n            if (Platform.OS === 'android') {\n                await Notifications.setNotificationChannelAsync('default', {\n                    name: 'default',\n                    importance: Notifications.AndroidImportance.MAX,\n                    vibrationPattern: [0, 250, 250, 250],\n                    lightColor: '#FF231F7C',\n                });\n            }\n        } catch (error) {\n            console.error('Error al configurar notificaciones:', error);\n        }\n    }\n\n    // Método para programar una notificación local\n    public async scheduleLocalNotification(\n        title: string,\n        body: string,\n        trigger: Notifications.NotificationTriggerInput\n    ) {\n        try {\n            // Verificar si estamos en web\n            if (Platform.OS === 'web') {\n                console.log('Las notificaciones locales no están disponibles en web');\n                return;\n            }\n\n            await Notifications.scheduleNotificationAsync({\n                content: {\n                    title,\n                    body,\n                    sound: true,\n                    priority: Notifications.AndroidNotificationPriority.HIGH,\n                },\n                trigger,\n            });\n        } catch (error) {\n            console.error('Error al programar notificación local:', error);\n        }\n    }\n\n    // Método para cancelar todas las notificaciones programadas\n    public async cancelAllNotifications() {\n        await Notifications.cancelAllScheduledNotificationsAsync();\n    }\n\n    // Método para cancelar una notificación específica por ID\n    public async cancelNotification(notificationId: string) {\n        await Notifications.cancelScheduledNotificationAsync(notificationId);\n    }\n}\n\nexport default NotificationService; "],"mappings":"AAAA,OAAO,KAAKA,aAAa,MAAM,oBAAoB;AAAC,OAAAC,QAAA;AAIpDD,aAAa,CAACE,sBAAsB,CAAC;EACjCC,kBAAkB,EAAE,MAAAA,CAAA,MAAa;IAC7BC,eAAe,EAAE,IAAI;IACrBC,eAAe,EAAE,IAAI;IACrBC,cAAc,EAAE;EACpB,CAAC;AACL,CAAC,CAAC;AAEF,MAAMC,mBAAmB,CAAC;EAGdC,WAAWA,CAAA,EAAG;IAClB,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACjC;EAEA,OAAcC,WAAWA,CAAA,EAAwB;IAC7C,IAAI,CAACH,mBAAmB,CAACI,QAAQ,EAAE;MAC/BJ,mBAAmB,CAACI,QAAQ,GAAG,IAAIJ,mBAAmB,CAAC,CAAC;IAC5D;IACA,OAAOA,mBAAmB,CAACI,QAAQ;EACvC;EAEA,MAAcF,sBAAsBA,CAAA,EAAG;IACnC,IAAI;MAEA,MAAM;QAAEG,MAAM,EAAEC;MAAe,CAAC,GAAG,MAAMb,aAAa,CAACc,mBAAmB,CAAC,CAAC;MAC5E,IAAIC,WAAW,GAAGF,cAAc;MAEhC,IAAIA,cAAc,KAAK,SAAS,EAAE;QAC9B,MAAM;UAAED;QAAO,CAAC,GAAG,MAAMZ,aAAa,CAACgB,uBAAuB,CAAC,CAAC;QAChED,WAAW,GAAGH,MAAM;MACxB;MAEA,IAAIG,WAAW,KAAK,SAAS,EAAE;QAC3BE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACnD;MACJ;MAGA,IAAIjB,QAAQ,CAACkB,EAAE,KAAK,SAAS,EAAE;QAC3B,MAAMnB,aAAa,CAACoB,2BAA2B,CAAC,SAAS,EAAE;UACvDC,IAAI,EAAE,SAAS;UACfC,UAAU,EAAEtB,aAAa,CAACuB,iBAAiB,CAACC,GAAG;UAC/CC,gBAAgB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UACpCC,UAAU,EAAE;QAChB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZV,OAAO,CAACU,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC/D;EACJ;EAGA,MAAaC,yBAAyBA,CAClCC,KAAa,EACbC,IAAY,EACZC,OAA+C,EACjD;IACE,IAAI;MAEA,IAAI9B,QAAQ,CAACkB,EAAE,KAAK,KAAK,EAAE;QACvBF,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE;MACJ;MAEA,MAAMlB,aAAa,CAACgC,yBAAyB,CAAC;QAC1CC,OAAO,EAAE;UACLJ,KAAK;UACLC,IAAI;UACJI,KAAK,EAAE,IAAI;UACXC,QAAQ,EAAEnC,aAAa,CAACoC,2BAA2B,CAACC;QACxD,CAAC;QACDN;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZV,OAAO,CAACU,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAClE;EACJ;EAGA,MAAaW,sBAAsBA,CAAA,EAAG;IAClC,MAAMtC,aAAa,CAACuC,oCAAoC,CAAC,CAAC;EAC9D;EAGA,MAAaC,kBAAkBA,CAACC,cAAsB,EAAE;IACpD,MAAMzC,aAAa,CAAC0C,gCAAgC,CAACD,cAAc,CAAC;EACxE;AACJ;AAEA,eAAelC,mBAAmB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
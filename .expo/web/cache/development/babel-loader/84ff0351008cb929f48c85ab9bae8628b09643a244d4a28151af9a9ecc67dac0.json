{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport authReducer from './auth/authSlice';\nimport missionReducer from './missionSlice';\nimport journalReducer from '../features/journalSlice';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport journeyReducer from './journey/journeySlice';\nimport { combineReducers } from '@reduxjs/toolkit';\nconst migrations = {\n  0: state => {\n    return Object.assign({}, state, {\n      auth: Object.assign({}, state.auth, {\n        _persist: state.auth?._persist\n      })\n    });\n  }\n};\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth'],\n  blacklist: ['missions', 'journal', 'journey'],\n  debug: true,\n  timeout: 0,\n  stateReconciler: false,\n  writeFailHandler: err => {\n    console.error('Error al persistir el estado:', err);\n  }\n};\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  missions: missionReducer,\n  journal: journalReducer,\n  journey: journeyReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n    }\n  })\n});\nexport const persistor = persistStore(store);\nstore.subscribe(() => {\n  const state = store.getState();\n  console.log('Estado actual:', {\n    auth: state.auth,\n    missions: state.missions,\n    journal: state.journal,\n    journey: state.journey\n  });\n});","map":{"version":3,"names":["configureStore","persistStore","persistReducer","authReducer","missionReducer","journalReducer","AsyncStorage","journeyReducer","combineReducers","migrations","state","Object","assign","auth","_persist","persistConfig","key","storage","whitelist","blacklist","debug","timeout","stateReconciler","writeFailHandler","err","console","error","rootReducer","missions","journal","journey","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","subscribe","getState","log"],"sources":["C:/Users/PC/TravelQuest/src/features/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport authReducer from './auth/authSlice';\nimport missionReducer from './missionSlice';\nimport journalReducer from '../features/journalSlice';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport journeyReducer from './journey/journeySlice';\nimport { combineReducers } from '@reduxjs/toolkit';\nimport { createMigrate } from 'redux-persist';\n\nconst migrations = {\n  0: (state: any) => {\n    return {\n      ...state,\n      auth: {\n        ...state.auth,\n        _persist: state.auth?._persist\n      }\n    };\n  }\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth'],\n  blacklist: ['missions', 'journal', 'journey'],\n  debug: true, // Habilitar logs de depuración\n  timeout: 0, // Evitar timeout en la persistencia\n  stateReconciler: false, // Desactivar el reconciler por defecto\n  writeFailHandler: (err: any) => {\n    console.error('Error al persistir el estado:', err);\n  }\n};\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  missions: missionReducer,\n  journal: journalReducer,\n  journey: journeyReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n\n// Agregar listener para depuración\nstore.subscribe(() => {\n  const state = store.getState();\n  console.log('Estado actual:', {\n    auth: state.auth,\n    missions: state.missions,\n    journal: state.journal,\n    journey: state.journey\n  });\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; "],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,cAAc,MAAM,0BAA0B;AACrD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,cAAc,MAAM,wBAAwB;AACnD,SAASC,eAAe,QAAQ,kBAAkB;AAGlD,MAAMC,UAAU,GAAG;EACjB,CAAC,EAAGC,KAAU,IAAK;IACjB,OAAAC,MAAA,CAAAC,MAAA,KACKF,KAAK;MACRG,IAAI,EAAAF,MAAA,CAAAC,MAAA,KACCF,KAAK,CAACG,IAAI;QACbC,QAAQ,EAAEJ,KAAK,CAACG,IAAI,EAAEC;MAAQ;IAC/B;EAEL;AACF,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEX,YAAY;EACrBY,SAAS,EAAE,CAAC,MAAM,CAAC;EACnBC,SAAS,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC;EAC7CC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,CAAC;EACVC,eAAe,EAAE,KAAK;EACtBC,gBAAgB,EAAGC,GAAQ,IAAK;IAC9BC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;EACrD;AACF,CAAC;AAED,MAAMG,WAAW,GAAGnB,eAAe,CAAC;EAClCK,IAAI,EAAEV,WAAW;EACjByB,QAAQ,EAAExB,cAAc;EACxByB,OAAO,EAAExB,cAAc;EACvByB,OAAO,EAAEvB;AACX,CAAC,CAAC;AAEF,MAAMwB,gBAAgB,GAAG7B,cAAc,CAACa,aAAa,EAAEY,WAAW,CAAC;AAEnE,OAAO,MAAMK,KAAK,GAAGhC,cAAc,CAAC;EAClCiC,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAAC,iBAAiB,EAAE,mBAAmB;IACzD;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGrC,YAAY,CAAC+B,KAAK,CAAC;AAG5CA,KAAK,CAACO,SAAS,CAAC,MAAM;EACpB,MAAM7B,KAAK,GAAGsB,KAAK,CAACQ,QAAQ,CAAC,CAAC;EAC9Bf,OAAO,CAACgB,GAAG,CAAC,gBAAgB,EAAE;IAC5B5B,IAAI,EAAEH,KAAK,CAACG,IAAI;IAChBe,QAAQ,EAAElB,KAAK,CAACkB,QAAQ;IACxBC,OAAO,EAAEnB,KAAK,CAACmB,OAAO;IACtBC,OAAO,EAAEpB,KAAK,CAACoB;EACjB,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
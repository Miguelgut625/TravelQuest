{"ast":null,"code":"import { supabase } from './supabase';\nexport const checkJournalTables = async () => {\n  try {\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([supabase.from('journal_entries').select('id').limit(1), supabase.from('journey_diary').select('id').limit(1)]);\n    return {\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n    };\n  } catch (error) {\n    console.error('Error verificando tablas del diario:', error);\n    return {\n      journalEntriesExists: false,\n      journeyDiaryExists: false\n    };\n  }\n};\nexport const getUserJournalEntries = async userId => {\n  try {\n    const {\n      journalEntriesExists,\n      journeyDiaryExists\n    } = await checkJournalTables();\n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return {};\n    }\n    let entriesData = null;\n    let error = null;\n    if (journalEntriesExists) {\n      try {\n        const {\n          data,\n          error: entriesError\n        } = await supabase.from('journal_entries').select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `).eq('userid', userId).order('created_at', {\n          ascending: false\n        });\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (entriesError.message.includes('cityid') || entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200' || entriesError.code === '42703')) {\n          try {\n            const {\n              data: basicData,\n              error: basicError\n            } = await supabase.from('journal_entries').select('*').eq('userid', userId).order('created_at', {\n              ascending: false\n            });\n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              const {\n                data: altData,\n                error: altError\n              } = await supabase.from('journal_entries').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n              });\n              if (!altError) {\n                entriesData = altData;\n              } else {\n                error = altError;\n              }\n            }\n          } catch (e) {\n            console.warn('Error al obtener datos sin relación:', e);\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries:', e);\n      }\n    }\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        const possibleQueries = [supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', {\n          ascending: false\n        }), supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', {\n          ascending: false\n        })];\n        for (const query of possibleQueries) {\n          try {\n            const {\n              data: diaryData,\n              error: diaryError\n            } = await query;\n            if (!diaryError && diaryData && diaryData.length > 0) {\n              entriesData = diaryData;\n              break;\n            }\n          } catch (e) {\n            console.warn('Error en consulta alternativa:', e);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary:', e);\n      }\n    }\n    if (!entriesData && error) {\n      throw error;\n    }\n    if (!entriesData) {\n      return {};\n    }\n    return organizeCityEntries(entriesData, true);\n  } catch (error) {\n    console.error('Error obteniendo entradas del diario:', error);\n    throw error;\n  }\n};\nconst organizeCityEntries = (data, missingCityRelation = false) => {\n  const entriesByCity = {};\n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  data.forEach(entry => {\n    let cityName = 'Ciudad Desconocida';\n    if (!missingCityRelation && entry.cities?.name) {\n      cityName = entry.cities.name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else {\n      if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find(tag => tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel');\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n        }\n      }\n    }\n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    const processedEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || '',\n      cityId: entry.cityId || '',\n      missionId: entry.missionId || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    entriesByCity[cityName].push(processedEntry);\n  });\n  return entriesByCity;\n};\nexport const getMissionJournalEntries = async (userId, missionId) => {\n  try {\n    const {\n      journalEntriesExists,\n      journeyDiaryExists\n    } = await checkJournalTables();\n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return [];\n    }\n    let entriesData = null;\n    let error = null;\n    if (journalEntriesExists) {\n      try {\n        const {\n          data,\n          error: entriesError\n        } = await supabase.from('journal_entries').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n          ascending: false\n        });\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200')) {\n          const {\n            data: basicData,\n            error: basicError\n          } = await supabase.from('journal_entries').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n            ascending: false\n          });\n          if (!basicError) {\n            entriesData = basicData;\n          } else {\n            error = basicError;\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\n      }\n    }\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        const {\n          data,\n          error: diaryError\n        } = await supabase.from('journey_diary').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n          ascending: false\n        });\n        if (!diaryError) {\n          entriesData = data;\n        } else if (diaryError.message && (diaryError.message.includes('cityId') || diaryError.message.includes('relationship') || diaryError.code === 'PGRST200')) {\n          const {\n            data: basicData,\n            error: basicError\n          } = await supabase.from('journey_diary').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n            ascending: false\n          });\n          if (!basicError) {\n            entriesData = basicData;\n          } else if (!error) {\n            error = basicError;\n          }\n        } else if (!error) {\n          error = diaryError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\n      }\n    }\n    if (!entriesData && error) {\n      throw error;\n    }\n    if (!entriesData || entriesData.length === 0) {\n      return [];\n    }\n    return entriesData.map(entry => {\n      let cityName = 'Ciudad Desconocida';\n      if (entry.cities?.name) {\n        cityName = entry.cities.name;\n      } else if (entry.cityName) {\n        cityName = entry.cityName;\n      } else if (entry.city_name) {\n        cityName = entry.city_name;\n      } else if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find(tag => tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel');\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n        }\n      }\n      return {\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        userId: entry.userId || '',\n        cityId: entry.cityId || '',\n        missionId: entry.missionId || missionId,\n        title: entry.title || 'Entrada sin título',\n        content: entry.content || '',\n        photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n        location: entry.location || null,\n        created_at: entry.created_at || new Date().toISOString(),\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\n        city_name: cityName\n      };\n    });\n  } catch (error) {\n    console.error('Error obteniendo entradas de la misión:', error);\n    throw error;\n  }\n};\nexport const createJournalEntry = async data => {\n  try {\n    const snakeCaseData = {\n      user_id: data.userId,\n      city_id: data.cityId,\n      mission_id: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n    const lowerCamelData = {\n      userid: data.userId,\n      cityid: data.cityId,\n      missionid: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n    try {\n      for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n        try {\n          const {\n            error\n          } = await supabase.from('journal_entries').insert(entryData);\n          if (!error) {\n            console.log('Entrada creada exitosamente en journal_entries');\n            return true;\n          }\n        } catch {}\n      }\n      console.log('No se pudo crear entrada en journal_entries, intentando con journey_diary');\n    } catch (e) {\n      console.warn('Error con journal_entries, intentando con journey_diary:', e);\n    }\n    for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n      try {\n        const {\n          error\n        } = await supabase.from('journey_diary').insert(entryData);\n        if (!error) {\n          console.log('Entrada creada exitosamente en journey_diary');\n          return true;\n        }\n      } catch {}\n    }\n    console.error('No se pudo crear entrada en ninguna tabla de diario');\n    return false;\n  } catch (error) {\n    console.error('Error creando entrada en el diario:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","checkJournalTables","journalEntriesResult","journeyDiaryResult","Promise","allSettled","from","select","limit","journalEntriesExists","status","value","error","journeyDiaryExists","console","getUserJournalEntries","userId","warn","entriesData","data","entriesError","eq","order","ascending","message","includes","code","basicData","basicError","altData","altError","e","possibleQueries","query","diaryData","diaryError","length","organizeCityEntries","missingCityRelation","entriesByCity","forEach","entry","cityName","cities","name","city_name","tags","Array","isArray","cityTag","find","tag","charAt","toUpperCase","slice","processedEntry","id","Date","now","Math","random","toString","substring","cityId","missionId","undefined","title","content","photos","location","created_at","toISOString","push","getMissionJournalEntries","map","createJournalEntry","snakeCaseData","user_id","city_id","mission_id","lowerCamelData","userid","cityid","missionid","entryData","insert","log"],"sources":["C:/Users/migue/miguel/TravelQuest/src/services/journalService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface JournalEntryDB {\n  id: string;\n  userId: string;\n  cityId: string;\n  missionId?: string;\n  title: string;\n  content: string;\n  photos: string[];\n  location: {\n    latitude: number;\n    longitude: number;\n  } | null;\n  created_at: string;\n  tags: string[];\n}\n\nexport interface CityJournalEntry extends JournalEntryDB {\n  city_name: string;\n}\n\n/**\n * Verifica si existe la tabla journal_entries o journey_diary en la base de datos\n * @returns objeto con la información de qué tablas existen\n */\nexport const checkJournalTables = async (): Promise<{journalEntriesExists: boolean, journeyDiaryExists: boolean}> => {\n  try {\n    // Probamos si las tablas existen obteniendo solo una fila de cada una\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([\n      supabase.from('journal_entries').select('id').limit(1),\n      supabase.from('journey_diary').select('id').limit(1)\n    ]);\n    \n    return {\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n    };\n  } catch (error) {\n    console.error('Error verificando tablas del diario:', error);\n    return {\n      journalEntriesExists: false,\n      journeyDiaryExists: false\n    };\n  }\n};\n\n/**\n * Obtiene todas las entradas del diario del usuario agrupadas por ciudad\n * @param userId ID del usuario \n * @returns Entradas del diario agrupadas por ciudad\n */\nexport const getUserJournalEntries = async (userId: string): Promise<{ [cityName: string]: CityJournalEntry[] }> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return {}; // Devolvemos un objeto vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `)\n          .eq('userid', userId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityid') || \n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200' ||\n          entriesError.code === '42703')) {\n          \n          // Si hay error de relación, intentamos sin la relación y con nombres alternativos\n          try {\n            const { data: basicData, error: basicError } = await supabase\n              .from('journal_entries')\n              .select('*')\n              .eq('userid', userId)\n              .order('created_at', { ascending: false });\n            \n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              // Intentar con user_id (otra convención común en PostgreSQL)\n              const { data: altData, error: altError } = await supabase\n                .from('journal_entries')\n                .select('*')\n                .eq('user_id', userId)\n                .order('created_at', { ascending: false });\n              \n              if (!altError) {\n                entriesData = altData;\n              } else {\n                error = altError;\n              }\n            }\n          } catch (e) {\n            console.warn('Error al obtener datos sin relación:', e);\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo un error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos diferentes convenciones de nombres para las columnas\n        const possibleQueries = [\n          // Versión 1: Lowercase\n          supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', { ascending: false }),\n          // Versión 2: Underscore\n          supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', { ascending: false }),\n        ];\n        \n        for (const query of possibleQueries) {\n          try {\n            const { data: diaryData, error: diaryError } = await query;\n            if (!diaryError && diaryData && diaryData.length > 0) {\n              entriesData = diaryData;\n              break;\n            }\n          } catch (e) {\n            // Continuar con la siguiente consulta\n            console.warn('Error en consulta alternativa:', e);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un objeto vacío\n    if (!entriesData) {\n      return {};\n    }\n    \n    // Organizar las entradas por ciudad\n    return organizeCityEntries(entriesData, true);\n  } catch (error) {\n    console.error('Error obteniendo entradas del diario:', error);\n    throw error;\n  }\n};\n\n/**\n * Organiza las entradas del diario por ciudad\n * @param data Datos de las entradas\n * @param missingCityRelation Indica si falta la relación con la ciudad\n * @returns Entradas organizadas por ciudad\n */\nconst organizeCityEntries = (\n  data: any[] | null, \n  missingCityRelation: boolean = false\n): { [cityName: string]: CityJournalEntry[] } => {\n  const entriesByCity: { [cityName: string]: CityJournalEntry[] } = {};\n  \n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  \n  data.forEach((entry: any) => {\n    let cityName = 'Ciudad Desconocida';\n    \n    // Intentamos obtener el nombre de la ciudad de varias formas posibles\n    if (!missingCityRelation && entry.cities?.name) {\n      cityName = entry.cities.name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else {\n      // Buscar el cityId en las etiquetas y usar la primera que parece ser un nombre de ciudad\n      if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find((tag: string) => \n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\n        );\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\n        }\n      }\n    }\n    \n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    \n    // Nos aseguramos de que todos los campos necesarios existan\n    const processedEntry: CityJournalEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || '',\n      cityId: entry.cityId || '',\n      missionId: entry.missionId || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : \n              (entry.photos ? [entry.photos] : []),\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    \n    entriesByCity[cityName].push(processedEntry);\n  });\n\n  return entriesByCity;\n};\n\n/**\n * Obtiene las entradas del diario relacionadas con una misión específica\n * @param userId ID del usuario\n * @param missionId ID de la misión\n * @returns Entradas del diario relacionadas con la misión\n */\nexport const getMissionJournalEntries = async (userId: string, missionId: string): Promise<CityJournalEntry[]> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return []; // Devolvemos un array vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journal_entries')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else {\n            error = basicError;\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: diaryError } = await supabase\n          .from('journey_diary')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!diaryError) {\n          entriesData = data;\n        } else if (diaryError.message && (\n          diaryError.message.includes('cityId') || \n          diaryError.message.includes('relationship') ||\n          diaryError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journey_diary')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n            error = basicError;\n          }\n        } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n          error = diaryError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un array vacío\n    if (!entriesData || entriesData.length === 0) {\n      return [];\n    }\n    \n    // Procesamos las entradas para asegurar el formato correcto\n    return entriesData.map((entry: any) => {\n      let cityName = 'Ciudad Desconocida';\n      \n      if (entry.cities?.name) {\n        cityName = entry.cities.name;\n      } else if (entry.cityName) {\n        cityName = entry.cityName;\n      } else if (entry.city_name) {\n        cityName = entry.city_name;\n      } else if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find((tag: string) => \n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\n        );\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\n        }\n      }\n      \n      return {\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        userId: entry.userId || '',\n        cityId: entry.cityId || '',\n        missionId: entry.missionId || missionId,\n        title: entry.title || 'Entrada sin título',\n        content: entry.content || '',\n        photos: Array.isArray(entry.photos) ? entry.photos : \n                (entry.photos ? [entry.photos] : []),\n        location: entry.location || null,\n        created_at: entry.created_at || new Date().toISOString(),\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\n        city_name: cityName\n      };\n    });\n  } catch (error) {\n    console.error('Error obteniendo entradas de la misión:', error);\n    throw error;\n  }\n};\n\nexport const createJournalEntry = async (data: {\n  userId: string;\n  cityId: string;\n  missionId: string;\n  title: string;\n  content: string;\n  photos: string[];\n  tags?: string[];\n}) => {\n  try {\n    // Preparar versiones de datos con diferentes convenciones de nombres\n    const snakeCaseData = {\n      user_id: data.userId,\n      city_id: data.cityId,\n      mission_id: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n    \n    const lowerCamelData = {\n      userid: data.userId,\n      cityid: data.cityId,\n      missionid: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n\n    // Intentar primero con journal_entries\n    try {\n      // Probar las diferentes convenciones de nombres\n      for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n        try {\n          const { error } = await supabase.from('journal_entries').insert(entryData);\n          if (!error) {\n            console.log('Entrada creada exitosamente en journal_entries');\n            return true;\n          }\n        } catch {}\n      }\n      \n      // Si llegamos aquí, ninguna convención funcionó, intentar con journey_diary\n      console.log('No se pudo crear entrada en journal_entries, intentando con journey_diary');\n    } catch (e) {\n      console.warn('Error con journal_entries, intentando con journey_diary:', e);\n    }\n    \n    // Intentar con journey_diary\n    for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n      try {\n        const { error } = await supabase.from('journey_diary').insert(entryData);\n        if (!error) {\n          console.log('Entrada creada exitosamente en journey_diary');\n          return true;\n        }\n      } catch {}\n    }\n    \n    // Si llegamos aquí, ninguna tabla funcionó\n    console.error('No se pudo crear entrada en ninguna tabla de diario');\n    return false;\n  } catch (error) {\n    console.error('Error creando entrada en el diario:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
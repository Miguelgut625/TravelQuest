{"ast":null,"code":"import * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { supabase } from './supabase';\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true\n  })\n});\nclass NotificationService {\n  constructor() {\n    this.configureNotifications();\n  }\n  static getInstance() {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n  async configureNotifications() {\n    try {\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Permiso para notificaciones denegado');\n        return;\n      }\n      if (Platform.OS === 'android') {\n        await Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n    } catch (error) {\n      console.error('Error al configurar notificaciones:', error);\n    }\n  }\n  async scheduleLocalNotification(title, body, trigger, userId) {\n    try {\n      if (Platform.OS === 'web') {\n        if (true && 'Notification' in window) {\n          if (window.Notification.permission === \"granted\") {\n            new window.Notification(title, {\n              body: body,\n              icon: '/icon.png'\n            });\n          } else if (window.Notification.permission !== \"denied\") {\n            window.Notification.requestPermission().then(permission => {\n              if (permission === \"granted\") {\n                new window.Notification(title, {\n                  body: body,\n                  icon: '/icon.png'\n                });\n              }\n            });\n          }\n        }\n        const {\n          error\n        } = await supabase.from('notifications').insert({\n          userid: userId,\n          title,\n          message: body,\n          type: 'local',\n          read: false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n        if (error) {\n          console.error('Error al guardar notificación en la base de datos:', error);\n        }\n        return;\n      }\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title,\n          body,\n          sound: true,\n          priority: Notifications.AndroidNotificationPriority.HIGH\n        },\n        trigger\n      });\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message: body,\n        type: 'local',\n        read: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Error al guardar notificación en la base de datos:', error);\n      }\n    } catch (error) {\n      console.error('Error al programar notificación local:', error);\n    }\n  }\n  async notifyJourneyShared(userId, journeyName, sharedBy) {\n    const title = '¡Nuevo viaje compartido!';\n    const body = `${sharedBy} ha compartido el viaje \"${journeyName}\" contigo`;\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message: body,\n        type: 'journey_shared',\n        read: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Error al guardar notificación de viaje compartido:', error);\n        return;\n      }\n      if (Platform.OS === 'web') {\n        if (true && 'Notification' in window) {\n          if (window.Notification.permission === \"granted\") {\n            new window.Notification(title, {\n              body: body,\n              icon: '/icon.png'\n            });\n          } else if (window.Notification.permission !== \"denied\") {\n            window.Notification.requestPermission().then(permission => {\n              if (permission === \"granted\") {\n                new window.Notification(title, {\n                  body: body,\n                  icon: '/icon.png'\n                });\n              }\n            });\n          }\n        }\n      } else {\n        await Notifications.scheduleNotificationAsync({\n          content: {\n            title,\n            body,\n            sound: true,\n            priority: Notifications.AndroidNotificationPriority.HIGH\n          },\n          trigger: {\n            seconds: 1\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error al enviar notificación de viaje compartido:', error);\n    }\n  }\n  async notifyJourneyEnding(userId, journeyName, hoursLeft) {\n    const title = '¡Tu viaje está por terminar!';\n    const body = `El viaje \"${journeyName}\" termina en ${hoursLeft} hora${hoursLeft === 1 ? '' : 's'}`;\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message: body,\n        type: 'journey_ending',\n        read: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Error al guardar notificación de fin de viaje:', error);\n        return;\n      }\n      await this.scheduleLocalNotification(title, body, {\n        seconds: 1\n      }, userId);\n    } catch (error) {\n      console.error('Error al enviar notificación de fin de viaje:', error);\n    }\n  }\n  async notifyFriendRequest(userId, requesterName) {\n    const title = '¡Nueva solicitud de amistad!';\n    const body = `${requesterName} quiere ser tu amigo/a`;\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message: body,\n        type: 'friend_request',\n        read: false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Error al guardar notificación de solicitud de amistad:', error);\n        return;\n      }\n      if (Platform.OS === 'web') {\n        if (true && 'Notification' in window) {\n          if (window.Notification.permission === \"granted\") {\n            new window.Notification(title, {\n              body: body,\n              icon: '/icon.png'\n            });\n          } else if (window.Notification.permission !== \"denied\") {\n            window.Notification.requestPermission().then(permission => {\n              if (permission === \"granted\") {\n                new window.Notification(title, {\n                  body: body,\n                  icon: '/icon.png'\n                });\n              }\n            });\n          }\n        }\n      } else {\n        await Notifications.scheduleNotificationAsync({\n          content: {\n            title,\n            body,\n            sound: true,\n            priority: Notifications.AndroidNotificationPriority.HIGH\n          },\n          trigger: {\n            seconds: 1\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error al enviar notificación de solicitud de amistad:', error);\n    }\n  }\n  async getUnreadNotifications(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('notifications').select('*').eq('userid', userId).eq('read', false).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error al obtener notificaciones:', error);\n      return [];\n    }\n  }\n  async markNotificationAsRead(notificationId) {\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').update({\n        read: true\n      }).eq('id', notificationId);\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error al marcar notificación como leída:', error);\n      throw error;\n    }\n  }\n  async cancelAllNotifications() {\n    await Notifications.cancelAllScheduledNotificationsAsync();\n  }\n  async cancelNotification(notificationId) {\n    await Notifications.cancelScheduledNotificationAsync(notificationId);\n  }\n  async createNotification(userId, title, message, type, data) {\n    try {\n      const {\n        error\n      } = await supabase.from('notifications').insert({\n        userid: userId,\n        title,\n        message,\n        type,\n        read: false,\n        data,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error al crear notificación:', error);\n      throw error;\n    }\n  }\n  async registerForPushNotificationsAsync() {\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Las notificaciones push no están disponibles en web');\n        return null;\n      }\n      const {\n        status: existingStatus\n      } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const {\n          status\n        } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        console.log('Permiso para notificaciones push denegado');\n        return null;\n      }\n      const token = (await Notifications.getExpoPushTokenAsync()).data;\n      return token;\n    } catch (error) {\n      console.error('Error al registrar notificaciones push:', error);\n      return null;\n    }\n  }\n}\nexport default NotificationService;","map":{"version":3,"names":["Notifications","Platform","supabase","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","NotificationService","constructor","configureNotifications","getInstance","instance","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","console","log","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","error","scheduleLocalNotification","title","body","trigger","userId","window","Notification","permission","icon","requestPermission","then","from","insert","userid","message","type","read","created_at","Date","toISOString","updated_at","scheduleNotificationAsync","content","sound","priority","AndroidNotificationPriority","HIGH","notifyJourneyShared","journeyName","sharedBy","seconds","notifyJourneyEnding","hoursLeft","notifyFriendRequest","requesterName","getUnreadNotifications","data","select","eq","order","ascending","markNotificationAsRead","notificationId","update","cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelNotification","cancelScheduledNotificationAsync","createNotification","registerForPushNotificationsAsync","token","getExpoPushTokenAsync"],"sources":["C:/Users/PC/TravelQuest/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport { Platform } from 'react-native';\nimport { supabase } from './supabase';\nimport { Notification } from '../types/notifications';\n\n// Configurar el comportamiento de las notificaciones\nNotifications.setNotificationHandler({\n    handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true,\n    }),\n});\n\nclass NotificationService {\n    private static instance: NotificationService;\n\n    private constructor() {\n        this.configureNotifications();\n    }\n\n    public static getInstance(): NotificationService {\n        if (!NotificationService.instance) {\n            NotificationService.instance = new NotificationService();\n        }\n        return NotificationService.instance;\n    }\n\n    private async configureNotifications() {\n        try {\n            // Solicitar permisos\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n\n            if (existingStatus !== 'granted') {\n                const { status } = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n\n            if (finalStatus !== 'granted') {\n                console.log('Permiso para notificaciones denegado');\n                return;\n            }\n\n            // Configurar el canal de notificaciones para Android\n            if (Platform.OS === 'android') {\n                await Notifications.setNotificationChannelAsync('default', {\n                    name: 'default',\n                    importance: Notifications.AndroidImportance.MAX,\n                    vibrationPattern: [0, 250, 250, 250],\n                    lightColor: '#FF231F7C',\n                });\n            }\n        } catch (error) {\n            console.error('Error al configurar notificaciones:', error);\n        }\n    }\n\n    // Método para programar una notificación local\n    public async scheduleLocalNotification(\n        title: string,\n        body: string,\n        trigger: Notifications.NotificationTriggerInput,\n        userId: string\n    ) {\n        try {\n            // Verificar si estamos en web\n            if (Platform.OS === 'web') {\n                // Verificar si el navegador soporta notificaciones\n                if (typeof window !== 'undefined' && 'Notification' in window) {\n                    if (window.Notification.permission === \"granted\") {\n                        new window.Notification(title, {\n                            body: body,\n                            icon: '/icon.png'\n                        });\n                    } else if (window.Notification.permission !== \"denied\") {\n                        window.Notification.requestPermission().then((permission: string) => {\n                            if (permission === \"granted\") {\n                                new window.Notification(title, {\n                                    body: body,\n                                    icon: '/icon.png'\n                                });\n                            }\n                        });\n                    }\n                }\n\n                // Guardar la notificación en la base de datos\n                const { error } = await supabase\n                    .from('notifications')\n                    .insert({\n                        userid: userId,\n                        title,\n                        message: body,\n                        type: 'local',\n                        read: false,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    });\n\n                if (error) {\n                    console.error('Error al guardar notificación en la base de datos:', error);\n                }\n                return;\n            }\n\n            // Para plataformas móviles\n            await Notifications.scheduleNotificationAsync({\n                content: {\n                    title,\n                    body,\n                    sound: true,\n                    priority: Notifications.AndroidNotificationPriority.HIGH,\n                },\n                trigger,\n            });\n\n            // Guardar la notificación en la base de datos\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message: body,\n                    type: 'local',\n                    read: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) {\n                console.error('Error al guardar notificación en la base de datos:', error);\n            }\n        } catch (error) {\n            console.error('Error al programar notificación local:', error);\n        }\n    }\n\n    // Método para notificar cuando alguien comparte un viaje\n    public async notifyJourneyShared(\n        userId: string,\n        journeyName: string,\n        sharedBy: string\n    ) {\n        const title = '¡Nuevo viaje compartido!';\n        const body = `${sharedBy} ha compartido el viaje \"${journeyName}\" contigo`;\n\n        try {\n            // Guardar en base de datos\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message: body,\n                    type: 'journey_shared',\n                    read: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) {\n                console.error('Error al guardar notificación de viaje compartido:', error);\n                return;\n            }\n\n\n            if (Platform.OS === 'web') {\n                // Verificar si el navegador soporta notificaciones\n                if (typeof window !== 'undefined' && 'Notification' in window) {\n                    if (window.Notification.permission === \"granted\") {\n                        new window.Notification(title, {\n                            body: body,\n                            icon: '/icon.png'\n                        });\n                    } else if (window.Notification.permission !== \"denied\") {\n                        window.Notification.requestPermission().then((permission: string) => {\n                            if (permission === \"granted\") {\n                                new window.Notification(title, {\n                                    body: body,\n                                    icon: '/icon.png'\n                                });\n                            }\n                        });\n                    }\n                }\n            } else {\n                // Para plataformas móviles\n                await Notifications.scheduleNotificationAsync({\n                    content: {\n                        title,\n                        body,\n                        sound: true,\n                        priority: Notifications.AndroidNotificationPriority.HIGH,\n                    },\n                    trigger: { seconds: 1 },\n                });\n            }\n        } catch (error) {\n            console.error('Error al enviar notificación de viaje compartido:', error);\n        }\n    }\n\n    // Método para notificar cuando quedan pocas horas para terminar un viaje\n    public async notifyJourneyEnding(\n        userId: string,\n        journeyName: string,\n        hoursLeft: number\n    ) {\n        const title = '¡Tu viaje está por terminar!';\n        const body = `El viaje \"${journeyName}\" termina en ${hoursLeft} hora${hoursLeft === 1 ? '' : 's'}`;\n\n        try {\n            // Guardar en base de datos\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message: body,\n                    type: 'journey_ending',\n                    read: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) {\n                console.error('Error al guardar notificación de fin de viaje:', error);\n                return;\n            }\n\n            // Programar notificación local\n            await this.scheduleLocalNotification(\n                title,\n                body,\n                { seconds: 1 },\n                userId\n            );\n        } catch (error) {\n            console.error('Error al enviar notificación de fin de viaje:', error);\n        }\n    }\n\n    // Método para notificar cuando alguien envía una solicitud de amistad\n    public async notifyFriendRequest(\n        userId: string,\n        requesterName: string\n    ) {\n        const title = '¡Nueva solicitud de amistad!';\n        const body = `${requesterName} quiere ser tu amigo/a`;\n\n        try {\n            // Guardar en base de datos y mostrar notificación local\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message: body,\n                    type: 'friend_request',\n                    read: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) {\n                console.error('Error al guardar notificación de solicitud de amistad:', error);\n                return;\n            }\n\n            // Mostrar notificación local sin guardarla en la base de datos\n            if (Platform.OS === 'web') {\n                // Verificar si el navegador soporta notificaciones\n                if (typeof window !== 'undefined' && 'Notification' in window) {\n                    if (window.Notification.permission === \"granted\") {\n                        new window.Notification(title, {\n                            body: body,\n                            icon: '/icon.png'\n                        });\n                    } else if (window.Notification.permission !== \"denied\") {\n                        window.Notification.requestPermission().then((permission: string) => {\n                            if (permission === \"granted\") {\n                                new window.Notification(title, {\n                                    body: body,\n                                    icon: '/icon.png'\n                                });\n                            }\n                        });\n                    }\n                }\n            } else {\n                // Para plataformas móviles\n                await Notifications.scheduleNotificationAsync({\n                    content: {\n                        title,\n                        body,\n                        sound: true,\n                        priority: Notifications.AndroidNotificationPriority.HIGH,\n                    },\n                    trigger: { seconds: 1 },\n                });\n            }\n        } catch (error) {\n            console.error('Error al enviar notificación de solicitud de amistad:', error);\n        }\n    }\n\n    // Método para obtener notificaciones no leídas\n    public async getUnreadNotifications(userId: string): Promise<Notification[]> {\n        try {\n            const { data, error } = await supabase\n                .from('notifications')\n                .select('*')\n                .eq('userid', userId)\n                .eq('read', false)\n                .order('created_at', { ascending: false });\n\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener notificaciones:', error);\n            return [];\n        }\n    }\n\n    // Método para marcar una notificación como leída\n    public async markNotificationAsRead(notificationId: string): Promise<void> {\n        try {\n            const { error } = await supabase\n                .from('notifications')\n                .update({ read: true })\n                .eq('id', notificationId);\n\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al marcar notificación como leída:', error);\n            throw error;\n        }\n    }\n\n    // Método para cancelar todas las notificaciones programadas\n    public async cancelAllNotifications() {\n        await Notifications.cancelAllScheduledNotificationsAsync();\n    }\n\n    // Método para cancelar una notificación específica por ID\n    public async cancelNotification(notificationId: string) {\n        await Notifications.cancelScheduledNotificationAsync(notificationId);\n    }\n\n    // Método para crear una notificación en la base de datos\n    public async createNotification(\n        userId: string,\n        title: string,\n        message: string,\n        type: string,\n        data?: any\n    ): Promise<void> {\n        try {\n            const { error } = await supabase\n                .from('notifications')\n                .insert({\n                    userid: userId,\n                    title,\n                    message,\n                    type,\n                    read: false,\n                    data,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al crear notificación:', error);\n            throw error;\n        }\n    }\n\n    // Método para registrar el dispositivo para notificaciones push\n    public async registerForPushNotificationsAsync(): Promise<string | null> {\n        try {\n            // Verificar si estamos en web\n            if (Platform.OS === 'web') {\n                console.log('Las notificaciones push no están disponibles en web');\n                return null;\n            }\n\n            const { status: existingStatus } = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n\n            if (existingStatus !== 'granted') {\n                const { status } = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n\n            if (finalStatus !== 'granted') {\n                console.log('Permiso para notificaciones push denegado');\n                return null;\n            }\n\n            const token = (await Notifications.getExpoPushTokenAsync()).data;\n            return token;\n        } catch (error) {\n            console.error('Error al registrar notificaciones push:', error);\n            return null;\n        }\n    }\n}\n\nexport default NotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { WebView } from 'react-native-webview';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SimpleWebView = function SimpleWebView(_ref) {\n  var style = _ref.style;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var htmlContent = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #005F9E;\n            color: white;\n            text-align: center;\n          }\n          .container {\n            padding: 20px;\n          }\n          h1 {\n            margin-bottom: 20px;\n          }\n          button {\n            background-color: white;\n            color: #005F9E;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            font-size: 16px;\n            cursor: pointer;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1>TravelQuest WebView Test</h1>\n          <p>Visualización simplificada para verificar funcionamiento.</p>\n          <button id=\"testButton\">Cambiar Color</button>\n        </div>\n        <script>\n          // Script mínimo para interactividad\n          document.getElementById('testButton').addEventListener('click', function() {\n            document.body.style.backgroundColor = document.body.style.backgroundColor === 'orange' ? '#005F9E' : 'orange';\n          });\n        </script>\n      </body>\n    </html>\n  `;\n  return _jsxs(View, {\n    style: [styles.container, style],\n    children: [loading && _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#005F9E\"\n      })\n    }), error ? _jsx(View, {\n      style: styles.errorContainer,\n      children: _jsx(Text, {\n        style: styles.errorText,\n        children: error\n      })\n    }) : _jsx(WebView, {\n      originWhitelist: ['*'],\n      source: {\n        html: htmlContent\n      },\n      style: styles.webview,\n      onLoadEnd: function onLoadEnd() {\n        return setLoading(false);\n      },\n      onError: function onError(e) {\n        console.error('WebView error:', e.nativeEvent);\n        setError('Error al cargar el contenido web');\n        setLoading(false);\n      },\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      cacheEnabled: true,\n      onHttpError: function onHttpError(e) {\n        console.error('WebView HTTP error:', e.nativeEvent);\n        setError(`Error HTTP: ${e.nativeEvent.statusCode}`);\n        setLoading(false);\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: 'relative'\n  },\n  webview: {\n    flex: 1\n  },\n  loadingContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    zIndex: 1\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8d7da',\n    padding: 20\n  },\n  errorText: {\n    color: '#721c24',\n    textAlign: 'center',\n    fontSize: 16\n  }\n});\nexport default SimpleWebView;","map":{"version":3,"names":["React","useState","WebView","View","StyleSheet","ActivityIndicator","Text","jsx","_jsx","jsxs","_jsxs","SimpleWebView","_ref","style","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","htmlContent","styles","container","children","loadingContainer","size","color","errorContainer","errorText","originWhitelist","source","html","webview","onLoadEnd","onError","e","console","nativeEvent","javaScriptEnabled","domStorageEnabled","cacheEnabled","onHttpError","statusCode","create","flex","position","top","left","right","bottom","justifyContent","alignItems","backgroundColor","zIndex","padding","textAlign","fontSize"],"sources":["C:/Users/migue/TravelQuest/src/components/SimpleWebView.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { WebView } from 'react-native-webview';\r\nimport { View, StyleSheet, ActivityIndicator, Text } from 'react-native';\r\n\r\ninterface SimpleWebViewProps {\r\n  style?: any;\r\n}\r\n\r\nconst SimpleWebView = ({ style }: SimpleWebViewProps) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // HTML simple más ligero para probar WebView\r\n  const htmlContent = `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <style>\r\n          body {\r\n            font-family: Arial, sans-serif;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n            margin: 0;\r\n            background-color: #005F9E;\r\n            color: white;\r\n            text-align: center;\r\n          }\r\n          .container {\r\n            padding: 20px;\r\n          }\r\n          h1 {\r\n            margin-bottom: 20px;\r\n          }\r\n          button {\r\n            background-color: white;\r\n            color: #005F9E;\r\n            border: none;\r\n            padding: 10px 20px;\r\n            border-radius: 5px;\r\n            font-size: 16px;\r\n            cursor: pointer;\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"container\">\r\n          <h1>TravelQuest WebView Test</h1>\r\n          <p>Visualización simplificada para verificar funcionamiento.</p>\r\n          <button id=\"testButton\">Cambiar Color</button>\r\n        </div>\r\n        <script>\r\n          // Script mínimo para interactividad\r\n          document.getElementById('testButton').addEventListener('click', function() {\r\n            document.body.style.backgroundColor = document.body.style.backgroundColor === 'orange' ? '#005F9E' : 'orange';\r\n          });\r\n        </script>\r\n      </body>\r\n    </html>\r\n  `;\r\n\r\n  return (\r\n    <View style={[styles.container, style]}>\r\n      {loading && (\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"large\" color=\"#005F9E\" />\r\n        </View>\r\n      )}\r\n      {error ? (\r\n        <View style={styles.errorContainer}>\r\n          <Text style={styles.errorText}>{error}</Text>\r\n        </View>\r\n      ) : (\r\n        <WebView\r\n          originWhitelist={['*']}\r\n          source={{ html: htmlContent }}\r\n          style={styles.webview}\r\n          onLoadEnd={() => setLoading(false)}\r\n          onError={(e) => {\r\n            console.error('WebView error:', e.nativeEvent);\r\n            setError('Error al cargar el contenido web');\r\n            setLoading(false);\r\n          }}\r\n          javaScriptEnabled={true}\r\n          domStorageEnabled={true}\r\n          cacheEnabled={true}\r\n          onHttpError={(e) => {\r\n            console.error('WebView HTTP error:', e.nativeEvent);\r\n            setError(`Error HTTP: ${e.nativeEvent.statusCode}`);\r\n            setLoading(false);\r\n          }}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    position: 'relative',\r\n  },\r\n  webview: {\r\n    flex: 1,\r\n  },\r\n  loadingContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n    zIndex: 1,\r\n  },\r\n  errorContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f8d7da',\r\n    padding: 20,\r\n  },\r\n  errorText: {\r\n    color: '#721c24',\r\n    textAlign: 'center',\r\n    fontSize: 16,\r\n  }\r\n});\r\n\r\nexport default SimpleWebView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
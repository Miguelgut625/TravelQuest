{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport 'react-native-url-polyfill/auto';\nimport { LOGGING_CONFIG } from '../config/logging';\nconst supabaseUrl = 'https://ynyxyzzpbyzyejgkfncm.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlueXh5enpwYnl6eWVqZ2tmbmNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODI4NDMsImV4cCI6MjA1NzM1ODg0M30.ntEnr5gFT5tllc0Z037LJPkPq60SM_RBLa6hct72xXs';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n    flowType: 'implicit',\n    debug: LOGGING_CONFIG.CATEGORIES.AUTH\n  }\n});\nexport const testAuth = async (email, password) => {\n  try {\n    console.log('Probando autenticación con:', {\n      email\n    });\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      console.error('Error en prueba de autenticación:', {\n        message: error.message,\n        status: error.status,\n        name: error.name\n      });\n      return {\n        success: false,\n        error\n      };\n    }\n    console.log('Prueba de autenticación exitosa:', {\n      user: data.user?.email,\n      session: !!data.session\n    });\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error('Error inesperado en prueba de autenticación:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\nexport const uploadImage = async (filePath, bucket) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from(bucket).upload(filePath, filePath);\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    throw error;\n  }\n};\nexport const getMissionsByCity = async cityId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('missions').select('*').eq('cityId', cityId);\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error fetching missions:', error);\n    throw error;\n  }\n};\nexport const updateMissionProgress = async (missionId, userId, completed) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('mission_progress').upsert({\n      mission_id: missionId,\n      user_id: userId,\n      completed,\n      updated_at: new Date().toISOString()\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating mission progress:', error);\n    throw error;\n  }\n};\nexport const verifyCredentials = async (email, password) => {\n  try {\n    console.log('Verificando credenciales para:', email);\n    const {\n      data: authData,\n      error: authError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (authError) {\n      console.error('Error en autenticación:', authError);\n      return {\n        success: false,\n        error: authError\n      };\n    }\n    if (!authData.user) {\n      console.log('No se encontró el usuario');\n      return {\n        success: false,\n        error: new Error('Usuario no encontrado')\n      };\n    }\n    const {\n      data: userData,\n      error: userError\n    } = await supabase.from('users').select('*').eq('email', email).single();\n    if (userError) {\n      console.error('Error obteniendo datos del usuario:', userError);\n      return {\n        success: false,\n        error: userError\n      };\n    }\n    const userInfo = Object.assign({}, userData, {\n      email: authData.user.email\n    });\n    console.log('Autenticación exitosa para:', email);\n    return {\n      success: true,\n      data: userInfo\n    };\n  } catch (error) {\n    console.error('Error inesperado en autenticación:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\nexport const searchCities = async searchTerm => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('cities').select('*').ilike('name', `%${searchTerm}%`).limit(5);\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error searching cities:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["createClient","AsyncStorage","LOGGING_CONFIG","supabaseUrl","supabaseAnonKey","supabase","auth","storage","autoRefreshToken","persistSession","detectSessionInUrl","flowType","debug","CATEGORIES","AUTH","testAuth","email","password","console","log","data","error","signInWithPassword","message","status","name","success","user","session","uploadImage","filePath","bucket","from","upload","getMissionsByCity","cityId","select","eq","updateMissionProgress","missionId","userId","completed","upsert","mission_id","user_id","updated_at","Date","toISOString","verifyCredentials","authData","authError","Error","userData","userError","single","userInfo","Object","assign","searchCities","searchTerm","ilike","limit"],"sources":["C:/Users/PC/TravelQuest/src/services/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport 'react-native-url-polyfill/auto';\r\nimport { LOGGING_CONFIG } from '../config/logging';\r\n\r\nconst supabaseUrl = 'https://ynyxyzzpbyzyejgkfncm.supabase.co';\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlueXh5enpwYnl6eWVqZ2tmbmNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODI4NDMsImV4cCI6MjA1NzM1ODg0M30.ntEnr5gFT5tllc0Z037LJPkPq60SM_RBLa6hct72xXs';\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n    flowType: 'implicit',\r\n    debug: LOGGING_CONFIG.CATEGORIES.AUTH\r\n  }\r\n});\r\n\r\n// Función para probar la autenticación\r\nexport const testAuth = async (email: string, password: string) => {\r\n  try {\r\n    console.log('Probando autenticación con:', { email });\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password\r\n    });\r\n\r\n    if (error) {\r\n      console.error('Error en prueba de autenticación:', {\r\n        message: error.message,\r\n        status: error.status,\r\n        name: error.name\r\n      });\r\n      return { success: false, error };\r\n    }\r\n\r\n    console.log('Prueba de autenticación exitosa:', {\r\n      user: data.user?.email,\r\n      session: !!data.session\r\n    });\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error('Error inesperado en prueba de autenticación:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n// Funciones auxiliares para interactuar con Supabase\r\nexport const uploadImage = async (filePath: string, bucket: string) => {\r\n  try {\r\n    const { data, error } = await supabase.storage\r\n      .from(bucket)\r\n      .upload(filePath, filePath);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error uploading image:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMissionsByCity = async (cityId: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('missions')\r\n      .select('*')\r\n      .eq('cityId', cityId);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching missions:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateMissionProgress = async (missionId: string, userId: string, completed: boolean) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('mission_progress')\r\n      .upsert({\r\n        mission_id: missionId,\r\n        user_id: userId,\r\n        completed,\r\n        updated_at: new Date().toISOString(),\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error updating mission progress:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para verificar credenciales de forma segura\r\nexport const verifyCredentials = async (email: string, password: string) => {\r\n  try {\r\n    console.log('Verificando credenciales para:', email);\r\n    \r\n    // Usar el sistema de autenticación incorporado de Supabase\r\n    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password\r\n    });\r\n\r\n    if (authError) {\r\n      console.error('Error en autenticación:', authError);\r\n      return { success: false, error: authError };\r\n    }\r\n\r\n    if (!authData.user) {\r\n      console.log('No se encontró el usuario');\r\n      return { success: false, error: new Error('Usuario no encontrado') };\r\n    }\r\n\r\n    // Obtener datos adicionales del usuario si es necesario\r\n    const { data: userData, error: userError } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('email', email)\r\n      .single();\r\n\r\n    if (userError) {\r\n      console.error('Error obteniendo datos del usuario:', userError);\r\n      return { success: false, error: userError };\r\n    }\r\n\r\n    const userInfo = {\r\n      ...userData,\r\n      email: authData.user.email\r\n    };\r\n\r\n    console.log('Autenticación exitosa para:', email);\r\n    return { success: true, data: userInfo };\r\n  } catch (error) {\r\n    console.error('Error inesperado en autenticación:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\nexport const searchCities = async (searchTerm: string) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('cities')\r\n      .select('*')\r\n      .ilike('name', `%${searchTerm}%`)\r\n      .limit(5);\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error('Error searching cities:', error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from \"./src/features/store\";\nimport AppNavigator from \"./src/navigation/AppNavigator\";\nimport { testSupabaseConnection } from \"./src/services/testConnection\";\nimport * as Font from 'expo-font';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    retryCount = _useState6[0],\n    setRetryCount = _useState6[1];\n  useEffect(function () {\n    var checkConnection = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var isConnected = yield testSupabaseConnection();\n        console.log('Conexión a Supabase:', isConnected ? 'Exitosa' : 'Fallida');\n      });\n      return function checkConnection() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var loadFonts = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({});\n          setFontsLoaded(true);\n        } catch (error) {\n          console.error('Error cargando fuentes:', error);\n          setError('Error al cargar las fuentes. La aplicación continuará sin algunos íconos.');\n          setFontsLoaded(true);\n        }\n      });\n      return function loadFonts() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    checkConnection();\n    loadFonts();\n  }, [retryCount]);\n  if (!fontsLoaded) {\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }), error && _jsx(Text, {\n        style: {\n          marginTop: 10,\n          color: 'red',\n          textAlign: 'center',\n          padding: 20\n        },\n        children: error\n      })]\n    });\n  }\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(AppNavigator, {})\n  });\n};\nexport default App;\n_NativeWindStyleSheet.create({\n  styles: {\n    \":is(.flex)\": {\n      \"display\": \"flex\"\n    }\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","Provider","store","AppNavigator","testSupabaseConnection","Font","ActivityIndicator","View","Text","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","_useState3","_useState4","error","setError","_useState5","_useState6","retryCount","setRetryCount","checkConnection","_ref","_asyncToGenerator","isConnected","console","log","apply","arguments","loadFonts","_ref2","loadAsync","style","flex","justifyContent","alignItems","children","size","color","marginTop","textAlign","padding","_NativeWindStyleSheet","create","styles"],"sources":["C:/Users/migue/TravelQuest/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './src/features/store';\r\nimport AppNavigator from './src/navigation/AppNavigator';\r\nimport { testSupabaseConnection } from './src/services/testConnection';\r\nimport * as Font from 'expo-font';\r\nimport { ActivityIndicator, View, Text } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nconst App = () => {\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      const isConnected = await testSupabaseConnection();\r\n      console.log('Conexión a Supabase:', isConnected ? 'Exitosa' : 'Fallida');\r\n    };\r\n\r\n    const loadFonts = async () => {\r\n      try {\r\n        // Intentar cargar las fuentes sin Ionicons primero\r\n        await Font.loadAsync({\r\n          // Aquí puedes agregar otras fuentes si las necesitas\r\n        });\r\n        setFontsLoaded(true);\r\n      } catch (error) {\r\n        console.error('Error cargando fuentes:', error);\r\n        setError('Error al cargar las fuentes. La aplicación continuará sin algunos íconos.');\r\n        // Continuar la aplicación incluso si hay error\r\n        setFontsLoaded(true);\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n    loadFonts();\r\n  }, [retryCount]);\r\n\r\n  if (!fontsLoaded) {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n        {error && (\r\n          <Text style={{ marginTop: 10, color: 'red', textAlign: 'center', padding: 20 }}>\r\n            {error}\r\n          </Text>\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <AppNavigator />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,KAAK;AACd,OAAOC,YAAY;AACnB,SAASC,sBAAsB;AAC/B,OAAO,KAAKC,IAAI,MAAM,WAAW;AAAC,OAAAC,iBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAIlC,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,SAAA,GAAsCd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA0BnB,QAAQ,CAAgB,IAAI,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAhDE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EACtB,IAAAG,UAAA,GAAoCvB,QAAQ,CAAC,CAAC,CAAC;IAAAwB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAxCE,UAAU,GAAAD,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAEhCzB,SAAS,CAAC,YAAM;IACd,IAAM4B,eAAe;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAClC,IAAMC,WAAW,SAAS1B,sBAAsB,CAAC,CAAC;QAClD2B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,WAAW,GAAG,SAAS,GAAG,SAAS,CAAC;MAC1E,CAAC;MAAA,gBAHKH,eAAeA,CAAA;QAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;MAAA;IAAA,GAGpB;IAED,IAAMC,SAAS;MAAA,IAAAC,KAAA,GAAAP,iBAAA,CAAG,aAAY;QAC5B,IAAI;UAEF,MAAMxB,IAAI,CAACgC,SAAS,CAAC,CAErB,CAAC,CAAC;UACFnB,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdU,OAAO,CAACV,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/CC,QAAQ,CAAC,2EAA2E,CAAC;UAErFJ,cAAc,CAAC,IAAI,CAAC;QACtB;MACF,CAAC;MAAA,gBAbKiB,SAASA,CAAA;QAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;IAAA,GAad;IAEDP,eAAe,CAAC,CAAC;IACjBQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,IAAI,CAACR,WAAW,EAAE;IAChB,OACEL,KAAA,CAACL,IAAI;MAAC+B,KAAK,EAAE;QAAEC,IAAI,EAAE,CAAC;QAAEC,cAAc,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAAC,QAAA,GACvEhC,IAAA,CAACJ,iBAAiB;QAACqC,IAAI,EAAC,OAAO;QAACC,KAAK,EAAC;MAAS,CAAE,CAAC,EACjDvB,KAAK,IACJX,IAAA,CAACF,IAAI;QAAC8B,KAAK,EAAE;UAAEO,SAAS,EAAE,EAAE;UAAED,KAAK,EAAE,KAAK;UAAEE,SAAS,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAG,CAAE;QAAAL,QAAA,EAC5ErB;MAAK,CACF,CACP;IAAA,CACG,CAAC;EAEX;EAEA,OACEX,IAAA,CAACT,QAAQ;IAACC,KAAK,EAAEA,KAAM;IAAAwC,QAAA,EACrBhC,IAAA,CAACP,YAAY,IAAE;EAAC,CACR,CAAC;AAEf,CAAC;AAED,eAAeU,GAAG;AAACmC,qBAAA,CAAAC,MAAA;EAAAC,MAAA;IAAA;MAAA;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
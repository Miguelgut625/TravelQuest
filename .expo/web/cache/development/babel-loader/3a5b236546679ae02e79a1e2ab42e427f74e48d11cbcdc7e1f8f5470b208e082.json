{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { supabase } from \"./supabase\";\nexport var checkJournalTables = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var _yield$Promise$allSet = yield Promise.allSettled([supabase.from('journal_entries').select('id').limit(1), supabase.from('journey_diary').select('id').limit(1)]),\n        _yield$Promise$allSet2 = _slicedToArray(_yield$Promise$allSet, 2),\n        journalEntriesResult = _yield$Promise$allSet2[0],\n        journeyDiaryResult = _yield$Promise$allSet2[1];\n      return {\n        journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n        journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n      };\n    } catch (error) {\n      console.error('Error verificando tablas del diario:', error);\n      return {\n        journalEntriesExists: false,\n        journeyDiaryExists: false\n      };\n    }\n  });\n  return function checkJournalTables() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUserJournalEntries = function () {\n  var _ref2 = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$checkJournalTa = yield checkJournalTables(),\n        journalEntriesExists = _yield$checkJournalTa.journalEntriesExists,\n        journeyDiaryExists = _yield$checkJournalTa.journeyDiaryExists;\n      if (!journalEntriesExists && !journeyDiaryExists) {\n        console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n        return {};\n      }\n      var entriesData = null;\n      var error = null;\n      if (journalEntriesExists) {\n        try {\n          var _yield$supabase$from$ = yield supabase.from('journal_entries').select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `).eq('userid', userId).order('created_at', {\n              ascending: false\n            }),\n            data = _yield$supabase$from$.data,\n            entriesError = _yield$supabase$from$.error;\n          if (!entriesError) {\n            entriesData = data;\n          } else if (entriesError.message && (entriesError.message.includes('cityid') || entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200' || entriesError.code === '42703')) {\n            try {\n              var _yield$supabase$from$2 = yield supabase.from('journal_entries').select('*').eq('userid', userId).order('created_at', {\n                  ascending: false\n                }),\n                basicData = _yield$supabase$from$2.data,\n                basicError = _yield$supabase$from$2.error;\n              if (!basicError) {\n                entriesData = basicData;\n              } else {\n                var _yield$supabase$from$3 = yield supabase.from('journal_entries').select('*').eq('user_id', userId).order('created_at', {\n                    ascending: false\n                  }),\n                  altData = _yield$supabase$from$3.data,\n                  altError = _yield$supabase$from$3.error;\n                if (!altError) {\n                  entriesData = altData;\n                } else {\n                  error = altError;\n                }\n              }\n            } catch (e) {\n              console.warn('Error al obtener datos sin relación:', e);\n            }\n          } else {\n            error = entriesError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journal_entries:', e);\n        }\n      }\n      if (!entriesData && journeyDiaryExists) {\n        try {\n          var possibleQueries = [supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', {\n            ascending: false\n          }), supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', {\n            ascending: false\n          })];\n          for (var query of possibleQueries) {\n            try {\n              var _yield$query = yield query,\n                diaryData = _yield$query.data,\n                diaryError = _yield$query.error;\n              if (!diaryError && diaryData && diaryData.length > 0) {\n                entriesData = diaryData;\n                break;\n              }\n            } catch (e) {\n              console.warn('Error en consulta alternativa:', e);\n            }\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journey_diary:', e);\n        }\n      }\n      if (!entriesData && error) {\n        throw error;\n      }\n      if (!entriesData) {\n        return {};\n      }\n      return organizeCityEntries(entriesData, true);\n    } catch (error) {\n      console.error('Error obteniendo entradas del diario:', error);\n      throw error;\n    }\n  });\n  return function getUserJournalEntries(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar organizeCityEntries = function organizeCityEntries(data) {\n  var missingCityRelation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var entriesByCity = {};\n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  data.forEach(function (entry) {\n    var _entry$cities, _entry$city;\n    var cityName = 'Ciudad Desconocida';\n    if (!missingCityRelation && (_entry$cities = entry.cities) != null && _entry$cities.name) {\n      cityName = entry.cities.name;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.cityname) {\n      cityName = entry.cityname;\n    } else if (entry.cities && entry.cities.name) {\n      cityName = entry.cities.name;\n    } else if ((_entry$city = entry.city) != null && _entry$city.name) {\n      cityName = entry.city.name;\n    } else {\n      if (entry.tags && Array.isArray(entry.tags)) {\n        var commonTags = ['misión', 'mission', 'viaje', 'travel', 'foto', 'photo'];\n        var possibleCityTag = entry.tags.find(function (tag) {\n          return !commonTags.includes(tag.toLowerCase()) && tag.charAt(0).toUpperCase() === tag.charAt(0);\n        });\n        if (possibleCityTag) {\n          cityName = possibleCityTag;\n        }\n      }\n      if (cityName === 'Ciudad Desconocida' && entry.content) {\n        var contentMatch = entry.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n        if (contentMatch && contentMatch[1]) {\n          cityName = contentMatch[1].trim();\n        }\n      }\n    }\n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    var processedEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || entry.user_id || entry.userid || '',\n      cityId: entry.cityId || entry.city_id || entry.cityid || '',\n      missionId: entry.missionId || entry.mission_id || entry.missionid || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    entriesByCity[cityName].push(processedEntry);\n  });\n  return entriesByCity;\n};\nexport var getMissionJournalEntries = function () {\n  var _ref3 = _asyncToGenerator(function* (userId, missionId) {\n    try {\n      var _yield$checkJournalTa2 = yield checkJournalTables(),\n        journalEntriesExists = _yield$checkJournalTa2.journalEntriesExists,\n        journeyDiaryExists = _yield$checkJournalTa2.journeyDiaryExists;\n      if (!journalEntriesExists && !journeyDiaryExists) {\n        console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n        return [];\n      }\n      var entriesData = null;\n      var error = null;\n      if (journalEntriesExists) {\n        try {\n          var _yield$supabase$from$4 = yield supabase.from('journal_entries').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n              ascending: false\n            }),\n            data = _yield$supabase$from$4.data,\n            entriesError = _yield$supabase$from$4.error;\n          if (!entriesError) {\n            entriesData = data;\n          } else if (entriesError.message && (entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200')) {\n            var _yield$supabase$from$5 = yield supabase.from('journal_entries').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n                ascending: false\n              }),\n              basicData = _yield$supabase$from$5.data,\n              basicError = _yield$supabase$from$5.error;\n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              error = basicError;\n            }\n          } else {\n            error = entriesError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journal_entries para misión:', e);\n        }\n      }\n      if (!entriesData && journeyDiaryExists) {\n        try {\n          var _yield$supabase$from$6 = yield supabase.from('journey_diary').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n              ascending: false\n            }),\n            _data = _yield$supabase$from$6.data,\n            diaryError = _yield$supabase$from$6.error;\n          if (!diaryError) {\n            entriesData = _data;\n          } else if (diaryError.message && (diaryError.message.includes('cityId') || diaryError.message.includes('relationship') || diaryError.code === 'PGRST200')) {\n            var _yield$supabase$from$7 = yield supabase.from('journey_diary').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n                ascending: false\n              }),\n              _basicData = _yield$supabase$from$7.data,\n              _basicError = _yield$supabase$from$7.error;\n            if (!_basicError) {\n              entriesData = _basicData;\n            } else if (!error) {\n              error = _basicError;\n            }\n          } else if (!error) {\n            error = diaryError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journey_diary para misión:', e);\n        }\n      }\n      if (!entriesData && error) {\n        throw error;\n      }\n      if (!entriesData || entriesData.length === 0) {\n        return [];\n      }\n      return entriesData.map(function (entry) {\n        var _entry$cities2;\n        var cityName = 'Ciudad Desconocida';\n        if ((_entry$cities2 = entry.cities) != null && _entry$cities2.name) {\n          cityName = entry.cities.name;\n        } else if (entry.cityName) {\n          cityName = entry.cityName;\n        } else if (entry.city_name) {\n          cityName = entry.city_name;\n        } else if (entry.tags && Array.isArray(entry.tags)) {\n          var cityTag = entry.tags.find(function (tag) {\n            return tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel';\n          });\n          if (cityTag) {\n            cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n          }\n        }\n        return {\n          id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n          userId: entry.userId || '',\n          cityId: entry.cityId || '',\n          missionId: entry.missionId || missionId,\n          title: entry.title || 'Entrada sin título',\n          content: entry.content || '',\n          photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n          location: entry.location || null,\n          created_at: entry.created_at || new Date().toISOString(),\n          tags: Array.isArray(entry.tags) ? entry.tags : [],\n          city_name: cityName\n        };\n      });\n    } catch (error) {\n      console.error('Error obteniendo entradas de la misión:', error);\n      throw error;\n    }\n  });\n  return function getMissionJournalEntries(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createJournalEntry = function () {\n  var _ref4 = _asyncToGenerator(function* (data) {\n    try {\n      console.log('Intentando crear entrada de diario con datos:', data);\n      var cityName = null;\n      try {\n        var _yield$supabase$from$8 = yield supabase.from('cities').select('name').eq('id', data.cityId).single(),\n          cityData = _yield$supabase$from$8.data,\n          cityError = _yield$supabase$from$8.error;\n        if (!cityError && cityData && cityData.name) {\n          cityName = cityData.name;\n          console.log('Nombre de ciudad encontrado:', cityName);\n        } else {\n          console.warn('No se pudo obtener el nombre de la ciudad (1):', cityError);\n          var _yield$supabase$from$9 = yield supabase.from('journeys').select(`\n            cities (\n              name\n            )\n          `).eq('cityId', data.cityId).single(),\n            journeyData = _yield$supabase$from$9.data,\n            journeyError = _yield$supabase$from$9.error;\n          if (!journeyError && journeyData && journeyData.cities && journeyData.cities.name) {\n            cityName = journeyData.cities.name;\n            console.log('Nombre de ciudad encontrado en journeys:', cityName);\n          } else {\n            console.warn('No se pudo obtener el nombre de la ciudad (2):', journeyError);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al buscar el nombre de la ciudad:', e);\n      }\n      if (!cityName) {\n        try {\n          var _missionData$journey, _missionData$journey$;\n          var _yield$supabase$from$10 = yield supabase.from('journeys_missions').select(`\n            journeyId,\n            journey:journeyId (\n              cityId,\n              cities:cityId (\n                name\n              )\n            )\n          `).eq('id', data.missionId).single(),\n            missionData = _yield$supabase$from$10.data,\n            missionError = _yield$supabase$from$10.error;\n          if (!missionError && missionData != null && (_missionData$journey = missionData.journey) != null && (_missionData$journey$ = _missionData$journey.cities) != null && _missionData$journey$.name) {\n            cityName = missionData.journey.cities.name;\n            console.log('Nombre de ciudad encontrado a través de la misión:', cityName);\n          } else {\n            console.warn('No se pudo obtener el nombre a través de la misión:', missionError);\n          }\n        } catch (e) {\n          console.warn('Error buscando ciudad a través de misión:', e);\n        }\n      }\n      if (!cityName) {\n        var contentCityMatch = data.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n        if (contentCityMatch && contentCityMatch[1]) {\n          cityName = contentCityMatch[1].trim();\n          console.log('Nombre de ciudad extraído del contenido:', cityName);\n        } else {\n          if (typeof data.cityId === 'string' && data.cityId.length > 2 && !/^[0-9a-f-]+$/.test(data.cityId)) {\n            cityName = data.cityId;\n            console.log('Usando cityId como nombre:', cityName);\n          } else {\n            cityName = 'Ciudad Desconocida';\n            console.warn('Usando nombre de ciudad por defecto');\n          }\n        }\n      }\n      var updatedTags = _toConsumableArray(data.tags || []);\n      if (cityName && !updatedTags.includes(cityName)) {\n        updatedTags.push(cityName);\n      }\n      try {\n        var _yield$supabase$from$11 = yield supabase.from('journal_entries').select('*').limit(1),\n          tableInfo = _yield$supabase$from$11.data,\n          tableError = _yield$supabase$from$11.error;\n        var columnStructure = {};\n        if (!tableError && tableInfo) {\n          if (tableInfo.length > 0) {\n            var firstRow = tableInfo[0];\n            if (firstRow && typeof firstRow === 'object') {\n              Object.keys(firstRow).forEach(function (key) {\n                columnStructure[key] = true;\n              });\n              console.log(\"Estructura de columnas detectada:\", Object.keys(columnStructure));\n            }\n          }\n        }\n        var baseData = {\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        };\n        var insertData = _objectSpread({}, baseData);\n        if ('user_id' in columnStructure) insertData.user_id = data.userId;else if ('userid' in columnStructure) insertData.userid = data.userId;else if ('userId' in columnStructure) insertData.userId = data.userId;else insertData.userid = data.userId;\n        if ('city_id' in columnStructure) insertData.city_id = data.cityId;else if ('cityid' in columnStructure) insertData.cityid = data.cityId;else if ('cityId' in columnStructure) insertData.cityId = data.cityId;\n        if ('city_name' in columnStructure) insertData.city_name = cityName;else if ('cityname' in columnStructure) insertData.cityname = cityName;else if ('cityName' in columnStructure) insertData.cityName = cityName;\n        if ('mission_id' in columnStructure) insertData.mission_id = data.missionId;else if ('missionid' in columnStructure) insertData.missionid = data.missionId;else if ('missionId' in columnStructure) insertData.missionId = data.missionId;\n        console.log('Intentando insertar con datos adaptados:', insertData);\n        var _yield$supabase$from$12 = yield supabase.from('journal_entries').insert(insertData),\n          error = _yield$supabase$from$12.error;\n        if (!error) {\n          console.log('Entrada creada exitosamente');\n          return true;\n        }\n        console.warn('Error al insertar con datos adaptados:', error);\n        var insertDataOptions = [{\n          user_id: data.userId,\n          city_id: data.cityId,\n          mission_id: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          city_name: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        }, {\n          userId: data.userId,\n          cityId: data.cityId,\n          missionId: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          cityName: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        }, {\n          userid: data.userId,\n          cityid: data.cityId,\n          missionid: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          cityname: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        }, {\n          userid: data.userId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        }];\n        for (var insertOption of insertDataOptions) {\n          try {\n            console.log('Intentando insertar con formato alternativo:', insertOption);\n            var _yield$supabase$from$13 = yield supabase.from('journal_entries').insert(insertOption),\n              _error = _yield$supabase$from$13.error;\n            if (!_error) {\n              console.log('Entrada creada exitosamente con formato alternativo');\n              return true;\n            }\n            console.warn('Error al insertar con este formato:', _error);\n          } catch (e) {\n            console.warn('Excepción al insertar con este formato:', e);\n          }\n        }\n        try {\n          var _yield$supabase$from$14 = yield supabase.from('journey_diary').select('id').limit(1),\n            checkData = _yield$supabase$from$14.data,\n            checkError = _yield$supabase$from$14.error;\n          if (!checkError) {\n            console.log('Intentando insertar en journey_diary como alternativa');\n            var _yield$supabase$from$15 = yield supabase.from('journey_diary').insert({\n                userid: data.userId,\n                title: data.title,\n                content: data.content,\n                photos: data.photos,\n                created_at: new Date().toISOString(),\n                tags: updatedTags\n              }),\n              diaryError = _yield$supabase$from$15.error;\n            if (!diaryError) {\n              console.log('Entrada creada exitosamente en journey_diary');\n              return true;\n            }\n            console.warn('Error al insertar en journey_diary:', diaryError);\n          }\n        } catch (e) {\n          console.warn('Error comprobando journey_diary:', e);\n        }\n        console.error('No se pudo crear entrada en el diario con ningún formato');\n        return false;\n      } catch (tableErr) {\n        console.error('Error al obtener estructura de tabla:', tableErr);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error inesperado al crear entrada en el diario:', error);\n      return false;\n    }\n  });\n  return function createJournalEntry(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","checkJournalTables","_ref","_asyncToGenerator","_yield$Promise$allSet","Promise","allSettled","from","select","limit","_yield$Promise$allSet2","_slicedToArray","journalEntriesResult","journeyDiaryResult","journalEntriesExists","status","value","error","journeyDiaryExists","console","apply","arguments","getUserJournalEntries","_ref2","userId","_yield$checkJournalTa","warn","entriesData","_yield$supabase$from$","eq","order","ascending","data","entriesError","message","includes","code","_yield$supabase$from$2","basicData","basicError","_yield$supabase$from$3","altData","altError","e","possibleQueries","query","_yield$query","diaryData","diaryError","length","organizeCityEntries","_x","missingCityRelation","undefined","entriesByCity","forEach","entry","_entry$cities","_entry$city","cityName","cities","name","city_name","cityname","city","tags","Array","isArray","commonTags","possibleCityTag","find","tag","toLowerCase","charAt","toUpperCase","content","contentMatch","match","trim","processedEntry","id","Date","now","Math","random","toString","substring","user_id","userid","cityId","city_id","cityid","missionId","mission_id","missionid","title","photos","location","created_at","toISOString","push","getMissionJournalEntries","_ref3","_yield$checkJournalTa2","_yield$supabase$from$4","_yield$supabase$from$5","_yield$supabase$from$6","_yield$supabase$from$7","map","_entry$cities2","cityTag","slice","_x2","_x3","createJournalEntry","_ref4","log","_yield$supabase$from$8","single","cityData","cityError","_yield$supabase$from$9","journeyData","journeyError","_missionData$journey","_missionData$journey$","_yield$supabase$from$10","missionData","missionError","journey","contentCityMatch","test","updatedTags","_toConsumableArray","_yield$supabase$from$11","tableInfo","tableError","columnStructure","firstRow","Object","keys","key","baseData","insertData","_objectSpread","_yield$supabase$from$12","insert","insertDataOptions","insertOption","_yield$supabase$from$13","_yield$supabase$from$14","checkData","checkError","_yield$supabase$from$15","tableErr","_x4"],"sources":["C:/Users/migue/TravelQuest/src/services/journalService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface JournalEntryDB {\n  id: string;\n  userId: string;\n  cityId: string;\n  missionId?: string;\n  title: string;\n  content: string;\n  photos: string[];\n  location: {\n    latitude: number;\n    longitude: number;\n  } | null;\n  created_at: string;\n  tags: string[];\n}\n\nexport interface CityJournalEntry extends JournalEntryDB {\n  city_name: string;\n}\n\n/**\n * Verifica si existe la tabla journal_entries o journey_diary en la base de datos\n * @returns objeto con la información de qué tablas existen\n */\nexport const checkJournalTables = async (): Promise<{journalEntriesExists: boolean, journeyDiaryExists: boolean}> => {\n  try {\n    // Probamos si las tablas existen obteniendo solo una fila de cada una\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([\n      supabase.from('journal_entries').select('id').limit(1),\n      supabase.from('journey_diary').select('id').limit(1)\n    ]);\n    \n    return {\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n    };\n  } catch (error) {\n    console.error('Error verificando tablas del diario:', error);\n    return {\n      journalEntriesExists: false,\n      journeyDiaryExists: false\n    };\n  }\n};\n\n/**\n * Obtiene todas las entradas del diario del usuario agrupadas por ciudad\n * @param userId ID del usuario \n * @returns Entradas del diario agrupadas por ciudad\n */\nexport const getUserJournalEntries = async (userId: string): Promise<{ [cityName: string]: CityJournalEntry[] }> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return {}; // Devolvemos un objeto vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `)\n          .eq('userid', userId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityid') || \n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200' ||\n          entriesError.code === '42703')) {\n          \n          // Si hay error de relación, intentamos sin la relación y con nombres alternativos\n          try {\n            const { data: basicData, error: basicError } = await supabase\n              .from('journal_entries')\n              .select('*')\n              .eq('userid', userId)\n              .order('created_at', { ascending: false });\n            \n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              // Intentar con user_id (otra convención común en PostgreSQL)\n              const { data: altData, error: altError } = await supabase\n                .from('journal_entries')\n                .select('*')\n                .eq('user_id', userId)\n                .order('created_at', { ascending: false });\n              \n              if (!altError) {\n                entriesData = altData;\n              } else {\n                error = altError;\n              }\n            }\n          } catch (e) {\n            console.warn('Error al obtener datos sin relación:', e);\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo un error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos diferentes convenciones de nombres para las columnas\n        const possibleQueries = [\n          // Versión 1: Lowercase\n          supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', { ascending: false }),\n          // Versión 2: Underscore\n          supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', { ascending: false }),\n        ];\n        \n        for (const query of possibleQueries) {\n          try {\n            const { data: diaryData, error: diaryError } = await query;\n            if (!diaryError && diaryData && diaryData.length > 0) {\n              entriesData = diaryData;\n              break;\n            }\n          } catch (e) {\n            // Continuar con la siguiente consulta\n            console.warn('Error en consulta alternativa:', e);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un objeto vacío\n    if (!entriesData) {\n      return {};\n    }\n    \n    // Organizar las entradas por ciudad\n    return organizeCityEntries(entriesData, true);\n  } catch (error) {\n    console.error('Error obteniendo entradas del diario:', error);\n    throw error;\n  }\n};\n\n/**\n * Organiza las entradas del diario por ciudad\n * @param data Datos de las entradas\n * @param missingCityRelation Indica si falta la relación con la ciudad\n * @returns Entradas organizadas por ciudad\n */\nconst organizeCityEntries = (\n  data: any[] | null, \n  missingCityRelation: boolean = false\n): { [cityName: string]: CityJournalEntry[] } => {\n  const entriesByCity: { [cityName: string]: CityJournalEntry[] } = {};\n  \n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  \n  data.forEach((entry: any) => {\n    // Intentar todas las posibles formas del nombre de la ciudad\n    let cityName = 'Ciudad Desconocida';\n    \n    // Orden de prioridad para obtener el nombre de la ciudad\n    if (!missingCityRelation && entry.cities?.name) {\n      cityName = entry.cities.name;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.cityname) {\n      cityName = entry.cityname;\n    } else if (entry.cities && entry.cities.name) {\n      cityName = entry.cities.name;\n    } else if (entry.city?.name) {\n      cityName = entry.city.name;\n    } else {\n      // Buscar en las etiquetas cualquier nombre que parezca ser de ciudad\n      if (entry.tags && Array.isArray(entry.tags)) {\n        // Filtrar tags comunes que no son ciudades\n        const commonTags = ['misión', 'mission', 'viaje', 'travel', 'foto', 'photo'];\n        const possibleCityTag = entry.tags.find((tag: string) => \n          !commonTags.includes(tag.toLowerCase()) && \n          tag.charAt(0).toUpperCase() === tag.charAt(0) // Primera letra mayúscula\n        );\n        \n        if (possibleCityTag) {\n          cityName = possibleCityTag;\n        }\n      }\n      \n      // Buscar en el contenido de la entrada\n      if (cityName === 'Ciudad Desconocida' && entry.content) {\n        const contentMatch = entry.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n        if (contentMatch && contentMatch[1]) {\n          cityName = contentMatch[1].trim();\n        }\n      }\n    }\n    \n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    \n    // Nos aseguramos de que todos los campos necesarios existan\n    const processedEntry: CityJournalEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || entry.user_id || entry.userid || '',\n      cityId: entry.cityId || entry.city_id || entry.cityid || '',\n      missionId: entry.missionId || entry.mission_id || entry.missionid || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : \n              (entry.photos ? [entry.photos] : []),\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    \n    entriesByCity[cityName].push(processedEntry);\n  });\n\n  return entriesByCity;\n};\n\n/**\n * Obtiene las entradas del diario relacionadas con una misión específica\n * @param userId ID del usuario\n * @param missionId ID de la misión\n * @returns Entradas del diario relacionadas con la misión\n */\nexport const getMissionJournalEntries = async (userId: string, missionId: string): Promise<CityJournalEntry[]> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return []; // Devolvemos un array vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journal_entries')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else {\n            error = basicError;\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: diaryError } = await supabase\n          .from('journey_diary')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!diaryError) {\n          entriesData = data;\n        } else if (diaryError.message && (\n          diaryError.message.includes('cityId') || \n          diaryError.message.includes('relationship') ||\n          diaryError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journey_diary')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n            error = basicError;\n          }\n        } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n          error = diaryError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un array vacío\n    if (!entriesData || entriesData.length === 0) {\n      return [];\n    }\n    \n    // Procesamos las entradas para asegurar el formato correcto\n    return entriesData.map((entry: any) => {\n      let cityName = 'Ciudad Desconocida';\n      \n      if (entry.cities?.name) {\n        cityName = entry.cities.name;\n      } else if (entry.cityName) {\n        cityName = entry.cityName;\n      } else if (entry.city_name) {\n        cityName = entry.city_name;\n      } else if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find((tag: string) => \n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\n        );\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\n        }\n      }\n      \n      return {\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        userId: entry.userId || '',\n        cityId: entry.cityId || '',\n        missionId: entry.missionId || missionId,\n        title: entry.title || 'Entrada sin título',\n        content: entry.content || '',\n        photos: Array.isArray(entry.photos) ? entry.photos : \n                (entry.photos ? [entry.photos] : []),\n        location: entry.location || null,\n        created_at: entry.created_at || new Date().toISOString(),\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\n        city_name: cityName\n      };\n    });\n  } catch (error) {\n    console.error('Error obteniendo entradas de la misión:', error);\n    throw error;\n  }\n};\n\nexport const createJournalEntry = async (data: {\n  userId: string;\n  cityId: string;\n  missionId: string;\n  title: string;\n  content: string;\n  photos: string[];\n  tags?: string[];\n}) => {\n  try {\n    console.log('Intentando crear entrada de diario con datos:', data);\n    \n    // Primero, obtener el nombre de la ciudad usando cityId\n    let cityName = null;\n    try {\n      // Consulta directa a la tabla cities\n      const { data: cityData, error: cityError } = await supabase\n        .from('cities')\n        .select('name')\n        .eq('id', data.cityId)\n        .single();\n      \n      if (!cityError && cityData && cityData.name) {\n        cityName = cityData.name;\n        console.log('Nombre de ciudad encontrado:', cityName);\n      } else {\n        console.warn('No se pudo obtener el nombre de la ciudad (1):', cityError);\n        \n        // Intento alternativo: buscar en journeys\n        const { data: journeyData, error: journeyError } = await supabase\n          .from('journeys')\n          .select(`\n            cities (\n              name\n            )\n          `)\n          .eq('cityId', data.cityId)\n          .single();\n        \n        if (!journeyError && journeyData && journeyData.cities && journeyData.cities.name) {\n          cityName = journeyData.cities.name;\n          console.log('Nombre de ciudad encontrado en journeys:', cityName);\n        } else {\n          console.warn('No se pudo obtener el nombre de la ciudad (2):', journeyError);\n        }\n      }\n    } catch (e) {\n      console.warn('Error al buscar el nombre de la ciudad:', e);\n    }\n    \n    // Si no pudimos obtener el nombre de la ciudad, vamos a intentar con datos de la misión\n    if (!cityName) {\n      try {\n        // Buscar en la tabla journeys_missions\n        const { data: missionData, error: missionError } = await supabase\n          .from('journeys_missions')\n          .select(`\n            journeyId,\n            journey:journeyId (\n              cityId,\n              cities:cityId (\n                name\n              )\n            )\n          `)\n          .eq('id', data.missionId)\n          .single();\n        \n        if (!missionError && missionData?.journey?.cities?.name) {\n          cityName = missionData.journey.cities.name;\n          console.log('Nombre de ciudad encontrado a través de la misión:', cityName);\n        } else {\n          console.warn('No se pudo obtener el nombre a través de la misión:', missionError);\n        }\n      } catch (e) {\n        console.warn('Error buscando ciudad a través de misión:', e);\n      }\n    }\n    \n    // Si todavía no tenemos nombre, usar algún valor por defecto\n    if (!cityName) {\n      // Último intento: verificar si hay texto en el contenido que indique la ciudad\n      const contentCityMatch = data.content.match(/(?:en|in) ([A-Za-z\\s]+)\\.$/);\n      if (contentCityMatch && contentCityMatch[1]) {\n        cityName = contentCityMatch[1].trim();\n        console.log('Nombre de ciudad extraído del contenido:', cityName);\n      } else {\n        // Si cityId parece ser un nombre de ciudad, usarlo directamente\n        if (typeof data.cityId === 'string' && data.cityId.length > 2 && !/^[0-9a-f-]+$/.test(data.cityId)) {\n          cityName = data.cityId;\n          console.log('Usando cityId como nombre:', cityName);\n        } else {\n          cityName = 'Ciudad Desconocida';\n          console.warn('Usando nombre de ciudad por defecto');\n        }\n      }\n    }\n    \n    // Añadir el nombre de la ciudad a las etiquetas\n    const updatedTags = [...(data.tags || [])];\n    if (cityName && !updatedTags.includes(cityName)) {\n      updatedTags.push(cityName);\n    }\n    \n    // NUEVO: Primero, obtener estructura de la tabla para conocer las columnas reales\n    try {\n      const { data: tableInfo, error: tableError } = await supabase\n        .from('journal_entries')\n        .select('*')\n        .limit(1);\n      \n      let columnStructure: Record<string, boolean> = {};\n      if (!tableError && tableInfo) {\n        // Si pudimos obtener datos, analizamos el primer registro para ver las columnas\n        if (tableInfo.length > 0) {\n          // Usamos un enfoque tipado más seguro\n          const firstRow = tableInfo[0];\n          if (firstRow && typeof firstRow === 'object') {\n            // Iterar sobre las propiedades del objeto de manera segura\n            Object.keys(firstRow).forEach(key => {\n              columnStructure[key] = true;\n            });\n            console.log(\"Estructura de columnas detectada:\", Object.keys(columnStructure));\n          }\n        }\n      }\n      \n      // Preparamos una estructura básica de datos para la inserción\n      const baseData: Record<string, any> = {\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        created_at: new Date().toISOString(),\n        tags: updatedTags\n      };\n      \n      // Añadimos los campos de IDs según las columnas detectadas\n      const insertData: Record<string, any> = { ...baseData };\n      \n      // Usuario\n      if ('user_id' in columnStructure) insertData.user_id = data.userId;\n      else if ('userid' in columnStructure) insertData.userid = data.userId;\n      else if ('userId' in columnStructure) insertData.userId = data.userId;\n      else insertData.userid = data.userId; // Por defecto\n      \n      // Ciudad\n      if ('city_id' in columnStructure) insertData.city_id = data.cityId;\n      else if ('cityid' in columnStructure) insertData.cityid = data.cityId;\n      else if ('cityId' in columnStructure) insertData.cityId = data.cityId;\n      \n      // Nombre de ciudad (si existe columna)\n      if ('city_name' in columnStructure) insertData.city_name = cityName;\n      else if ('cityname' in columnStructure) insertData.cityname = cityName;\n      else if ('cityName' in columnStructure) insertData.cityName = cityName;\n      \n      // Misión\n      if ('mission_id' in columnStructure) insertData.mission_id = data.missionId;\n      else if ('missionid' in columnStructure) insertData.missionid = data.missionId;\n      else if ('missionId' in columnStructure) insertData.missionId = data.missionId;\n      \n      console.log('Intentando insertar con datos adaptados:', insertData);\n      const { error } = await supabase.from('journal_entries').insert(insertData);\n      \n      if (!error) {\n        console.log('Entrada creada exitosamente');\n        return true;\n      }\n      \n      console.warn('Error al insertar con datos adaptados:', error);\n      \n      // Si falló, intentamos con las tres versiones anteriores\n      const insertDataOptions = [\n        // Versión 1: snake_case (formato tradicional PostgreSQL)\n        {\n          user_id: data.userId,\n          city_id: data.cityId,\n          mission_id: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          city_name: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        },\n        // Versión 2: camelCase\n        {\n          userId: data.userId,\n          cityId: data.cityId,\n          missionId: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          cityName: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        },\n        // Versión 3: lowercase\n        {\n          userid: data.userId,\n          cityid: data.cityId,\n          missionid: data.missionId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          cityname: cityName,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        },\n        // Versión 4: solo campos obligatorios mínimos\n        {\n          userid: data.userId,\n          title: data.title,\n          content: data.content,\n          photos: data.photos,\n          created_at: new Date().toISOString(),\n          tags: updatedTags\n        }\n      ];\n      \n      // Intentar cada formato de nombres de columnas\n      for (const insertOption of insertDataOptions) {\n        try {\n          console.log('Intentando insertar con formato alternativo:', insertOption);\n          const { error } = await supabase.from('journal_entries').insert(insertOption);\n          \n          if (!error) {\n            console.log('Entrada creada exitosamente con formato alternativo');\n            return true;\n          }\n          \n          console.warn('Error al insertar con este formato:', error);\n        } catch (e) {\n          console.warn('Excepción al insertar con este formato:', e);\n        }\n      }\n      \n      // Último intento: usar la tabla journey_diary si está disponible\n      try {\n        const { data: checkData, error: checkError } = await supabase\n          .from('journey_diary')\n          .select('id')\n          .limit(1);\n        \n        if (!checkError) {\n          // La tabla journey_diary existe, intentamos insertar ahí\n          console.log('Intentando insertar en journey_diary como alternativa');\n          const { error: diaryError } = await supabase.from('journey_diary').insert({\n            userid: data.userId,\n            title: data.title,\n            content: data.content,\n            photos: data.photos,\n            created_at: new Date().toISOString(),\n            tags: updatedTags\n          });\n          \n          if (!diaryError) {\n            console.log('Entrada creada exitosamente en journey_diary');\n            return true;\n          }\n          \n          console.warn('Error al insertar en journey_diary:', diaryError);\n        }\n      } catch (e) {\n        console.warn('Error comprobando journey_diary:', e);\n      }\n      \n      // Si llegamos aquí, ninguno de los formatos funcionó\n      console.error('No se pudo crear entrada en el diario con ningún formato');\n      return false;\n    } catch (tableErr) {\n      console.error('Error al obtener estructura de tabla:', tableErr);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error inesperado al crear entrada en el diario:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
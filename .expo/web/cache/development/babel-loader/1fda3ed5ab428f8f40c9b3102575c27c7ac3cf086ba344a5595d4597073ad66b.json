{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useSelector } from 'react-redux';\nimport Map, { MapMarker } from \"../../components/maps\";\nimport * as Location from 'expo-location';\nimport { useNavigation } from '@react-navigation/native';\nimport generateMission from \"../../services/missionGenerator\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar MapScreen = function MapScreen() {\n  var navigation = useNavigation();\n  var _useState = useState({\n      latitude: 40.416775,\n      longitude: -3.703790,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    region = _useState2[0],\n    setRegion = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    searchCity = _useState4[0],\n    setSearchCity = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    duration = _useState6[0],\n    setDuration = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    missionCount = _useState8[0],\n    setMissionCount = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    errorMsg = _useState10[0],\n    setErrorMsg = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    missions = _useState12[0],\n    setMissions = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    cityMarker = _useState14[0],\n    setCityMarker = _useState14[1];\n  var missionsFromRedux = useSelector(function (state) {\n    return state.missions.missions;\n  });\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== 'granted') {\n        setErrorMsg('Se requiere permiso para acceder a la ubicación');\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({});\n      setRegion({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      });\n    })();\n  }, []);\n  var getCityNameFromCoordinates = function () {\n    var _ref2 = _asyncToGenerator(function* (latitude, longitude) {\n      try {\n        console.log('Obteniendo nombre de ciudad para coordenadas:', latitude, longitude);\n        var response = yield fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBIcgxbRUUIOuQ01SdaiBh-vZh4b2pDHGI`);\n        var data = yield response.json();\n        console.log('Respuesta de la API:', data);\n        if (data.results && data.results[0]) {\n          var _data$results$0$addre;\n          var cityName = ((_data$results$0$addre = data.results[0].address_components.find(function (component) {\n            return component.types.includes('locality');\n          })) == null ? void 0 : _data$results$0$addre.long_name) || data.results[0].formatted_address;\n          console.log('Nombre de ciudad encontrado:', cityName);\n          setCityMarker({\n            coordinate: {\n              latitude: latitude,\n              longitude: longitude\n            },\n            title: cityName,\n            description: 'Ciudad seleccionada'\n          });\n          setSearchCity(cityName);\n        } else {\n          console.log('No se encontraron resultados para las coordenadas');\n        }\n      } catch (error) {\n        console.error('Error al obtener nombre de la ciudad:', error);\n        setErrorMsg('Error al obtener el nombre de la ciudad');\n      }\n    });\n    return function getCityNameFromCoordinates(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getCityCoordinates = function () {\n    var _ref3 = _asyncToGenerator(function* (cityName) {\n      try {\n        var response = yield fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(cityName)}&key=AIzaSyBIcgxbRUUIOuQ01SdaiBh-vZh4b2pDHGI`);\n        var data = yield response.json();\n        if (data.results && data.results[0]) {\n          var _data$results$0$geome = data.results[0].geometry.location,\n            lat = _data$results$0$geome.lat,\n            lng = _data$results$0$geome.lng;\n          setCityMarker({\n            coordinate: {\n              latitude: lat,\n              longitude: lng\n            },\n            title: cityName,\n            description: 'Ciudad seleccionada'\n          });\n          setRegion({\n            latitude: lat,\n            longitude: lng,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          });\n        }\n      } catch (error) {\n        console.error('Error al obtener coordenadas:', error);\n        setErrorMsg('Error al obtener las coordenadas de la ciudad');\n      }\n    });\n    return function getCityCoordinates(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleMapPress = function handleMapPress(event) {\n    console.log('Map pressed:', event.nativeEvent);\n    var coordinate = event.nativeEvent.coordinate;\n    if (coordinate) {\n      getCityNameFromCoordinates(coordinate.latitude, coordinate.longitude);\n    }\n  };\n  var handleSearch = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var durationNum = parseInt(duration);\n      var missionCountNum = parseInt(missionCount);\n      if (searchCity && durationNum && missionCountNum) {\n        try {\n          yield getCityCoordinates(searchCity);\n          yield generateMission(searchCity, durationNum, missionCountNum);\n          navigation.navigate('Missions');\n        } catch (error) {\n          console.error('Error:', error);\n        }\n      } else {\n        console.log('Por favor, ingresa una ciudad, duración y número de misiones válidos.');\n      }\n    });\n    return function handleSearch() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.searchContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Buscar ciudad\",\n        value: searchCity,\n        onChangeText: setSearchCity\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Duraci\\xF3n (d\\xEDas)\",\n        value: duration,\n        onChangeText: setDuration,\n        keyboardType: \"numeric\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"N\\xFAmero de misiones\",\n        value: missionCount,\n        onChangeText: setMissionCount,\n        keyboardType: \"numeric\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: handleSearch,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Buscar Aventuras\"\n        })\n      }), errorMsg ? _jsx(Text, {\n        style: styles.errorText,\n        children: errorMsg\n      }) : null]\n    }), _jsx(View, {\n      style: styles.mapContainer,\n      children: _jsxs(Map, {\n        style: styles.map,\n        region: region,\n        onRegionChangeComplete: setRegion,\n        initialRegion: region,\n        showsUserLocation: true,\n        showsMyLocationButton: true,\n        onPress: handleMapPress,\n        children: [cityMarker && _jsx(MapMarker, {\n          coordinate: cityMarker.coordinate,\n          title: cityMarker.title,\n          description: cityMarker.description\n        }, \"city-marker\"), missions.map(function (mission) {\n          return _jsx(MapMarker, {\n            coordinate: mission.location,\n            title: mission.title,\n            description: mission.description\n          }, mission.id);\n        })]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  searchContainer: {\n    backgroundColor: 'white',\n    padding: 15,\n    margin: 10,\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    zIndex: 1\n  },\n  mapContainer: {\n    flex: 1,\n    margin: 10,\n    height: Platform.OS === 'web' ? height * 0.6 : height * 0.5,\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: 'white',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  map: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    borderRadius: 10\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n    backgroundColor: 'white'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  errorText: {\n    color: 'red',\n    marginTop: 10,\n    textAlign: 'center'\n  }\n});\nexport default MapScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    },\n    \":is(.flex)\": {\n      \"display\": \"flex\"\n    },\n    \":is(.hidden)\": {\n      \"display\": \"none\"\n    },\n    \":is(.elevation)\": {\n      \"elevation\": 3\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  topics: {\n    \"container\": [\"width\"]\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","TextInput","TouchableOpacity","Text","Dimensions","Platform","useSelector","Map","MapMarker","Location","useNavigation","generateMission","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","height","MapScreen","navigation","_useState","latitude","longitude","latitudeDelta","longitudeDelta","_useState2","_slicedToArray","region","setRegion","_useState3","_useState4","searchCity","setSearchCity","_useState5","_useState6","duration","setDuration","_useState7","_useState8","missionCount","setMissionCount","_useState9","_useState10","errorMsg","setErrorMsg","_useState11","_useState12","missions","setMissions","_useState13","_useState14","cityMarker","setCityMarker","missionsFromRedux","state","_asyncToGenerator","_yield$Location$reque","requestForegroundPermissionsAsync","status","location","getCurrentPositionAsync","coords","getCityNameFromCoordinates","_ref2","console","log","response","fetch","data","json","results","_data$results$0$addre","cityName","address_components","find","component","types","includes","long_name","formatted_address","coordinate","title","description","error","_x","_x2","apply","arguments","getCityCoordinates","_ref3","encodeURIComponent","_data$results$0$geome","geometry","lat","lng","_x3","handleMapPress","event","nativeEvent","handleSearch","_ref4","durationNum","parseInt","missionCountNum","navigate","style","styles","container","children","searchContainer","input","placeholder","value","onChangeText","keyboardType","button","onPress","buttonText","errorText","mapContainer","map","onRegionChangeComplete","initialRegion","showsUserLocation","showsMyLocationButton","mission","id","create","flex","backgroundColor","padding","margin","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","zIndex","OS","overflow","borderColor","borderWidth","marginBottom","paddingHorizontal","alignItems","color","fontWeight","marginTop","textAlign","_NativeWindStyleSheet","atRules","topics"],"sources":["C:/Users/Guacter/TravelQuest/src/screens/main/MapScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, StyleSheet, TextInput, TouchableOpacity, Text, Dimensions, Platform } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { Mission } from '../../features/missionSlice';\r\nimport Map, { MapMarker } from '../../components/maps';\r\nimport * as Location from 'expo-location';\r\nimport { getMissionsByCityAndDuration } from '../../services/missionService';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { MainTabNavigationProp } from '../../types/navigation';\r\nimport generateMission from '../../services/missionGenerator';\r\n\r\ninterface CityMarker {\r\n  coordinate: {\r\n    latitude: number;\r\n    longitude: number;\r\n  };\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nconst MapScreen = () => {\r\n  const navigation = useNavigation<MainTabNavigationProp>();\r\n  const [region, setRegion] = useState({\r\n    latitude: 40.416775,\r\n    longitude: -3.703790,\r\n    latitudeDelta: 0.0922,\r\n    longitudeDelta: 0.0421,\r\n  });\r\n  const [searchCity, setSearchCity] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [missionCount, setMissionCount] = useState('');\r\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\r\n  const [missions, setMissions] = useState<Mission[]>([]);\r\n  const [cityMarker, setCityMarker] = useState<CityMarker | null>(null);\r\n\r\n  const missionsFromRedux = useSelector((state: RootState) => state.missions.missions);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        setErrorMsg('Se requiere permiso para acceder a la ubicación');\r\n        return;\r\n      }\r\n\r\n      let location = await Location.getCurrentPositionAsync({});\r\n      setRegion({\r\n        latitude: location.coords.latitude,\r\n        longitude: location.coords.longitude,\r\n        latitudeDelta: 0.0922,\r\n        longitudeDelta: 0.0421,\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  const getCityNameFromCoordinates = async (latitude: number, longitude: number) => {\r\n    try {\r\n      console.log('Obteniendo nombre de ciudad para coordenadas:', latitude, longitude);\r\n      const response = await fetch(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBIcgxbRUUIOuQ01SdaiBh-vZh4b2pDHGI`\r\n      );\r\n      const data = await response.json();\r\n      console.log('Respuesta de la API:', data);\r\n      \r\n      if (data.results && data.results[0]) {\r\n        const cityName = data.results[0].address_components.find(\r\n          (component: any) => component.types.includes('locality')\r\n        )?.long_name || data.results[0].formatted_address;\r\n\r\n        console.log('Nombre de ciudad encontrado:', cityName);\r\n\r\n        setCityMarker({\r\n          coordinate: { latitude, longitude },\r\n          title: cityName,\r\n          description: 'Ciudad seleccionada'\r\n        });\r\n        setSearchCity(cityName);\r\n      } else {\r\n        console.log('No se encontraron resultados para las coordenadas');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener nombre de la ciudad:', error);\r\n      setErrorMsg('Error al obtener el nombre de la ciudad');\r\n    }\r\n  };\r\n\r\n  const getCityCoordinates = async (cityName: string) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(cityName)}&key=AIzaSyBIcgxbRUUIOuQ01SdaiBh-vZh4b2pDHGI`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      if (data.results && data.results[0]) {\r\n        const { lat, lng } = data.results[0].geometry.location;\r\n        setCityMarker({\r\n          coordinate: { latitude: lat, longitude: lng },\r\n          title: cityName,\r\n          description: 'Ciudad seleccionada'\r\n        });\r\n        setRegion({\r\n          latitude: lat,\r\n          longitude: lng,\r\n          latitudeDelta: 0.0922,\r\n          longitudeDelta: 0.0421,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener coordenadas:', error);\r\n      setErrorMsg('Error al obtener las coordenadas de la ciudad');\r\n    }\r\n  };\r\n\r\n  const handleMapPress = (event: any) => {\r\n    console.log('Map pressed:', event.nativeEvent);\r\n    const { coordinate } = event.nativeEvent;\r\n    if (coordinate) {\r\n      getCityNameFromCoordinates(coordinate.latitude, coordinate.longitude);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    const durationNum = parseInt(duration);\r\n    const missionCountNum = parseInt(missionCount);\r\n    \r\n    if (searchCity && durationNum && missionCountNum) {\r\n      try {\r\n        await getCityCoordinates(searchCity);\r\n        await generateMission(searchCity, durationNum, missionCountNum);\r\n        navigation.navigate('Missions');\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    } else {\r\n      console.log('Por favor, ingresa una ciudad, duración y número de misiones válidos.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.searchContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Buscar ciudad\"\r\n          value={searchCity}\r\n          onChangeText={setSearchCity}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Duración (días)\"\r\n          value={duration}\r\n          onChangeText={setDuration}\r\n          keyboardType=\"numeric\"\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Número de misiones\"\r\n          value={missionCount}\r\n          onChangeText={setMissionCount}\r\n          keyboardType=\"numeric\"\r\n        />\r\n        <TouchableOpacity style={styles.button} onPress={handleSearch}>\r\n          <Text style={styles.buttonText}>Buscar Aventuras</Text>\r\n        </TouchableOpacity>\r\n        {errorMsg ? <Text style={styles.errorText}>{errorMsg}</Text> : null}\r\n      </View>\r\n      \r\n      <View style={styles.mapContainer}>\r\n        <Map\r\n          style={styles.map}\r\n          region={region}\r\n          onRegionChangeComplete={setRegion}\r\n          initialRegion={region}\r\n          showsUserLocation={true}\r\n          showsMyLocationButton={true}\r\n          onPress={handleMapPress}\r\n        >\r\n          {cityMarker && (\r\n            <MapMarker\r\n              key=\"city-marker\"\r\n              coordinate={cityMarker.coordinate}\r\n              title={cityMarker.title}\r\n              description={cityMarker.description}\r\n            />\r\n          )}\r\n          {missions.map((mission) => (\r\n            <MapMarker\r\n              key={mission.id}\r\n              coordinate={mission.location}\r\n              title={mission.title}\r\n              description={mission.description}\r\n            />\r\n          ))}\r\n        </Map>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  searchContainer: {\r\n    backgroundColor: 'white',\r\n    padding: 15,\r\n    margin: 10,\r\n    borderRadius: 10,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n    zIndex: 1,\r\n  },\r\n  mapContainer: {\r\n    flex: 1,\r\n    margin: 10,\r\n    height: Platform.OS === 'web' ? height * 0.6 : height * 0.5,\r\n    borderRadius: 10,\r\n    overflow: 'hidden',\r\n    backgroundColor: 'white',\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  map: {\r\n    flex: 1,\r\n    width: '100%',\r\n    height: '100%',\r\n    borderRadius: 10,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    borderColor: '#ddd',\r\n    borderWidth: 1,\r\n    borderRadius: 5,\r\n    marginBottom: 10,\r\n    paddingHorizontal: 10,\r\n    backgroundColor: 'white',\r\n  },\r\n  button: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 5,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  },\r\n  errorText: {\r\n    color: 'red',\r\n    marginTop: 10,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default MapScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
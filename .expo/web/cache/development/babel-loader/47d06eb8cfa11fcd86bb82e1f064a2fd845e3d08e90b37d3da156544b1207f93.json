{"ast":null,"code":"import { supabase } from './supabase';\nconst {\n  GoogleGenerativeAI\n} = require(\"@google/generative-ai\");\nconst genAI = new GoogleGenerativeAI(\"AIzaSyB4PuDOYXgbH9egme1UCO0CiRcOV4kVfMM\");\nconst getOrCreateUser = async userId => {\n  try {\n    const {\n      data: existingUser,\n      error: searchError\n    } = await supabase.from('users').select('id').eq('id', userId).single();\n    if (searchError && searchError.code !== 'PGRST116') {\n      throw searchError;\n    }\n    if (existingUser) {\n      return existingUser.id;\n    }\n    const {\n      data: newUser,\n      error: insertError\n    } = await supabase.from('users').insert([{\n      id: userId,\n      email: `${userId}@temp.com`,\n      username: `user_${userId.slice(0, 8)}`,\n      password: 'temp_password'\n    }]).select('id').single();\n    if (insertError) throw insertError;\n    return newUser.id;\n  } catch (error) {\n    console.error('Error al obtener/crear el usuario:', error);\n    throw error;\n  }\n};\nconst getOrCreateCity = async cityName => {\n  try {\n    const {\n      data: existingCity,\n      error: searchError\n    } = await supabase.from('cities').select('id').eq('name', cityName).single();\n    if (searchError && searchError.code !== 'PGRST116') {\n      throw searchError;\n    }\n    if (existingCity) {\n      return existingCity.id;\n    }\n    const {\n      data: newCity,\n      error: insertError\n    } = await supabase.from('cities').insert([{\n      name: cityName\n    }]).select('id').single();\n    if (insertError) throw insertError;\n    return newCity.id;\n  } catch (error) {\n    console.error('Error al obtener/crear la ciudad:', error);\n    throw error;\n  }\n};\nconst getExistingChallenges = async (cityId, count, userId) => {\n  try {\n    const {\n      data: challenges,\n      error\n    } = await supabase.from('challenges').select('*').eq('cityId', cityId);\n    if (error) throw error;\n    if (!challenges || challenges.length === 0) {\n      return null;\n    }\n    const {\n      data: userJourneys,\n      error: journeysError\n    } = await supabase.from('journeys').select('id').eq('userId', userId);\n    if (journeysError) throw journeysError;\n    if (!userJourneys || userJourneys.length === 0) {\n      if (challenges.length >= 10) {\n        const shuffled = challenges.sort(() => 0.5 - Math.random());\n        return shuffled.slice(0, count);\n      }\n      return null;\n    }\n    const {\n      data: userChallenges,\n      error: userError\n    } = await supabase.from('journeys_missions').select('challengeId').in('journeyId', userJourneys.map(j => j.id)).in('challengeId', challenges.map(c => c.id));\n    if (userError) throw userError;\n    const userChallengeIds = new Set(userChallenges?.map(uc => uc.challengeId) || []);\n    const availableChallenges = challenges.filter(c => !userChallengeIds.has(c.id));\n    if (availableChallenges.length >= 10) {\n      const shuffled = availableChallenges.sort(() => 0.5 - Math.random());\n      return shuffled.slice(0, count);\n    }\n    return null;\n  } catch (error) {\n    console.error('Error obteniendo desafíos existentes:', error);\n    throw error;\n  }\n};\nexport const generateMission = async (cityName, duration, missionCount, userId, startDate, endDate) => {\n  try {\n    console.log('generateMission recibió fechas:', {\n      startDate,\n      endDate,\n      duration\n    });\n    const validStartDate = startDate instanceof Date ? startDate : new Date();\n    const validEndDate = endDate instanceof Date ? endDate : new Date(Date.now() + duration * 24 * 60 * 60 * 1000);\n    const startIsoString = validStartDate.toISOString();\n    const endIsoString = validEndDate.toISOString();\n    console.log('Fechas validadas para misiones:', {\n      startIsoString,\n      endIsoString\n    });\n    console.log('Iniciando generación de misión:', {\n      cityName,\n      duration,\n      missionCount,\n      userId,\n      startDate,\n      endDate\n    });\n    await getOrCreateUser(userId);\n    const cityId = await getOrCreateCity(cityName);\n    console.log('CityId obtenido/creado:', cityId);\n    const {\n      data: journey,\n      error: journeyError\n    } = await supabase.from('journeys').insert([{\n      userId,\n      cityId,\n      description: `Viaje a ${cityName} por ${duration} días`,\n      created_at: new Date().toISOString(),\n      start_date: startIsoString,\n      end_date: endIsoString\n    }]).select('id').single();\n    if (journeyError) {\n      console.error('Error creando journey:', journeyError);\n      throw journeyError;\n    }\n    console.log('Journey creado:', journey);\n    const existingChallenges = await getExistingChallenges(cityId, missionCount, userId);\n    console.log('Desafíos existentes encontrados:', existingChallenges);\n    let challenges;\n    if (existingChallenges && existingChallenges.length > 0) {\n      console.log('Usando desafíos existentes');\n      challenges = existingChallenges;\n    } else {\n      console.log('Generando nuevos desafíos');\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const prompt = `Genera ${missionCount} misiones en ${cityName} que se puedan completar en ${duration} días. Devuelve un objeto JSON con la siguiente estructura exacta:\n{\n  \"misiones\": [\n    {\n      \"Título\": \"Título de la misión\",\n      \"Descripción\": \"Descripción detallada de la misión incluyendo qué foto tomar\",\n      \"Dificultad\": \"Fácil|Media|Difícil\",\n      \"Puntos\": 25|50|100\n    }\n  ]\n}\nLos puntos deben ser: 25 para Fácil, 50 para Media, 100 para Difícil. No incluyas explicaciones adicionales, solo el JSON.`;\n      console.log('Prompt:', prompt);\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const missionsData = response.text();\n      console.log('Respuesta de la API:', missionsData);\n      const jsonMatch = missionsData.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No se encontró un objeto JSON válido en la respuesta');\n      }\n      const missions = JSON.parse(jsonMatch[0]);\n      if (!missions.misiones || !Array.isArray(missions.misiones)) {\n        throw new Error('La respuesta no contiene un array de misiones válido');\n      }\n      const formattedChallenges = missions.misiones.map(mission => ({\n        title: mission.Título,\n        description: mission.Descripción,\n        cityId,\n        duration,\n        difficulty: mission.Dificultad,\n        points: mission.Puntos\n      }));\n      const {\n        data: newChallenges,\n        error: challengesError\n      } = await supabase.from('challenges').insert(formattedChallenges).select('id');\n      if (challengesError) throw challengesError;\n      challenges = newChallenges;\n    }\n    const journeyMissions = challenges.map(challenge => ({\n      journeyId: journey.id,\n      challengeId: challenge.id,\n      completed: false,\n      created_at: new Date().toISOString(),\n      start_date: startIsoString,\n      end_date: endIsoString\n    }));\n    console.log('Vincular misiones al journey:', journeyMissions);\n    const {\n      error: linkError\n    } = await supabase.from('journeys_missions').insert(journeyMissions);\n    if (linkError) {\n      console.error('Error vinculando misiones:', linkError);\n      throw linkError;\n    }\n    const {\n      data: createdMissions,\n      error: verifyError\n    } = await supabase.from('journeys_missions').select(`\n        id,\n        challengeId,\n        completed,\n        challenge:challenges (\n        title,\n        description,\n        difficulty,\n          points\n        )\n      `).eq('journeyId', journey.id).order('created_at', {\n      ascending: true\n    });\n    if (verifyError) {\n      console.error('Error verificando misiones creadas:', verifyError);\n      throw verifyError;\n    }\n    if (!createdMissions || createdMissions.length === 0) {\n      throw new Error('No se pudieron crear las misiones');\n    }\n    console.log('Misiones creadas verificadas:', createdMissions);\n    return {\n      journeyId: journey.id,\n      challenges: createdMissions\n    };\n  } catch (error) {\n    console.error('Error generando misiones:', error);\n    throw error;\n  }\n};\nexport default generateMission;","map":{"version":3,"names":["supabase","GoogleGenerativeAI","require","genAI","getOrCreateUser","userId","data","existingUser","error","searchError","from","select","eq","single","code","id","newUser","insertError","insert","email","username","slice","password","console","getOrCreateCity","cityName","existingCity","newCity","name","getExistingChallenges","cityId","count","challenges","length","userJourneys","journeysError","shuffled","sort","Math","random","userChallenges","userError","in","map","j","c","userChallengeIds","Set","uc","challengeId","availableChallenges","filter","has","generateMission","duration","missionCount","startDate","endDate","log","validStartDate","Date","validEndDate","now","startIsoString","toISOString","endIsoString","journey","journeyError","description","created_at","start_date","end_date","existingChallenges","model","getGenerativeModel","prompt","result","generateContent","response","missionsData","text","jsonMatch","match","Error","missions","JSON","parse","misiones","Array","isArray","formattedChallenges","mission","title","Título","Descripción","difficulty","Dificultad","points","Puntos","newChallenges","challengesError","journeyMissions","challenge","journeyId","completed","linkError","createdMissions","verifyError","order","ascending"],"sources":["C:/Users/Dani/TravelQuest/src/services/missionGenerator.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n\r\n// Accede a tu clave de API como una variable de entorno\r\nconst genAI = new GoogleGenerativeAI(\"AIzaSyB4PuDOYXgbH9egme1UCO0CiRcOV4kVfMM\");\r\n\r\n// Interfaces para los tipos de datos\r\ninterface Challenge {\r\n  id: string;\r\n}\r\n\r\ninterface UserChallenge {\r\n  challengeId: string;\r\n}\r\n\r\ninterface Journey {\r\n  id: string;\r\n}\r\n\r\n// Función para verificar y crear usuario si no existe\r\nconst getOrCreateUser = async (userId: string) => {\r\n  try {\r\n    // Verificar si el usuario existe\r\n    const { data: existingUser, error: searchError } = await supabase\r\n      .from('users')\r\n      .select('id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (searchError && searchError.code !== 'PGRST116') {\r\n      throw searchError;\r\n    }\r\n\r\n    if (existingUser) {\r\n      return existingUser.id;\r\n    }\r\n\r\n    // Si no existe, crear el usuario\r\n    const { data: newUser, error: insertError } = await supabase\r\n      .from('users')\r\n      .insert([{\r\n        id: userId,\r\n        email: `${userId}@temp.com`, // Email temporal\r\n        username: `user_${userId.slice(0, 8)}`, // Username temporal\r\n        password: 'temp_password' // Contraseña temporal\r\n      }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (insertError) throw insertError;\r\n\r\n    return newUser.id;\r\n  } catch (error) {\r\n    console.error('Error al obtener/crear el usuario:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para obtener o crear una ciudad\r\nconst getOrCreateCity = async (cityName: string) => {\r\n  try {\r\n    // Primero intentamos encontrar la ciudad\r\n    const { data: existingCity, error: searchError } = await supabase\r\n      .from('cities')\r\n      .select('id')\r\n      .eq('name', cityName)\r\n      .single();\r\n\r\n    if (searchError && searchError.code !== 'PGRST116') { // PGRST116 es el código para \"no se encontraron resultados\"\r\n      throw searchError;\r\n    }\r\n\r\n    if (existingCity) {\r\n      return existingCity.id;\r\n    }\r\n\r\n    // Si no existe la ciudad, la creamos\r\n    const { data: newCity, error: insertError } = await supabase\r\n      .from('cities')\r\n      .insert([{ name: cityName }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (insertError) throw insertError;\r\n\r\n    return newCity.id;\r\n  } catch (error) {\r\n    console.error('Error al obtener/crear la ciudad:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Función para obtener desafíos existentes de una ciudad que el usuario no haya solicitado\r\nconst getExistingChallenges = async (cityId: string, count: number, userId: string) => {\r\n  try {\r\n    // Primero obtenemos todos los desafíos de la ciudad\r\n    const { data: challenges, error } = await supabase\r\n      .from('challenges')\r\n      .select('*') // Seleccionar todos los campos, no solo el id\r\n      .eq('cityId', cityId);\r\n\r\n    if (error) throw error;\r\n\r\n    if (!challenges || challenges.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Obtener los desafíos que el usuario ya ha solicitado\r\n    // Primero obtenemos los journeys del usuario\r\n    const { data: userJourneys, error: journeysError } = await supabase\r\n      .from('journeys')\r\n      .select('id')\r\n      .eq('userId', userId);\r\n\r\n    if (journeysError) throw journeysError;\r\n\r\n    if (!userJourneys || userJourneys.length === 0) {\r\n      // Si el usuario no tiene journeys, seleccionar aleatoriamente la cantidad solicitada\r\n      if (challenges.length >= 10) {\r\n        const shuffled = challenges.sort(() => 0.5 - Math.random());\r\n        return shuffled.slice(0, count);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Luego obtenemos los desafíos asociados a esos journeys\r\n    const { data: userChallenges, error: userError } = await supabase\r\n      .from('journeys_missions')\r\n      .select('challengeId')\r\n      .in('journeyId', userJourneys.map((j: Journey) => j.id))\r\n      .in('challengeId', challenges.map((c: Challenge) => c.id));\r\n\r\n    if (userError) throw userError;\r\n\r\n    // Filtrar los desafíos que el usuario ya ha solicitado\r\n    const userChallengeIds = new Set(userChallenges?.map((uc: UserChallenge) => uc.challengeId) || []);\r\n    const availableChallenges = challenges.filter((c: Challenge) => !userChallengeIds.has(c.id));\r\n\r\n    // Si hay suficientes desafíos disponibles (10 o más)\r\n    if (availableChallenges.length >= 10) {\r\n      // Mezclar el array de desafíos disponibles\r\n      const shuffled = availableChallenges.sort(() => 0.5 - Math.random());\r\n      // Tomar solo la cantidad solicitada\r\n      return shuffled.slice(0, count);\r\n    }\r\n\r\n    return null; // Retornar null si no hay suficientes desafíos disponibles\r\n  } catch (error) {\r\n    console.error('Error obteniendo desafíos existentes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const generateMission = async (\r\n  cityName: string, \r\n  duration: number, \r\n  missionCount: number, \r\n  userId: string,\r\n  startDate: Date | null,\r\n  endDate: Date | null\r\n) => {\r\n  try {\r\n    console.log('generateMission recibió fechas:', {\r\n      startDate,\r\n      endDate,\r\n      duration\r\n    });\r\n    \r\n    // Crear fechas por defecto si no se proporcionan\r\n    const validStartDate = startDate instanceof Date ? startDate : new Date();\r\n    const validEndDate = endDate instanceof Date ? endDate : new Date(Date.now() + duration * 24 * 60 * 60 * 1000);\r\n    \r\n    // Convertir a ISO string para la base de datos\r\n    const startIsoString = validStartDate.toISOString();\r\n    const endIsoString = validEndDate.toISOString();\r\n    \r\n    console.log('Fechas validadas para misiones:', {\r\n      startIsoString,\r\n      endIsoString\r\n    });\r\n    \r\n    console.log('Iniciando generación de misión:', { \r\n      cityName, \r\n      duration, \r\n      missionCount, \r\n      userId,\r\n      startDate,\r\n      endDate \r\n    });\r\n\r\n    // Verificar y crear usuario si no existe\r\n    await getOrCreateUser(userId);\r\n\r\n    // Obtener o crear la ciudad\r\n    const cityId = await getOrCreateCity(cityName);\r\n    console.log('CityId obtenido/creado:', cityId);\r\n\r\n    // Crear un nuevo journey\r\n    const { data: journey, error: journeyError } = await supabase\r\n      .from('journeys')\r\n      .insert([{\r\n        userId,\r\n        cityId,\r\n        description: `Viaje a ${cityName} por ${duration} días`,\r\n        created_at: new Date().toISOString(),\r\n        start_date: startIsoString,\r\n        end_date: endIsoString\r\n      }])\r\n      .select('id')\r\n      .single();\r\n\r\n    if (journeyError) {\r\n      console.error('Error creando journey:', journeyError);\r\n      throw journeyError;\r\n    }\r\n\r\n    console.log('Journey creado:', journey);\r\n\r\n    // Verificar si hay suficientes desafíos existentes que el usuario no haya solicitado\r\n    const existingChallenges = await getExistingChallenges(cityId, missionCount, userId);\r\n    console.log('Desafíos existentes encontrados:', existingChallenges);\r\n\r\n    let challenges;\r\n    if (existingChallenges && existingChallenges.length > 0) {\r\n      // Usar desafíos existentes\r\n      console.log('Usando desafíos existentes');\r\n      challenges = existingChallenges;\r\n    } else {\r\n      // Solo generar nuevos desafíos si no hay suficientes existentes\r\n      console.log('Generando nuevos desafíos');\r\n      // Generar nuevos desafíos\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n      const prompt = `Genera ${missionCount} misiones en ${cityName} que se puedan completar en ${duration} días. Devuelve un objeto JSON con la siguiente estructura exacta:\r\n{\r\n  \"misiones\": [\r\n    {\r\n      \"Título\": \"Título de la misión\",\r\n      \"Descripción\": \"Descripción detallada de la misión incluyendo qué foto tomar\",\r\n      \"Dificultad\": \"Fácil|Media|Difícil\",\r\n      \"Puntos\": 25|50|100\r\n    }\r\n  ]\r\n}\r\nLos puntos deben ser: 25 para Fácil, 50 para Media, 100 para Difícil. No incluyas explicaciones adicionales, solo el JSON.`;\r\n      \r\n      console.log('Prompt:', prompt);\r\n      const result = await model.generateContent(prompt);\r\n      const response = await result.response;\r\n      const missionsData = response.text();\r\n\r\n      console.log('Respuesta de la API:', missionsData);\r\n\r\n      const jsonMatch = missionsData.match(/\\{[\\s\\S]*\\}/);\r\n      if (!jsonMatch) {\r\n        throw new Error('No se encontró un objeto JSON válido en la respuesta');\r\n      }\r\n\r\n      const missions = JSON.parse(jsonMatch[0]);\r\n\r\n      if (!missions.misiones || !Array.isArray(missions.misiones)) {\r\n        throw new Error('La respuesta no contiene un array de misiones válido');\r\n      }\r\n\r\n      // Crear los desafíos\r\n      const formattedChallenges = missions.misiones.map((mission: any) => ({\r\n        title: mission.Título,\r\n        description: mission.Descripción,\r\n        cityId,\r\n        duration,\r\n        difficulty: mission.Dificultad,\r\n        points: mission.Puntos\r\n      }));\r\n\r\n      const { data: newChallenges, error: challengesError } = await supabase\r\n        .from('challenges')\r\n        .insert(formattedChallenges)\r\n        .select('id');\r\n\r\n      if (challengesError) throw challengesError;\r\n\r\n      challenges = newChallenges;\r\n    }\r\n\r\n    // Vincular los desafíos al journey\r\n    const journeyMissions = challenges.map((challenge: { id: string }) => ({\r\n      journeyId: journey.id,\r\n      challengeId: challenge.id,\r\n      completed: false,\r\n      created_at: new Date().toISOString(),\r\n      start_date: startIsoString,\r\n      end_date: endIsoString\r\n    }));\r\n\r\n    console.log('Vincular misiones al journey:', journeyMissions);\r\n\r\n    const { error: linkError } = await supabase\r\n      .from('journeys_missions')\r\n      .insert(journeyMissions);\r\n\r\n    if (linkError) {\r\n      console.error('Error vinculando misiones:', linkError);\r\n      throw linkError;\r\n    }\r\n\r\n    // Verificar que las misiones se hayan creado correctamente\r\n    const { data: createdMissions, error: verifyError } = await supabase\r\n      .from('journeys_missions')\r\n      .select(`\r\n        id,\r\n        challengeId,\r\n        completed,\r\n        challenge:challenges (\r\n        title,\r\n        description,\r\n        difficulty,\r\n          points\r\n        )\r\n      `)\r\n      .eq('journeyId', journey.id)\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (verifyError) {\r\n      console.error('Error verificando misiones creadas:', verifyError);\r\n      throw verifyError;\r\n    }\r\n\r\n    if (!createdMissions || createdMissions.length === 0) {\r\n      throw new Error('No se pudieron crear las misiones');\r\n    }\r\n\r\n    console.log('Misiones creadas verificadas:', createdMissions);\r\n\r\n    return {\r\n      journeyId: journey.id,\r\n      challenges: createdMissions\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generando misiones:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default generateMission;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
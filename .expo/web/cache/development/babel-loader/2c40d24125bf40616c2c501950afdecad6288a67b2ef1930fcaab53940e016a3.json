{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\TravelQuest\\\\src\\\\navigation\\\\AppNavigator.tsx\";\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useSelector } from 'react-redux';\nimport LoginScreen from \"../screens/auth/LoginScreen\";\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\nimport ResetPasswordScreen from \"../screens/auth/ResetPasswordScreen\";\nimport MapScreen from \"../screens/main/MapScreen\";\nimport MissionsScreen from \"../screens/main/MissionsScreen\";\nimport JournalScreen from \"../screens/main/JournalScreen\";\nimport ProfileScreen from \"../screens/main/ProfileScreen\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport EmailSentScreen from \"../screens/auth/EmailSentScreen\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\nconst MainTabs = () => {\n  return _jsxDEV(Tab.Navigator, {\n    screenOptions: ({\n      route\n    }) => ({\n      tabBarIcon: ({\n        focused,\n        color,\n        size\n      }) => {\n        let iconName = 'help-outline';\n        switch (route.name) {\n          case 'Map':\n            iconName = focused ? 'map' : 'map-outline';\n            break;\n          case 'Missions':\n            iconName = focused ? 'list' : 'list-outline';\n            break;\n          case 'Journal':\n            iconName = focused ? 'journal' : 'journal-outline';\n            break;\n          case 'Profile':\n            iconName = focused ? 'person' : 'person-outline';\n            break;\n        }\n        return _jsxDEV(Ionicons, {\n          name: iconName,\n          size: size,\n          color: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this);\n      },\n      tabBarActiveTintColor: '#4CAF50',\n      tabBarInactiveTintColor: 'gray'\n    }),\n    children: [_jsxDEV(Tab.Screen, {\n      name: \"Map\",\n      component: MapScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Missions\",\n      component: MissionsScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Journal\",\n      component: JournalScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), _jsxDEV(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\nconst AppNavigator = () => {\n  const {\n    user,\n    authState\n  } = useSelector(state => state.auth);\n  return _jsxDEV(NavigationContainer, {\n    children: _jsxDEV(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: authState === 'password_recovery' ? _jsxDEV(Stack.Screen, {\n        name: \"ResetPassword\",\n        component: ResetPasswordScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this) : !user ? _jsxDEV(_Fragment, {\n        children: [_jsxDEV(Stack.Screen, {\n          name: \"Login\",\n          component: LoginScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), _jsxDEV(Stack.Screen, {\n          name: \"Register\",\n          component: RegisterScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), _jsxDEV(Stack.Screen, {\n          name: \"EmailSent\",\n          component: EmailSentScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : _jsxDEV(Stack.Screen, {\n        name: \"Main\",\n        component: MainTabs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","NavigationContainer","createNativeStackNavigator","useSelector","LoginScreen","RegisterScreen","ResetPasswordScreen","MapScreen","MissionsScreen","JournalScreen","ProfileScreen","createBottomTabNavigator","Ionicons","EmailSentScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","Stack","Tab","MainTabs","Navigator","screenOptions","route","tabBarIcon","focused","color","size","iconName","name","fileName","_jsxFileName","lineNumber","columnNumber","tabBarActiveTintColor","tabBarInactiveTintColor","children","Screen","component","AppNavigator","user","authState","state","auth","headerShown"],"sources":["C:/Users/PC/TravelQuest/src/navigation/AppNavigator.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../features/store';\r\nimport LoginScreen from '../screens/auth/LoginScreen';\r\nimport RegisterScreen from '../screens/auth/RegisterScreen';\r\nimport ResetPasswordScreen from '../screens/auth/ResetPasswordScreen';\r\nimport MapScreen from '../screens/main/MapScreen';\r\nimport MissionsScreen from '../screens/main/MissionsScreen';\r\nimport JournalScreen from '../screens/main/JournalScreen';\r\nimport ProfileScreen from '../screens/main/ProfileScreen';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport EmailSentScreen from '../screens/auth/EmailSentScreen';\r\n\r\n// Definir los tipos para la navegaci√≥n\r\ntype RootStackParamList = {\r\n  Login: undefined;\r\n  Register: undefined;\r\n  ResetPassword: undefined;\r\n  Main: undefined;\r\n  EmailSent: undefined;\r\n};\r\n\r\ntype TabParamList = {\r\n  Map: undefined;\r\n  Missions: undefined;\r\n  Journal: undefined;\r\n  Profile: undefined;\r\n};\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\nconst Tab = createBottomTabNavigator<TabParamList>();\r\n\r\nconst MainTabs = () => {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName: keyof typeof Ionicons.glyphMap = 'help-outline';\r\n\r\n          switch (route.name) {\r\n            case 'Map':\r\n              iconName = focused ? 'map' : 'map-outline';\r\n              break;\r\n            case 'Missions':\r\n              iconName = focused ? 'list' : 'list-outline';\r\n              break;\r\n            case 'Journal':\r\n              iconName = focused ? 'journal' : 'journal-outline';\r\n              break;\r\n            case 'Profile':\r\n              iconName = focused ? 'person' : 'person-outline';\r\n              break;\r\n          }\r\n\r\n          return <Ionicons name={iconName} size={size} color={color} />;\r\n        },\r\n        tabBarActiveTintColor: '#4CAF50',\r\n        tabBarInactiveTintColor: 'gray',\r\n      })}\r\n    >\r\n      <Tab.Screen name=\"Map\" component={MapScreen} />\r\n      <Tab.Screen name=\"Missions\" component={MissionsScreen} />\r\n      <Tab.Screen name=\"Journal\" component={JournalScreen} />\r\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nconst AppNavigator = () => {\r\n  const { user, authState } = useSelector((state: RootState) => state.auth);\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        {authState === 'password_recovery' ? (\r\n          <Stack.Screen\r\n            name=\"ResetPassword\"\r\n            component={ResetPasswordScreen}\r\n          />\r\n        ) : !user ? (\r\n          <>\r\n            <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n            <Stack.Screen name=\"Register\" component={RegisterScreen} />\r\n            <Stack.Screen name=\"EmailSent\" component={EmailSentScreen} />\r\n          </>\r\n        ) : (\r\n          <Stack.Screen name=\"Main\" component={MainTabs} />\r\n        )}\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default AppNavigator; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import PushNotification from 'react-native-push-notification';\nimport { supabase } from './supabase';\nimport { useSelector } from 'react-redux';\nPushNotification.createChannel({\n  channelId: \"default\",\n  channelName: \"Default channel\",\n  channelDescription: \"A default channel for notifications\",\n  soundName: \"default\",\n  importance: 4,\n  vibrate: true\n}, created => console.log(`createChannel returned '${created}'`));\nPushNotification.configure({\n  onRegister: function (token) {\n    console.log(\"TOKEN:\", token);\n  },\n  onNotification: function (notification) {\n    console.log(\"NOTIFICATION:\", notification);\n  },\n  permissions: {\n    alert: true,\n    badge: true,\n    sound: true\n  },\n  popInitialNotification: true,\n  requestPermissions: true\n});\nexport const setupNotifications = async () => {\n  PushNotification.requestPermissions();\n};\nexport const scheduleMissionExpirationNotification = async (missionId, expirationDate) => {\n  const eightHoursBefore = new Date(expirationDate.getTime() - 8 * 60 * 60 * 1000);\n  if (eightHoursBefore > new Date()) {\n    PushNotification.localNotificationSchedule({\n      channelId: \"default\",\n      title: \"¡Misión por expirar!\",\n      message: \"Tienes una misión que expirará en 8 horas\",\n      date: eightHoursBefore,\n      allowWhileIdle: true,\n      data: {\n        missionId\n      }\n    });\n  }\n};\nexport const checkFriendshipRequests = async () => {\n  const {\n    user\n  } = useSelector(state => state.auth);\n  if (!user?.id) return;\n  const {\n    data,\n    error\n  } = await supabase.from('friendship_invitations').select('id, senderId, created_at').eq('receiverId', user.id).eq('status', 'Pending').order('created_at', {\n    ascending: false\n  }).limit(1);\n  if (error) {\n    console.error('Error al verificar solicitudes:', error);\n    return;\n  }\n  if (data && data.length > 0) {\n    const lastRequest = data[0];\n    const {\n      data: sender\n    } = await supabase.from('users').select('username').eq('id', lastRequest.senderId).single();\n    if (sender) {\n      PushNotification.localNotification({\n        channelId: \"default\",\n        title: \"Nueva solicitud de amistad\",\n        message: `${sender.username} te ha enviado una solicitud de amistad`,\n        data: {\n          requestId: lastRequest.id\n        }\n      });\n    }\n  }\n};\nexport const checkSharedJourneys = async () => {\n  const {\n    user\n  } = useSelector(state => state.auth);\n  if (!user?.id) return;\n  const {\n    data,\n    error\n  } = await supabase.from('journeys').select('id, name, created_at, creatorId').eq('sharedWith', user.id).order('created_at', {\n    ascending: false\n  }).limit(1);\n  if (error) {\n    console.error('Error al verificar viajes compartidos:', error);\n    return;\n  }\n  if (data && data.length > 0) {\n    const lastJourney = data[0];\n    const {\n      data: creator\n    } = await supabase.from('users').select('username').eq('id', lastJourney.creatorId).single();\n    if (creator) {\n      PushNotification.localNotification({\n        channelId: \"default\",\n        title: \"Nuevo viaje compartido\",\n        message: `${creator.username} ha compartido un viaje contigo: ${lastJourney.name}`,\n        data: {\n          journeyId: lastJourney.id\n        }\n      });\n    }\n  }\n};\nexport const setupNotificationListeners = () => {};","map":{"version":3,"names":["PushNotification","supabase","useSelector","createChannel","channelId","channelName","channelDescription","soundName","importance","vibrate","created","console","log","configure","onRegister","token","onNotification","notification","permissions","alert","badge","sound","popInitialNotification","requestPermissions","setupNotifications","scheduleMissionExpirationNotification","missionId","expirationDate","eightHoursBefore","Date","getTime","localNotificationSchedule","title","message","date","allowWhileIdle","data","checkFriendshipRequests","user","state","auth","id","error","from","select","eq","order","ascending","limit","length","lastRequest","sender","senderId","single","localNotification","username","requestId","checkSharedJourneys","lastJourney","creator","creatorId","name","journeyId","setupNotificationListeners"],"sources":["C:/Users/PC/TravelQuest/src/services/notifications.ts"],"sourcesContent":["import PushNotification, { PushNotificationObject } from 'react-native-push-notification';\r\nimport { Platform } from 'react-native';\r\nimport { supabase } from './supabase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../features/store';\r\n\r\n// Configurar el canal de notificaciones para Android\r\nPushNotification.createChannel(\r\n    {\r\n        channelId: \"default\",\r\n        channelName: \"Default channel\",\r\n        channelDescription: \"A default channel for notifications\",\r\n        soundName: \"default\",\r\n        importance: 4,\r\n        vibrate: true,\r\n    },\r\n    (created: boolean) => console.log(`createChannel returned '${created}'`)\r\n);\r\n\r\n// Configurar el comportamiento de las notificaciones\r\nPushNotification.configure({\r\n    onRegister: function (token: { os: string; token: string }) {\r\n        console.log(\"TOKEN:\", token);\r\n    },\r\n    onNotification: function (notification: PushNotificationObject) {\r\n        console.log(\"NOTIFICATION:\", notification);\r\n    },\r\n    permissions: {\r\n        alert: true,\r\n        badge: true,\r\n        sound: true,\r\n    },\r\n    popInitialNotification: true,\r\n    requestPermissions: true,\r\n});\r\n\r\nexport const setupNotifications = async () => {\r\n    PushNotification.requestPermissions();\r\n};\r\n\r\nexport const scheduleMissionExpirationNotification = async (missionId: string, expirationDate: Date) => {\r\n    const eightHoursBefore = new Date(expirationDate.getTime() - 8 * 60 * 60 * 1000);\r\n\r\n    if (eightHoursBefore > new Date()) {\r\n        PushNotification.localNotificationSchedule({\r\n            channelId: \"default\",\r\n            title: \"¡Misión por expirar!\",\r\n            message: \"Tienes una misión que expirará en 8 horas\",\r\n            date: eightHoursBefore,\r\n            allowWhileIdle: true,\r\n            data: { missionId },\r\n        });\r\n    }\r\n};\r\n\r\nexport const checkFriendshipRequests = async () => {\r\n    const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n    if (!user?.id) return;\r\n\r\n    const { data, error } = await supabase\r\n        .from('friendship_invitations')\r\n        .select('id, senderId, created_at')\r\n        .eq('receiverId', user.id)\r\n        .eq('status', 'Pending')\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n    if (error) {\r\n        console.error('Error al verificar solicitudes:', error);\r\n        return;\r\n    }\r\n\r\n    if (data && data.length > 0) {\r\n        const lastRequest = data[0];\r\n        const { data: sender } = await supabase\r\n            .from('users')\r\n            .select('username')\r\n            .eq('id', lastRequest.senderId)\r\n            .single();\r\n\r\n        if (sender) {\r\n            PushNotification.localNotification({\r\n                channelId: \"default\",\r\n                title: \"Nueva solicitud de amistad\",\r\n                message: `${sender.username} te ha enviado una solicitud de amistad`,\r\n                data: { requestId: lastRequest.id },\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const checkSharedJourneys = async () => {\r\n    const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n    if (!user?.id) return;\r\n\r\n    const { data, error } = await supabase\r\n        .from('journeys')\r\n        .select('id, name, created_at, creatorId')\r\n        .eq('sharedWith', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n    if (error) {\r\n        console.error('Error al verificar viajes compartidos:', error);\r\n        return;\r\n    }\r\n\r\n    if (data && data.length > 0) {\r\n        const lastJourney = data[0];\r\n        const { data: creator } = await supabase\r\n            .from('users')\r\n            .select('username')\r\n            .eq('id', lastJourney.creatorId)\r\n            .single();\r\n\r\n        if (creator) {\r\n            PushNotification.localNotification({\r\n                channelId: \"default\",\r\n                title: \"Nuevo viaje compartido\",\r\n                message: `${creator.username} ha compartido un viaje contigo: ${lastJourney.name}`,\r\n                data: { journeyId: lastJourney.id },\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const setupNotificationListeners = () => {\r\n    // Los listeners se configuran automáticamente en PushNotification.configure\r\n}; "],"mappings":"AAAA,OAAOA,gBAAgB,MAAkC,gCAAgC;AAEzF,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,WAAW,QAAQ,aAAa;AAIzCF,gBAAgB,CAACG,aAAa,CAC1B;EACIC,SAAS,EAAE,SAAS;EACpBC,WAAW,EAAE,iBAAiB;EAC9BC,kBAAkB,EAAE,qCAAqC;EACzDC,SAAS,EAAE,SAAS;EACpBC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE;AACb,CAAC,EACAC,OAAgB,IAAKC,OAAO,CAACC,GAAG,CAAC,2BAA2BF,OAAO,GAAG,CAC3E,CAAC;AAGDV,gBAAgB,CAACa,SAAS,CAAC;EACvBC,UAAU,EAAE,SAAAA,CAAUC,KAAoC,EAAE;IACxDJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEG,KAAK,CAAC;EAChC,CAAC;EACDC,cAAc,EAAE,SAAAA,CAAUC,YAAoC,EAAE;IAC5DN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,YAAY,CAAC;EAC9C,CAAC;EACDC,WAAW,EAAE;IACTC,KAAK,EAAE,IAAI;IACXC,KAAK,EAAE,IAAI;IACXC,KAAK,EAAE;EACX,CAAC;EACDC,sBAAsB,EAAE,IAAI;EAC5BC,kBAAkB,EAAE;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1CxB,gBAAgB,CAACuB,kBAAkB,CAAC,CAAC;AACzC,CAAC;AAED,OAAO,MAAME,qCAAqC,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,cAAoB,KAAK;EACpG,MAAMC,gBAAgB,GAAG,IAAIC,IAAI,CAACF,cAAc,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EAEhF,IAAIF,gBAAgB,GAAG,IAAIC,IAAI,CAAC,CAAC,EAAE;IAC/B7B,gBAAgB,CAAC+B,yBAAyB,CAAC;MACvC3B,SAAS,EAAE,SAAS;MACpB4B,KAAK,EAAE,sBAAsB;MAC7BC,OAAO,EAAE,2CAA2C;MACpDC,IAAI,EAAEN,gBAAgB;MACtBO,cAAc,EAAE,IAAI;MACpBC,IAAI,EAAE;QAAEV;MAAU;IACtB,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAMW,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC/C,MAAM;IAAEC;EAAK,CAAC,GAAGpC,WAAW,CAAEqC,KAAgB,IAAKA,KAAK,CAACC,IAAI,CAAC;EAE9D,IAAI,CAACF,IAAI,EAAEG,EAAE,EAAE;EAEf,MAAM;IAAEL,IAAI;IAAEM;EAAM,CAAC,GAAG,MAAMzC,QAAQ,CACjC0C,IAAI,CAAC,wBAAwB,CAAC,CAC9BC,MAAM,CAAC,0BAA0B,CAAC,CAClCC,EAAE,CAAC,YAAY,EAAEP,IAAI,CAACG,EAAE,CAAC,CACzBI,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,CACvBC,KAAK,CAAC,YAAY,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC,CACzCC,KAAK,CAAC,CAAC,CAAC;EAEb,IAAIN,KAAK,EAAE;IACP/B,OAAO,CAAC+B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD;EACJ;EAEA,IAAIN,IAAI,IAAIA,IAAI,CAACa,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMC,WAAW,GAAGd,IAAI,CAAC,CAAC,CAAC;IAC3B,MAAM;MAAEA,IAAI,EAAEe;IAAO,CAAC,GAAG,MAAMlD,QAAQ,CAClC0C,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,IAAI,EAAEK,WAAW,CAACE,QAAQ,CAAC,CAC9BC,MAAM,CAAC,CAAC;IAEb,IAAIF,MAAM,EAAE;MACRnD,gBAAgB,CAACsD,iBAAiB,CAAC;QAC/BlD,SAAS,EAAE,SAAS;QACpB4B,KAAK,EAAE,4BAA4B;QACnCC,OAAO,EAAE,GAAGkB,MAAM,CAACI,QAAQ,yCAAyC;QACpEnB,IAAI,EAAE;UAAEoB,SAAS,EAAEN,WAAW,CAACT;QAAG;MACtC,CAAC,CAAC;IACN;EACJ;AACJ,CAAC;AAED,OAAO,MAAMgB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAM;IAAEnB;EAAK,CAAC,GAAGpC,WAAW,CAAEqC,KAAgB,IAAKA,KAAK,CAACC,IAAI,CAAC;EAE9D,IAAI,CAACF,IAAI,EAAEG,EAAE,EAAE;EAEf,MAAM;IAAEL,IAAI;IAAEM;EAAM,CAAC,GAAG,MAAMzC,QAAQ,CACjC0C,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,iCAAiC,CAAC,CACzCC,EAAE,CAAC,YAAY,EAAEP,IAAI,CAACG,EAAE,CAAC,CACzBK,KAAK,CAAC,YAAY,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC,CACzCC,KAAK,CAAC,CAAC,CAAC;EAEb,IAAIN,KAAK,EAAE;IACP/B,OAAO,CAAC+B,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D;EACJ;EAEA,IAAIN,IAAI,IAAIA,IAAI,CAACa,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMS,WAAW,GAAGtB,IAAI,CAAC,CAAC,CAAC;IAC3B,MAAM;MAAEA,IAAI,EAAEuB;IAAQ,CAAC,GAAG,MAAM1D,QAAQ,CACnC0C,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,IAAI,EAAEa,WAAW,CAACE,SAAS,CAAC,CAC/BP,MAAM,CAAC,CAAC;IAEb,IAAIM,OAAO,EAAE;MACT3D,gBAAgB,CAACsD,iBAAiB,CAAC;QAC/BlD,SAAS,EAAE,SAAS;QACpB4B,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE,GAAG0B,OAAO,CAACJ,QAAQ,oCAAoCG,WAAW,CAACG,IAAI,EAAE;QAClFzB,IAAI,EAAE;UAAE0B,SAAS,EAAEJ,WAAW,CAACjB;QAAG;MACtC,CAAC,CAAC;IACN;EACJ;AACJ,CAAC;AAED,OAAO,MAAMsB,0BAA0B,GAAGA,CAAA,KAAM,CAEhD,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
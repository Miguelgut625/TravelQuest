{"ast":null,"code":"import { supabase } from './supabase';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NotificationService from './NotificationService';\nexport const shareJourney = async (journeyId, ownerId, friend) => {\n  if (!journeyId) {\n    Alert.alert('Error', 'No se pudo compartir el journey porque no se encontró el ID del viaje.');\n    return false;\n  }\n  try {\n    const {\n      data: journeyData,\n      error: journeyError\n    } = await supabase.from('journeys').select('description').eq('id', journeyId).single();\n    if (journeyError) throw journeyError;\n    const {\n      data: userData,\n      error: userError\n    } = await supabase.from('users').select('username').eq('id', ownerId).single();\n    if (userError) throw userError;\n    const {\n      error\n    } = await supabase.from('journeys_shared').insert({\n      journeyId,\n      ownerId,\n      sharedWithUserId: friend.user2Id\n    });\n    if (error) throw error;\n    const notificationService = NotificationService.getInstance();\n    await notificationService.notifyJourneyShared(friend.user2Id, journeyData.description, userData.username);\n    Alert.alert('Éxito', `Journey compartido con ${friend.username}`);\n    return true;\n  } catch (err) {\n    console.error(err);\n    Alert.alert('Error', 'No se pudo compartir el journey');\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","Alert","NotificationService","shareJourney","journeyId","ownerId","friend","alert","data","journeyData","error","journeyError","from","select","eq","single","userData","userError","insert","sharedWithUserId","user2Id","notificationService","getInstance","notifyJourneyShared","description","username","err","console"],"sources":["C:/Users/PC/TravelQuest/src/services/shareService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { Alert } from 'react-native';\nimport NotificationService from './NotificationService';\n\ninterface Friend {\n    user2Id: string;\n    username: string;\n    points: number;\n}\n\nexport const shareJourney = async (\n    journeyId: string,\n    ownerId: string,\n    friend: Friend\n): Promise<boolean> => {\n    if (!journeyId) {\n        Alert.alert('Error', 'No se pudo compartir el journey porque no se encontró el ID del viaje.');\n        return false;\n    }\n\n    try {\n        // Obtener el nombre del viaje\n        const { data: journeyData, error: journeyError } = await supabase\n            .from('journeys')\n            .select('description')\n            .eq('id', journeyId)\n            .single();\n\n        if (journeyError) throw journeyError;\n\n        // Obtener el nombre del usuario que comparte\n        const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('username')\n            .eq('id', ownerId)\n            .single();\n\n        if (userError) throw userError;\n\n        // Compartir el viaje\n        const { error } = await supabase\n            .from('journeys_shared')\n            .insert({\n                journeyId,\n                ownerId,\n                sharedWithUserId: friend.user2Id\n            });\n\n        if (error) throw error;\n\n        // Enviar notificación al amigo\n        const notificationService = NotificationService.getInstance();\n        await notificationService.notifyJourneyShared(\n            friend.user2Id,\n            journeyData.description,\n            userData.username\n        );\n\n        Alert.alert('Éxito', `Journey compartido con ${friend.username}`);\n        return true;\n    } catch (err) {\n        console.error(err);\n        Alert.alert('Error', 'No se pudo compartir el journey');\n        return false;\n    }\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAAC,OAAAC,KAAA;AAEtC,OAAOC,mBAAmB,MAAM,uBAAuB;AAQvD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CACxBC,SAAiB,EACjBC,OAAe,EACfC,MAAc,KACK;EACnB,IAAI,CAACF,SAAS,EAAE;IACZH,KAAK,CAACM,KAAK,CAAC,OAAO,EAAE,wEAAwE,CAAC;IAC9F,OAAO,KAAK;EAChB;EAEA,IAAI;IAEA,MAAM;MAAEC,IAAI,EAAEC,WAAW;MAAEC,KAAK,EAAEC;IAAa,CAAC,GAAG,MAAMX,QAAQ,CAC5DY,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,aAAa,CAAC,CACrBC,EAAE,CAAC,IAAI,EAAEV,SAAS,CAAC,CACnBW,MAAM,CAAC,CAAC;IAEb,IAAIJ,YAAY,EAAE,MAAMA,YAAY;IAGpC,MAAM;MAAEH,IAAI,EAAEQ,QAAQ;MAAEN,KAAK,EAAEO;IAAU,CAAC,GAAG,MAAMjB,QAAQ,CACtDY,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,IAAI,EAAET,OAAO,CAAC,CACjBU,MAAM,CAAC,CAAC;IAEb,IAAIE,SAAS,EAAE,MAAMA,SAAS;IAG9B,MAAM;MAAEP;IAAM,CAAC,GAAG,MAAMV,QAAQ,CAC3BY,IAAI,CAAC,iBAAiB,CAAC,CACvBM,MAAM,CAAC;MACJd,SAAS;MACTC,OAAO;MACPc,gBAAgB,EAAEb,MAAM,CAACc;IAC7B,CAAC,CAAC;IAEN,IAAIV,KAAK,EAAE,MAAMA,KAAK;IAGtB,MAAMW,mBAAmB,GAAGnB,mBAAmB,CAACoB,WAAW,CAAC,CAAC;IAC7D,MAAMD,mBAAmB,CAACE,mBAAmB,CACzCjB,MAAM,CAACc,OAAO,EACdX,WAAW,CAACe,WAAW,EACvBR,QAAQ,CAACS,QACb,CAAC;IAEDxB,KAAK,CAACM,KAAK,CAAC,OAAO,EAAE,0BAA0BD,MAAM,CAACmB,QAAQ,EAAE,CAAC;IACjE,OAAO,IAAI;EACf,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACjB,KAAK,CAACgB,GAAG,CAAC;IAClBzB,KAAK,CAACM,KAAK,CAAC,OAAO,EAAE,iCAAiC,CAAC;IACvD,OAAO,KAAK;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\TravelQuest\\\\src\\\\screens\\\\auth\\\\ResetPasswordScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { supabase } from \"../../services/supabase\";\nimport { useDispatch } from 'react-redux';\nimport { setToken, setAuthState } from \"../../features/authSlice\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useRoute } from '@react-navigation/native';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ResetPasswordScreen = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const navigation = useNavigation();\n  const route = useRoute();\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        console.log('Verificando sesión en ResetPasswordScreen...');\n        const url = await Linking.getInitialURL();\n        console.log('URL actual:', url);\n        if (url?.includes('type=recovery')) {\n          console.log('Enlace de recuperación detectado');\n          const accessToken = url.split('access_token=')[1]?.split('&')[0];\n          const refreshToken = url.split('refresh_token=')[1]?.split('&')[0];\n          console.log('Access Token presente:', !!accessToken);\n          console.log('Refresh Token presente:', !!refreshToken);\n          if (!accessToken) {\n            console.error('No se encontró el access token en la URL');\n            Alert.alert('Error', 'El enlace de recuperación no es válido');\n            return;\n          }\n          const {\n            data: {\n              user\n            },\n            error: userError\n          } = await supabase.auth.getUser(accessToken);\n          if (userError) {\n            console.error('Error al verificar usuario:', userError.message);\n            Alert.alert('Error', 'El token de recuperación no es válido');\n            return;\n          }\n          console.log('Usuario verificado:', user?.email);\n          try {\n            const {\n              data,\n              error\n            } = await supabase.auth.setSession({\n              access_token: accessToken,\n              refresh_token: refreshToken\n            });\n            if (error) {\n              console.error('Error al establecer sesión:', error.message);\n              Alert.alert('Error', 'No se pudo establecer la sesión');\n              return;\n            }\n            console.log('Sesión establecida correctamente');\n            if (data.session) {\n              dispatch(setToken(data.session.access_token));\n              dispatch(setAuthState('authenticated'));\n              console.log('Estado de autenticación actualizado');\n            }\n          } catch (sessionError) {\n            console.error('Error al establecer la sesión:', sessionError);\n            Alert.alert('Error', 'No se pudo establecer la sesión');\n            return;\n          }\n        } else {\n          const {\n            data: {\n              session\n            },\n            error\n          } = await supabase.auth.getSession();\n          if (error) {\n            console.error('Error al verificar sesión existente:', error);\n            Alert.alert('Error', 'No se pudo verificar la sesión');\n            return;\n          }\n          if (!session) {\n            console.log('No hay sesión activa ni enlace de recuperación');\n            Alert.alert('Error', 'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.', [{\n              text: 'OK',\n              onPress: () => navigation.replace('Login')\n            }]);\n          }\n        }\n      } catch (error) {\n        console.error('Error general en checkSession:', error);\n        Alert.alert('Error', 'Ocurrió un error al verificar la sesión');\n      }\n    };\n    checkSession();\n  }, []);\n  const handleResetPassword = async () => {\n    console.log('handleResetPassword llamado');\n    console.log('Nueva contraseña:', newPassword);\n    console.log('Confirmar contraseña:', confirmPassword);\n    if (!newPassword || !confirmPassword) {\n      console.log('Error: Campos vacíos');\n      Alert.alert('Error', 'Por favor, completa todos los campos');\n      return;\n    }\n    if (newPassword.length < 6) {\n      console.log('Error: Contraseña demasiado corta');\n      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      console.log('Error: Las contraseñas no coinciden');\n      Alert.alert('Error', 'Las contraseñas no coinciden');\n      return;\n    }\n    setLoading(true);\n    console.log('Iniciando actualización de contraseña...');\n    try {\n      const {\n        error: updateError\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (updateError) {\n        console.error('Error al actualizar contraseña:', updateError);\n        Alert.alert('Error', updateError.message);\n        return;\n      }\n      console.log('Contraseña actualizada exitosamente');\n      Alert.alert('Éxito', 'Contraseña actualizada correctamente', [{\n        text: 'OK',\n        onPress: () => {\n          console.log('Navegando a la pantalla principal...');\n          navigation.replace('Main');\n        }\n      }]);\n    } catch (error) {\n      console.error('Error en handleResetPassword:', error);\n      Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCancel = () => {\n    console.log('Cancelando recuperación de contraseña...');\n    dispatch(setAuthState('unauthenticated'));\n    navigation.replace('Login');\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Recuperar Contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      style: styles.subtitle,\n      children: \"Por favor, ingresa tu nueva contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Nueva contrase\\xF1a\",\n      value: newPassword,\n      onChangeText: setNewPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirmar contrase\\xF1a\",\n      value: confirmPassword,\n      onChangeText: setConfirmPassword,\n      secureTextEntry: true,\n      autoCapitalize: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: [styles.button, loading && styles.buttonDisabled],\n      onPress: handleResetPassword,\n      disabled: loading,\n      children: loading ? _jsxDEV(ActivityIndicator, {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this) : _jsxDEV(Text, {\n        style: styles.buttonText,\n        children: \"Actualizar Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: styles.cancelButton,\n      onPress: handleCancel,\n      children: _jsxDEV(Text, {\n        style: styles.cancelButtonText,\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    textAlign: 'center',\n    color: '#333'\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    padding: 15,\n    borderRadius: 10,\n    marginBottom: 15,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 10\n  },\n  buttonDisabled: {\n    backgroundColor: '#cccccc'\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  cancelButton: {\n    marginTop: 20,\n    alignItems: 'center'\n  },\n  cancelButtonText: {\n    color: '#666',\n    fontSize: 16\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","ActivityIndicator","supabase","useDispatch","setToken","setAuthState","useNavigation","useRoute","Linking","jsxDEV","_jsxDEV","ResetPasswordScreen","newPassword","setNewPassword","confirmPassword","setConfirmPassword","loading","setLoading","dispatch","navigation","route","checkSession","console","log","url","getInitialURL","includes","accessToken","split","refreshToken","error","alert","data","user","userError","auth","getUser","message","email","setSession","access_token","refresh_token","session","sessionError","getSession","text","onPress","replace","handleResetPassword","length","updateError","updateUser","password","handleCancel","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","subtitle","input","placeholder","value","onChangeText","secureTextEntry","autoCapitalize","button","buttonDisabled","disabled","color","buttonText","cancelButton","cancelButtonText","create","flex","padding","justifyContent","backgroundColor","fontSize","fontWeight","marginBottom","textAlign","borderRadius","borderWidth","borderColor","alignItems","marginTop"],"sources":["C:/Users/PC/TravelQuest/src/screens/auth/ResetPasswordScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Alert,\r\n  ActivityIndicator,\r\n} from 'react-native';\r\nimport { supabase } from '../../services/supabase';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser, setToken, setAuthState } from '../../features/authSlice';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { RootStackParamList } from '../../navigation/types';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport { Linking } from 'react-native';\r\n\r\ntype ResetPasswordScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'ResetPassword'>;\r\n\r\nexport const ResetPasswordScreen = () => {\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const navigation = useNavigation<ResetPasswordScreenNavigationProp>();\r\n  const route = useRoute();\r\n\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      try {\r\n        console.log('Verificando sesión en ResetPasswordScreen...');\r\n\r\n        // Obtener la URL actual\r\n        const url = await Linking.getInitialURL();\r\n        console.log('URL actual:', url);\r\n\r\n        if (url?.includes('type=recovery')) {\r\n          console.log('Enlace de recuperación detectado');\r\n\r\n          // Extraer tokens y verificar su presencia\r\n          const accessToken = url.split('access_token=')[1]?.split('&')[0];\r\n          const refreshToken = url.split('refresh_token=')[1]?.split('&')[0];\r\n\r\n          console.log('Access Token presente:', !!accessToken);\r\n          console.log('Refresh Token presente:', !!refreshToken);\r\n\r\n          if (!accessToken) {\r\n            console.error('No se encontró el access token en la URL');\r\n            Alert.alert('Error', 'El enlace de recuperación no es válido');\r\n            return;\r\n          }\r\n\r\n          // Intentar verificar el usuario primero\r\n          const { data: { user }, error: userError } = await supabase.auth.getUser(accessToken);\r\n\r\n          if (userError) {\r\n            console.error('Error al verificar usuario:', userError.message);\r\n            Alert.alert('Error', 'El token de recuperación no es válido');\r\n            return;\r\n          }\r\n\r\n          console.log('Usuario verificado:', user?.email);\r\n\r\n          // Si el usuario es válido, intentar establecer la sesión\r\n          try {\r\n            const { data, error } = await supabase.auth.setSession({\r\n              access_token: accessToken,\r\n              refresh_token: refreshToken\r\n            });\r\n\r\n            if (error) {\r\n              console.error('Error al establecer sesión:', error.message);\r\n              Alert.alert('Error', 'No se pudo establecer la sesión');\r\n              return;\r\n            }\r\n\r\n            console.log('Sesión establecida correctamente');\r\n\r\n            // Actualizar el estado global si es necesario\r\n            if (data.session) {\r\n              dispatch(setToken(data.session.access_token));\r\n              dispatch(setAuthState('authenticated'));\r\n              console.log('Estado de autenticación actualizado');\r\n            }\r\n\r\n          } catch (sessionError) {\r\n            console.error('Error al establecer la sesión:', sessionError);\r\n            Alert.alert('Error', 'No se pudo establecer la sesión');\r\n            return;\r\n          }\r\n        } else {\r\n          // Si no hay enlace de recuperación, verificar si hay una sesión activa\r\n          const { data: { session }, error } = await supabase.auth.getSession();\r\n\r\n          if (error) {\r\n            console.error('Error al verificar sesión existente:', error);\r\n            Alert.alert('Error', 'No se pudo verificar la sesión');\r\n            return;\r\n          }\r\n\r\n          if (!session) {\r\n            console.log('No hay sesión activa ni enlace de recuperación');\r\n            Alert.alert(\r\n              'Error',\r\n              'No hay una sesión activa de recuperación de contraseña. Por favor, solicita un nuevo enlace.',\r\n              [{ text: 'OK', onPress: () => navigation.replace('Login') }]\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error general en checkSession:', error);\r\n        Alert.alert('Error', 'Ocurrió un error al verificar la sesión');\r\n      }\r\n    };\r\n\r\n    checkSession();\r\n  }, []);\r\n\r\n  const handleResetPassword = async () => {\r\n    console.log('handleResetPassword llamado');\r\n    console.log('Nueva contraseña:', newPassword);\r\n    console.log('Confirmar contraseña:', confirmPassword);\r\n\r\n    if (!newPassword || !confirmPassword) {\r\n      console.log('Error: Campos vacíos');\r\n      Alert.alert('Error', 'Por favor, completa todos los campos');\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      console.log('Error: Contraseña demasiado corta');\r\n      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');\r\n      return;\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      console.log('Error: Las contraseñas no coinciden');\r\n      Alert.alert('Error', 'Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    console.log('Iniciando actualización de contraseña...');\r\n\r\n    try {\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        password: newPassword\r\n      });\r\n\r\n      if (updateError) {\r\n        console.error('Error al actualizar contraseña:', updateError);\r\n        Alert.alert('Error', updateError.message);\r\n        return;\r\n      }\r\n\r\n      console.log('Contraseña actualizada exitosamente');\r\n      Alert.alert(\r\n        'Éxito',\r\n        'Contraseña actualizada correctamente',\r\n        [\r\n          {\r\n            text: 'OK',\r\n            onPress: () => {\r\n              console.log('Navegando a la pantalla principal...');\r\n              navigation.replace('Main');\r\n            }\r\n          }\r\n        ]\r\n      );\r\n    } catch (error) {\r\n      console.error('Error en handleResetPassword:', error);\r\n      Alert.alert('Error', 'Ocurrió un error al actualizar la contraseña');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    console.log('Cancelando recuperación de contraseña...');\r\n    dispatch(setAuthState('unauthenticated'));\r\n    navigation.replace('Login');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Recuperar Contraseña</Text>\r\n      <Text style={styles.subtitle}>\r\n        Por favor, ingresa tu nueva contraseña\r\n      </Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Nueva contraseña\"\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Confirmar contraseña\"\r\n        value={confirmPassword}\r\n        onChangeText={setConfirmPassword}\r\n        secureTextEntry\r\n        autoCapitalize=\"none\"\r\n      />\r\n\r\n      <TouchableOpacity\r\n        style={[styles.button, loading && styles.buttonDisabled]}\r\n        onPress={handleResetPassword}\r\n        disabled={loading}\r\n      >\r\n        {loading ? (\r\n          <ActivityIndicator color=\"white\" />\r\n        ) : (\r\n          <Text style={styles.buttonText}>Actualizar Contraseña</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n\r\n      <TouchableOpacity\r\n        style={styles.cancelButton}\r\n        onPress={handleCancel}\r\n      >\r\n        <Text style={styles.cancelButtonText}>Cancelar</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n    color: '#333',\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    color: '#666',\r\n    marginBottom: 20,\r\n    textAlign: 'center',\r\n  },\r\n  input: {\r\n    backgroundColor: 'white',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    marginBottom: 15,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n  },\r\n  button: {\r\n    backgroundColor: '#4CAF50',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n  },\r\n  buttonDisabled: {\r\n    backgroundColor: '#cccccc',\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  cancelButton: {\r\n    marginTop: 20,\r\n    alignItems: 'center',\r\n  },\r\n  cancelButtonText: {\r\n    color: '#666',\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default ResetPasswordScreen;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nvar generateMission = function () {\n  var _ref = _asyncToGenerator(function* (city, duration) {\n    var response = yield fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer YOUR_OPENAI_API_KEY\"\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: \"Genera una misi\\xF3n en \" + city + \" que se pueda completar en \" + duration + \" d\\xEDas.\"\n        }]\n      })\n    });\n    var data = yield response.json();\n    var title = data.choices[0].message.content;\n    var description = \"Descripci\\xF3n de la misi\\xF3n en \" + city + \".\";\n    var difficulty = ['Fácil', 'Media', 'Difícil'][Math.floor(Math.random() * 3)];\n    var points = difficulty === 'Fácil' ? 25 : difficulty === 'Media' ? 50 : 100;\n    var _yield$supabase$from$ = yield supabase.from('missions').insert([{\n        title: title,\n        description: description,\n        city: city,\n        duration: duration,\n        difficulty: difficulty,\n        points: points,\n        completed: false\n      }]),\n      error = _yield$supabase$from$.error;\n    if (error) {\n      console.error('Error saving mission:', error);\n    } else {\n      console.log('Misión guardada exitosamente');\n    }\n  });\n  return function generateMission(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default generateMission;","map":{"version":3,"names":["supabase","generateMission","_ref","_asyncToGenerator","city","duration","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","title","choices","message","description","difficulty","Math","floor","random","points","_yield$supabase$from$","from","insert","completed","error","console","log","_x","_x2","apply","arguments"],"sources":["C:/Users/migue/TravelQuest/src/services/missionGenerator.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nconst generateMission = async (city: string, duration: number) => {\r\n  // Lógica para llamar a la API de ChatGPT y generar el título y la descripción\r\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer YOUR_OPENAI_API_KEY`, // Reemplaza con tu clave de API\r\n    },\r\n    body: JSON.stringify({\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: `Genera una misión en ${city} que se pueda completar en ${duration} días.`\r\n        }\r\n      ],\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  const title = data.choices[0].message.content; // Ajusta según la respuesta de la API\r\n  const description = `Descripción de la misión en ${city}.`; // Ajusta según la respuesta de la API\r\n\r\n  // Determinar la dificultad y los puntos\r\n  const difficulty = ['Fácil', 'Media', 'Difícil'][Math.floor(Math.random() * 3)];\r\n  const points = difficulty === 'Fácil' ? 25 : difficulty === 'Media' ? 50 : 100;\r\n\r\n  // Guardar la misión en Supabase\r\n  const { error } = await supabase\r\n    .from('missions')\r\n    .insert([\r\n      {\r\n        title,\r\n        description,\r\n        city,\r\n        duration,\r\n        difficulty,\r\n        points,\r\n        completed: false,\r\n      },\r\n    ]);\r\n\r\n  if (error) {\r\n    console.error('Error saving mission:', error);\r\n  } else {\r\n    console.log('Misión guardada exitosamente');\r\n  }\r\n};\r\n\r\nexport default generateMission;\r\n"],"mappings":";AAAA,SAASA,QAAQ;AAEjB,IAAMC,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAY,EAAEC,QAAgB,EAAK;IAEhE,IAAMC,QAAQ,SAASC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe;MACjB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,MAAM;UACZC,OAAO,+BAA0BZ,IAAI,mCAA8BC,QAAQ;QAC7E,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;IAEF,IAAMY,IAAI,SAASX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,IAAMC,KAAK,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO;IAC7C,IAAMM,WAAW,0CAAkClB,IAAI,MAAG;IAG1D,IAAMmB,UAAU,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/E,IAAMC,MAAM,GAAGJ,UAAU,KAAK,OAAO,GAAG,EAAE,GAAGA,UAAU,KAAK,OAAO,GAAG,EAAE,GAAG,GAAG;IAG9E,IAAAK,qBAAA,SAAwB5B,QAAQ,CAC7B6B,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,CACN;QACEX,KAAK,EAALA,KAAK;QACLG,WAAW,EAAXA,WAAW;QACXlB,IAAI,EAAJA,IAAI;QACJC,QAAQ,EAARA,QAAQ;QACRkB,UAAU,EAAVA,UAAU;QACVI,MAAM,EAANA,MAAM;QACNI,SAAS,EAAE;MACb,CAAC,CACF,CAAC;MAZIC,KAAK,GAAAJ,qBAAA,CAALI,KAAK;IAcb,IAAIA,KAAK,EAAE;MACTC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C;EACF,CAAC;EAAA,gBA/CKjC,eAAeA,CAAAkC,EAAA,EAAAC,GAAA;IAAA,OAAAlC,IAAA,CAAAmC,KAAA,OAAAC,SAAA;EAAA;AAAA,GA+CpB;AAED,eAAerC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
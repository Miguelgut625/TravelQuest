{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useSelector } from 'react-redux';\nimport { getRecentConversations } from \"../../services/messageService\";\nimport { supabase } from \"../../services/supabase\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ConversationsScreen = function ConversationsScreen() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    conversations = _useState2[0],\n    setConversations = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    refreshing = _useState6[0],\n    setRefreshing = _useState6[1];\n  var user = useSelector(function (state) {\n    return state.auth.user;\n  });\n  useEffect(function () {\n    checkUserAuth();\n  }, []);\n  var checkUserAuth = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!user) {\n        Alert.alert(\"No autenticado\", \"Por favor inicia sesión para acceder a los mensajes\", [{\n          text: \"OK\",\n          onPress: function onPress() {\n            return navigation.reset({\n              index: 0,\n              routes: [{\n                name: 'Login'\n              }]\n            });\n          }\n        }]);\n        return;\n      }\n      var _yield$supabase$auth$ = yield supabase.auth.getUser(),\n        data = _yield$supabase$auth$.data,\n        error = _yield$supabase$auth$.error;\n      if (error) {\n        console.error('Error obteniendo información del usuario:', error);\n        return;\n      }\n      if (data && data.user && !data.user.email_confirmed_at) {\n        Alert.alert(\"Correo no verificado\", \"Por favor verifica tu correo electrónico para acceder a los mensajes. Revisa tu bandeja de entrada.\", [{\n          text: \"OK\",\n          onPress: function onPress() {\n            var _data$user;\n            return navigation.navigate('VerifyEmail', {\n              email: (_data$user = data.user) == null ? void 0 : _data$user.email\n            });\n          }\n        }]);\n        return;\n      }\n      fetchConversations();\n    });\n    return function checkUserAuth() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var fetchConversations = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!user) {\n        setLoading(false);\n        setRefreshing(false);\n        return;\n      }\n      try {\n        var conversationsData = yield getRecentConversations(user.id);\n        setConversations(conversationsData);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n      } finally {\n        setLoading(false);\n        setRefreshing(false);\n      }\n    });\n    return function fetchConversations() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (user) {\n      fetchConversations();\n    }\n  }, [user]);\n  var handleRefresh = function handleRefresh() {\n    setRefreshing(true);\n    fetchConversations();\n  };\n  var openChat = function openChat(friendId, friendName) {\n    navigation.navigate('Chat', {\n      friendId: friendId,\n      friendName: friendName\n    });\n  };\n  if (loading) {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      })\n    });\n  }\n  var renderConversationItem = function renderConversationItem(_ref3) {\n    var item = _ref3.item;\n    var messageDate = new Date(item.created_at);\n    var now = new Date();\n    var formattedDate = messageDate.toDateString() === now.toDateString() ? messageDate.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    }) : messageDate.toLocaleDateString();\n    var avatarLetter = item.username && item.username.length > 0 ? item.username.charAt(0).toUpperCase() : '?';\n    return _jsxs(TouchableOpacity, {\n      style: styles.conversationItem,\n      onPress: function onPress() {\n        return openChat(item.conversation_user_id, item.username || 'Usuario');\n      },\n      children: [_jsx(View, {\n        style: styles.avatar,\n        children: _jsx(Text, {\n          style: styles.avatarText,\n          children: avatarLetter\n        })\n      }), _jsxs(View, {\n        style: styles.messageInfo,\n        children: [_jsxs(View, {\n          style: styles.headerRow,\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: item.username || 'Usuario'\n          }), _jsx(Text, {\n            style: styles.timestamp,\n            children: formattedDate\n          })]\n        }), _jsxs(View, {\n          style: styles.messageRow,\n          children: [_jsx(Text, {\n            style: [styles.lastMessage, item.unread_count > 0 ? styles.unreadMessage : null],\n            numberOfLines: 1,\n            ellipsizeMode: \"tail\",\n            children: item.last_message || 'No hay mensajes'\n          }), item.unread_count > 0 && _jsx(View, {\n            style: styles.badgeContainer,\n            children: _jsx(Text, {\n              style: styles.badgeText,\n              children: item.unread_count > 99 ? '99+' : item.unread_count\n            })\n          })]\n        })]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Mensajes\"\n    }), conversations.length === 0 ? _jsxs(View, {\n      style: styles.emptyContainer,\n      children: [_jsx(Ionicons, {\n        name: \"chatbubble-outline\",\n        size: 60,\n        color: \"#ccc\"\n      }), _jsx(Text, {\n        style: styles.emptyText,\n        children: \"No tienes conversaciones a\\xFAn.\"\n      }), _jsx(Text, {\n        style: styles.emptySubtext,\n        children: \"Ve a la pantalla de amigos para iniciar un chat.\"\n      })]\n    }) : _jsx(FlatList, {\n      data: conversations,\n      renderItem: renderConversationItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.conversation_user_id;\n      },\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: handleRefresh,\n        colors: ['#4CAF50']\n      }),\n      contentContainerStyle: {\n        paddingVertical: 10\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f9f9f9'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginVertical: 15,\n    marginHorizontal: 20\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40\n  },\n  emptyText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#666',\n    marginTop: 20\n  },\n  emptySubtext: {\n    fontSize: 16,\n    color: '#888',\n    textAlign: 'center',\n    marginTop: 10\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    padding: 15,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n    alignItems: 'center'\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#4CAF50',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 15\n  },\n  avatarText: {\n    color: 'white',\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  messageInfo: {\n    flex: 1\n  },\n  headerRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4\n  },\n  username: {\n    fontWeight: '600',\n    fontSize: 16\n  },\n  timestamp: {\n    color: '#888',\n    fontSize: 12\n  },\n  messageRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  lastMessage: {\n    color: '#666',\n    fontSize: 14,\n    flex: 1\n  },\n  unreadMessage: {\n    color: '#000',\n    fontWeight: '500'\n  },\n  badgeContainer: {\n    backgroundColor: '#4CAF50',\n    borderRadius: 12,\n    minWidth: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 10,\n    paddingHorizontal: 6\n  },\n  badgeText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  }\n});\nexport default ConversationsScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","FlatList","TouchableOpacity","ActivityIndicator","RefreshControl","Alert","Ionicons","useNavigation","useSelector","getRecentConversations","supabase","jsx","_jsx","jsxs","_jsxs","ConversationsScreen","navigation","_useState","_useState2","_slicedToArray","conversations","setConversations","_useState3","_useState4","loading","setLoading","_useState5","_useState6","refreshing","setRefreshing","user","state","auth","checkUserAuth","_ref","_asyncToGenerator","alert","text","onPress","reset","index","routes","name","_yield$supabase$auth$","getUser","data","error","console","email_confirmed_at","_data$user","navigate","email","fetchConversations","apply","arguments","_ref2","conversationsData","id","handleRefresh","openChat","friendId","friendName","style","styles","loadingContainer","children","size","color","renderConversationItem","_ref3","item","messageDate","Date","created_at","now","formattedDate","toDateString","toLocaleTimeString","hour","minute","toLocaleDateString","avatarLetter","username","length","charAt","toUpperCase","conversationItem","conversation_user_id","avatar","avatarText","messageInfo","headerRow","timestamp","messageRow","lastMessage","unread_count","unreadMessage","numberOfLines","ellipsizeMode","last_message","badgeContainer","badgeText","container","title","emptyContainer","emptyText","emptySubtext","renderItem","keyExtractor","refreshControl","onRefresh","colors","contentContainerStyle","paddingVertical","create","flex","backgroundColor","fontSize","fontWeight","marginVertical","marginHorizontal","justifyContent","alignItems","paddingHorizontal","marginTop","textAlign","flexDirection","padding","borderBottomWidth","borderBottomColor","width","height","borderRadius","marginRight","marginBottom","minWidth","marginLeft"],"sources":["C:/Users/migue/TravelQuest/src/screens/main/ConversationsScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  FlatList,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n  RefreshControl,\r\n  Alert\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../features/store';\r\nimport { getRecentConversations } from '../../services/messageService';\r\nimport { supabase } from '../../services/supabase';\r\n\r\ninterface Conversation {\r\n  conversation_user_id: string;\r\n  username: string;\r\n  last_message: string;\r\n  created_at: string;\r\n  unread_count: number;\r\n}\r\n\r\nconst ConversationsScreen = () => {\r\n  const navigation = useNavigation<any>();\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n\r\n  useEffect(() => {\r\n    checkUserAuth();\r\n  }, []);\r\n\r\n  const checkUserAuth = async () => {\r\n    // Verificar si el usuario está autenticado\r\n    if (!user) {\r\n      Alert.alert(\r\n        \"No autenticado\",\r\n        \"Por favor inicia sesión para acceder a los mensajes\",\r\n        [\r\n          { text: \"OK\", onPress: () => navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: 'Login' }]\r\n          })}\r\n        ]\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Verificar si el correo electrónico está verificado\r\n    const { data, error } = await supabase.auth.getUser();\r\n    if (error) {\r\n      console.error('Error obteniendo información del usuario:', error);\r\n      return;\r\n    }\r\n\r\n    if (data && data.user && !data.user.email_confirmed_at) {\r\n      Alert.alert(\r\n        \"Correo no verificado\",\r\n        \"Por favor verifica tu correo electrónico para acceder a los mensajes. Revisa tu bandeja de entrada.\",\r\n        [\r\n          { text: \"OK\", onPress: () => navigation.navigate('VerifyEmail', { email: data.user?.email }) }\r\n        ]\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Si todo está bien, cargamos las conversaciones\r\n    fetchConversations();\r\n  };\r\n\r\n  const fetchConversations = async () => {\r\n    if (!user) {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const conversationsData = await getRecentConversations(user.id);\r\n      setConversations(conversationsData);\r\n    } catch (error) {\r\n      console.error('Error fetching conversations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchConversations();\r\n    }\r\n  }, [user]);\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    fetchConversations();\r\n  };\r\n\r\n  const openChat = (friendId: string, friendName: string) => {\r\n    // @ts-ignore\r\n    navigation.navigate('Chat', { friendId, friendName });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const renderConversationItem = ({ item }: { item: Conversation }) => {\r\n    // Formatear la fecha para mostrar\r\n    const messageDate = new Date(item.created_at);\r\n    const now = new Date();\r\n    \r\n    // Si es hoy, mostrar la hora\r\n    const formattedDate = messageDate.toDateString() === now.toDateString()\r\n      ? messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n      : messageDate.toLocaleDateString();\r\n\r\n    // Avatar placeholder seguro cuando no hay username\r\n    const avatarLetter = item.username && item.username.length > 0 \r\n      ? item.username.charAt(0).toUpperCase() \r\n      : '?';\r\n\r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.conversationItem}\r\n        onPress={() => openChat(item.conversation_user_id, item.username || 'Usuario')}\r\n      >\r\n        <View style={styles.avatar}>\r\n          <Text style={styles.avatarText}>\r\n            {avatarLetter}\r\n          </Text>\r\n        </View>\r\n        \r\n        <View style={styles.messageInfo}>\r\n          <View style={styles.headerRow}>\r\n            <Text style={styles.username}>{item.username || 'Usuario'}</Text>\r\n            <Text style={styles.timestamp}>{formattedDate}</Text>\r\n          </View>\r\n          \r\n          <View style={styles.messageRow}>\r\n            <Text \r\n              style={[\r\n                styles.lastMessage,\r\n                item.unread_count > 0 ? styles.unreadMessage : null\r\n              ]}\r\n              numberOfLines={1}\r\n              ellipsizeMode=\"tail\"\r\n            >\r\n              {item.last_message || 'No hay mensajes'}\r\n            </Text>\r\n            \r\n            {item.unread_count > 0 && (\r\n              <View style={styles.badgeContainer}>\r\n                <Text style={styles.badgeText}>\r\n                  {item.unread_count > 99 ? '99+' : item.unread_count}\r\n                </Text>\r\n              </View>\r\n            )}\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Mensajes</Text>\r\n      \r\n      {conversations.length === 0 ? (\r\n        <View style={styles.emptyContainer}>\r\n          <Ionicons name=\"chatbubble-outline\" size={60} color=\"#ccc\" />\r\n          <Text style={styles.emptyText}>\r\n            No tienes conversaciones aún.\r\n          </Text>\r\n          <Text style={styles.emptySubtext}>\r\n            Ve a la pantalla de amigos para iniciar un chat.\r\n          </Text>\r\n        </View>\r\n      ) : (\r\n        <FlatList\r\n          data={conversations}\r\n          renderItem={renderConversationItem}\r\n          keyExtractor={(item) => item.conversation_user_id}\r\n          refreshControl={\r\n            <RefreshControl\r\n              refreshing={refreshing}\r\n              onRefresh={handleRefresh}\r\n              colors={['#4CAF50']}\r\n            />\r\n          }\r\n          contentContainerStyle={{ paddingVertical: 10 }}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f9f9f9',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginVertical: 15,\r\n    marginHorizontal: 20,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  emptyContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 40,\r\n  },\r\n  emptyText: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    color: '#666',\r\n    marginTop: 20,\r\n  },\r\n  emptySubtext: {\r\n    fontSize: 16,\r\n    color: '#888',\r\n    textAlign: 'center',\r\n    marginTop: 10,\r\n  },\r\n  conversationItem: {\r\n    flexDirection: 'row',\r\n    padding: 15,\r\n    backgroundColor: 'white',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#eee',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    width: 50,\r\n    height: 50,\r\n    borderRadius: 25,\r\n    backgroundColor: '#4CAF50',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginRight: 15,\r\n  },\r\n  avatarText: {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  messageInfo: {\r\n    flex: 1,\r\n  },\r\n  headerRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 4,\r\n  },\r\n  username: {\r\n    fontWeight: '600',\r\n    fontSize: 16,\r\n  },\r\n  timestamp: {\r\n    color: '#888',\r\n    fontSize: 12,\r\n  },\r\n  messageRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  lastMessage: {\r\n    color: '#666',\r\n    fontSize: 14,\r\n    flex: 1,\r\n  },\r\n  unreadMessage: {\r\n    color: '#000',\r\n    fontWeight: '500',\r\n  },\r\n  badgeContainer: {\r\n    backgroundColor: '#4CAF50',\r\n    borderRadius: 12,\r\n    minWidth: 24,\r\n    height: 24,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginLeft: 10,\r\n    paddingHorizontal: 6,\r\n  },\r\n  badgeText: {\r\n    color: 'white',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default ConversationsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
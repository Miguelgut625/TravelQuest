{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { supabase } from \"./supabase\";\nexport var checkJournalTables = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var _yield$Promise$allSet = yield Promise.allSettled([supabase.from('journal_entries').select('id').limit(1), supabase.from('journey_diary').select('id').limit(1)]),\n        _yield$Promise$allSet2 = _slicedToArray(_yield$Promise$allSet, 2),\n        journalEntriesResult = _yield$Promise$allSet2[0],\n        journeyDiaryResult = _yield$Promise$allSet2[1];\n      return {\n        journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n        journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n      };\n    } catch (error) {\n      console.error('Error verificando tablas del diario:', error);\n      return {\n        journalEntriesExists: false,\n        journeyDiaryExists: false\n      };\n    }\n  });\n  return function checkJournalTables() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUserJournalEntries = function () {\n  var _ref2 = _asyncToGenerator(function* (userId) {\n    try {\n      var _yield$checkJournalTa = yield checkJournalTables(),\n        journalEntriesExists = _yield$checkJournalTa.journalEntriesExists,\n        journeyDiaryExists = _yield$checkJournalTa.journeyDiaryExists;\n      if (!journalEntriesExists && !journeyDiaryExists) {\n        console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n        return {};\n      }\n      var entriesData = null;\n      var error = null;\n      if (journalEntriesExists) {\n        try {\n          var _yield$supabase$from$ = yield supabase.from('journal_entries').select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `).eq('userid', userId).order('created_at', {\n              ascending: false\n            }),\n            data = _yield$supabase$from$.data,\n            entriesError = _yield$supabase$from$.error;\n          if (!entriesError) {\n            entriesData = data;\n          } else if (entriesError.message && (entriesError.message.includes('cityid') || entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200' || entriesError.code === '42703')) {\n            try {\n              var _yield$supabase$from$2 = yield supabase.from('journal_entries').select('*').eq('userid', userId).order('created_at', {\n                  ascending: false\n                }),\n                basicData = _yield$supabase$from$2.data,\n                basicError = _yield$supabase$from$2.error;\n              if (!basicError) {\n                entriesData = basicData;\n              } else {\n                var _yield$supabase$from$3 = yield supabase.from('journal_entries').select('*').eq('user_id', userId).order('created_at', {\n                    ascending: false\n                  }),\n                  altData = _yield$supabase$from$3.data,\n                  altError = _yield$supabase$from$3.error;\n                if (!altError) {\n                  entriesData = altData;\n                } else {\n                  error = altError;\n                }\n              }\n            } catch (e) {\n              console.warn('Error al obtener datos sin relación:', e);\n            }\n          } else {\n            error = entriesError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journal_entries:', e);\n        }\n      }\n      if (!entriesData && journeyDiaryExists) {\n        try {\n          var possibleQueries = [supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', {\n            ascending: false\n          }), supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', {\n            ascending: false\n          })];\n          for (var query of possibleQueries) {\n            try {\n              var _yield$query = yield query,\n                diaryData = _yield$query.data,\n                diaryError = _yield$query.error;\n              if (!diaryError && diaryData && diaryData.length > 0) {\n                entriesData = diaryData;\n                break;\n              }\n            } catch (e) {\n              console.warn('Error en consulta alternativa:', e);\n            }\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journey_diary:', e);\n        }\n      }\n      if (!entriesData && error) {\n        throw error;\n      }\n      if (!entriesData) {\n        return {};\n      }\n      return organizeCityEntries(entriesData, true);\n    } catch (error) {\n      console.error('Error obteniendo entradas del diario:', error);\n      throw error;\n    }\n  });\n  return function getUserJournalEntries(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar organizeCityEntries = function organizeCityEntries(data) {\n  var missingCityRelation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var entriesByCity = {};\n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  data.forEach(function (entry) {\n    var _entry$cities;\n    var cityName = 'Ciudad Desconocida';\n    if (!missingCityRelation && (_entry$cities = entry.cities) != null && _entry$cities.name) {\n      cityName = entry.cities.name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else {\n      if (entry.tags && Array.isArray(entry.tags)) {\n        var cityTag = entry.tags.find(function (tag) {\n          return tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel';\n        });\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n        }\n      }\n    }\n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    var processedEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || '',\n      cityId: entry.cityId || '',\n      missionId: entry.missionId || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    entriesByCity[cityName].push(processedEntry);\n  });\n  return entriesByCity;\n};\nexport var getMissionJournalEntries = function () {\n  var _ref3 = _asyncToGenerator(function* (userId, missionId) {\n    try {\n      var _yield$checkJournalTa2 = yield checkJournalTables(),\n        journalEntriesExists = _yield$checkJournalTa2.journalEntriesExists,\n        journeyDiaryExists = _yield$checkJournalTa2.journeyDiaryExists;\n      if (!journalEntriesExists && !journeyDiaryExists) {\n        console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n        return [];\n      }\n      var entriesData = null;\n      var error = null;\n      if (journalEntriesExists) {\n        try {\n          var _yield$supabase$from$4 = yield supabase.from('journal_entries').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n              ascending: false\n            }),\n            data = _yield$supabase$from$4.data,\n            entriesError = _yield$supabase$from$4.error;\n          if (!entriesError) {\n            entriesData = data;\n          } else if (entriesError.message && (entriesError.message.includes('cityId') || entriesError.message.includes('relationship') || entriesError.code === 'PGRST200')) {\n            var _yield$supabase$from$5 = yield supabase.from('journal_entries').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n                ascending: false\n              }),\n              basicData = _yield$supabase$from$5.data,\n              basicError = _yield$supabase$from$5.error;\n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              error = basicError;\n            }\n          } else {\n            error = entriesError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journal_entries para misión:', e);\n        }\n      }\n      if (!entriesData && journeyDiaryExists) {\n        try {\n          var _yield$supabase$from$6 = yield supabase.from('journey_diary').select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `).eq('userId', userId).eq('missionId', missionId).order('created_at', {\n              ascending: false\n            }),\n            _data = _yield$supabase$from$6.data,\n            diaryError = _yield$supabase$from$6.error;\n          if (!diaryError) {\n            entriesData = _data;\n          } else if (diaryError.message && (diaryError.message.includes('cityId') || diaryError.message.includes('relationship') || diaryError.code === 'PGRST200')) {\n            var _yield$supabase$from$7 = yield supabase.from('journey_diary').select('*').eq('userId', userId).eq('missionId', missionId).order('created_at', {\n                ascending: false\n              }),\n              _basicData = _yield$supabase$from$7.data,\n              _basicError = _yield$supabase$from$7.error;\n            if (!_basicError) {\n              entriesData = _basicData;\n            } else if (!error) {\n              error = _basicError;\n            }\n          } else if (!error) {\n            error = diaryError;\n          }\n        } catch (e) {\n          console.warn('Error al obtener datos de journey_diary para misión:', e);\n        }\n      }\n      if (!entriesData && error) {\n        throw error;\n      }\n      if (!entriesData || entriesData.length === 0) {\n        return [];\n      }\n      return entriesData.map(function (entry) {\n        var _entry$cities2;\n        var cityName = 'Ciudad Desconocida';\n        if ((_entry$cities2 = entry.cities) != null && _entry$cities2.name) {\n          cityName = entry.cities.name;\n        } else if (entry.cityName) {\n          cityName = entry.cityName;\n        } else if (entry.city_name) {\n          cityName = entry.city_name;\n        } else if (entry.tags && Array.isArray(entry.tags)) {\n          var cityTag = entry.tags.find(function (tag) {\n            return tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel';\n          });\n          if (cityTag) {\n            cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1);\n          }\n        }\n        return {\n          id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n          userId: entry.userId || '',\n          cityId: entry.cityId || '',\n          missionId: entry.missionId || missionId,\n          title: entry.title || 'Entrada sin título',\n          content: entry.content || '',\n          photos: Array.isArray(entry.photos) ? entry.photos : entry.photos ? [entry.photos] : [],\n          location: entry.location || null,\n          created_at: entry.created_at || new Date().toISOString(),\n          tags: Array.isArray(entry.tags) ? entry.tags : [],\n          city_name: cityName\n        };\n      });\n    } catch (error) {\n      console.error('Error obteniendo entradas de la misión:', error);\n      throw error;\n    }\n  });\n  return function getMissionJournalEntries(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createJournalEntry = function () {\n  var _ref4 = _asyncToGenerator(function* (data) {\n    try {\n      var snakeCaseData = {\n        user_id: data.userId,\n        city_id: data.cityId,\n        mission_id: data.missionId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        created_at: new Date().toISOString(),\n        tags: data.tags || []\n      };\n      var lowerCamelData = {\n        userid: data.userId,\n        cityid: data.cityId,\n        missionid: data.missionId,\n        title: data.title,\n        content: data.content,\n        photos: data.photos,\n        created_at: new Date().toISOString(),\n        tags: data.tags || []\n      };\n      try {\n        for (var entryData of [data, snakeCaseData, lowerCamelData]) {\n          try {\n            var _yield$supabase$from$8 = yield supabase.from('journal_entries').insert(entryData),\n              error = _yield$supabase$from$8.error;\n            if (!error) {\n              console.log('Entrada creada exitosamente en journal_entries');\n              return true;\n            }\n          } catch (_unused) {}\n        }\n        console.log('No se pudo crear entrada en journal_entries, intentando con journey_diary');\n      } catch (e) {\n        console.warn('Error con journal_entries, intentando con journey_diary:', e);\n      }\n      for (var _entryData of [data, snakeCaseData, lowerCamelData]) {\n        try {\n          var _yield$supabase$from$9 = yield supabase.from('journey_diary').insert(_entryData),\n            _error = _yield$supabase$from$9.error;\n          if (!_error) {\n            console.log('Entrada creada exitosamente en journey_diary');\n            return true;\n          }\n        } catch (_unused2) {}\n      }\n      console.error('No se pudo crear entrada en ninguna tabla de diario');\n      return false;\n    } catch (error) {\n      console.error('Error creando entrada en el diario:', error);\n      return false;\n    }\n  });\n  return function createJournalEntry(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["supabase","checkJournalTables","_ref","_asyncToGenerator","_yield$Promise$allSet","Promise","allSettled","from","select","limit","_yield$Promise$allSet2","_slicedToArray","journalEntriesResult","journeyDiaryResult","journalEntriesExists","status","value","error","journeyDiaryExists","console","apply","arguments","getUserJournalEntries","_ref2","userId","_yield$checkJournalTa","warn","entriesData","_yield$supabase$from$","eq","order","ascending","data","entriesError","message","includes","code","_yield$supabase$from$2","basicData","basicError","_yield$supabase$from$3","altData","altError","e","possibleQueries","query","_yield$query","diaryData","diaryError","length","organizeCityEntries","_x","missingCityRelation","undefined","entriesByCity","forEach","entry","_entry$cities","cityName","cities","name","city_name","tags","Array","isArray","cityTag","find","tag","charAt","toUpperCase","slice","processedEntry","id","Date","now","Math","random","toString","substring","cityId","missionId","title","content","photos","location","created_at","toISOString","push","getMissionJournalEntries","_ref3","_yield$checkJournalTa2","_yield$supabase$from$4","_yield$supabase$from$5","_yield$supabase$from$6","_yield$supabase$from$7","map","_entry$cities2","_x2","_x3","createJournalEntry","_ref4","snakeCaseData","user_id","city_id","mission_id","lowerCamelData","userid","cityid","missionid","entryData","_yield$supabase$from$8","insert","log","_unused","_yield$supabase$from$9","_unused2","_x4"],"sources":["C:/Users/migue/TravelQuest/src/services/journalService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface JournalEntryDB {\n  id: string;\n  userId: string;\n  cityId: string;\n  missionId?: string;\n  title: string;\n  content: string;\n  photos: string[];\n  location: {\n    latitude: number;\n    longitude: number;\n  } | null;\n  created_at: string;\n  tags: string[];\n}\n\nexport interface CityJournalEntry extends JournalEntryDB {\n  city_name: string;\n}\n\n/**\n * Verifica si existe la tabla journal_entries o journey_diary en la base de datos\n * @returns objeto con la información de qué tablas existen\n */\nexport const checkJournalTables = async (): Promise<{journalEntriesExists: boolean, journeyDiaryExists: boolean}> => {\n  try {\n    // Probamos si las tablas existen obteniendo solo una fila de cada una\n    const [journalEntriesResult, journeyDiaryResult] = await Promise.allSettled([\n      supabase.from('journal_entries').select('id').limit(1),\n      supabase.from('journey_diary').select('id').limit(1)\n    ]);\n    \n    return {\n      journalEntriesExists: journalEntriesResult.status === 'fulfilled' && !journalEntriesResult.value.error,\n      journeyDiaryExists: journeyDiaryResult.status === 'fulfilled' && !journeyDiaryResult.value.error\n    };\n  } catch (error) {\n    console.error('Error verificando tablas del diario:', error);\n    return {\n      journalEntriesExists: false,\n      journeyDiaryExists: false\n    };\n  }\n};\n\n/**\n * Obtiene todas las entradas del diario del usuario agrupadas por ciudad\n * @param userId ID del usuario \n * @returns Entradas del diario agrupadas por ciudad\n */\nexport const getUserJournalEntries = async (userId: string): Promise<{ [cityName: string]: CityJournalEntry[] }> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return {}; // Devolvemos un objeto vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityid (\n              name\n            )\n          `)\n          .eq('userid', userId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityid') || \n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200' ||\n          entriesError.code === '42703')) {\n          \n          // Si hay error de relación, intentamos sin la relación y con nombres alternativos\n          try {\n            const { data: basicData, error: basicError } = await supabase\n              .from('journal_entries')\n              .select('*')\n              .eq('userid', userId)\n              .order('created_at', { ascending: false });\n            \n            if (!basicError) {\n              entriesData = basicData;\n            } else {\n              // Intentar con user_id (otra convención común en PostgreSQL)\n              const { data: altData, error: altError } = await supabase\n                .from('journal_entries')\n                .select('*')\n                .eq('user_id', userId)\n                .order('created_at', { ascending: false });\n              \n              if (!altError) {\n                entriesData = altData;\n              } else {\n                error = altError;\n              }\n            }\n          } catch (e) {\n            console.warn('Error al obtener datos sin relación:', e);\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo un error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos diferentes convenciones de nombres para las columnas\n        const possibleQueries = [\n          // Versión 1: Lowercase\n          supabase.from('journey_diary').select('*').eq('userid', userId).order('created_at', { ascending: false }),\n          // Versión 2: Underscore\n          supabase.from('journey_diary').select('*').eq('user_id', userId).order('created_at', { ascending: false }),\n        ];\n        \n        for (const query of possibleQueries) {\n          try {\n            const { data: diaryData, error: diaryError } = await query;\n            if (!diaryError && diaryData && diaryData.length > 0) {\n              entriesData = diaryData;\n              break;\n            }\n          } catch (e) {\n            // Continuar con la siguiente consulta\n            console.warn('Error en consulta alternativa:', e);\n          }\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un objeto vacío\n    if (!entriesData) {\n      return {};\n    }\n    \n    // Organizar las entradas por ciudad\n    return organizeCityEntries(entriesData, true);\n  } catch (error) {\n    console.error('Error obteniendo entradas del diario:', error);\n    throw error;\n  }\n};\n\n/**\n * Organiza las entradas del diario por ciudad\n * @param data Datos de las entradas\n * @param missingCityRelation Indica si falta la relación con la ciudad\n * @returns Entradas organizadas por ciudad\n */\nconst organizeCityEntries = (\n  data: any[] | null, \n  missingCityRelation: boolean = false\n): { [cityName: string]: CityJournalEntry[] } => {\n  const entriesByCity: { [cityName: string]: CityJournalEntry[] } = {};\n  \n  if (!data || data.length === 0) {\n    return entriesByCity;\n  }\n  \n  data.forEach((entry: any) => {\n    let cityName = 'Ciudad Desconocida';\n    \n    // Intentamos obtener el nombre de la ciudad de varias formas posibles\n    if (!missingCityRelation && entry.cities?.name) {\n      cityName = entry.cities.name;\n    } else if (entry.cityName) {\n      cityName = entry.cityName;\n    } else if (entry.city_name) {\n      cityName = entry.city_name;\n    } else {\n      // Buscar el cityId en las etiquetas y usar la primera que parece ser un nombre de ciudad\n      if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find((tag: string) => \n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\n        );\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\n        }\n      }\n    }\n    \n    if (!entriesByCity[cityName]) {\n      entriesByCity[cityName] = [];\n    }\n    \n    // Nos aseguramos de que todos los campos necesarios existan\n    const processedEntry: CityJournalEntry = {\n      id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      userId: entry.userId || '',\n      cityId: entry.cityId || '',\n      missionId: entry.missionId || undefined,\n      title: entry.title || 'Entrada sin título',\n      content: entry.content || '',\n      photos: Array.isArray(entry.photos) ? entry.photos : \n              (entry.photos ? [entry.photos] : []),\n      location: entry.location || null,\n      created_at: entry.created_at || new Date().toISOString(),\n      tags: Array.isArray(entry.tags) ? entry.tags : [],\n      city_name: cityName\n    };\n    \n    entriesByCity[cityName].push(processedEntry);\n  });\n\n  return entriesByCity;\n};\n\n/**\n * Obtiene las entradas del diario relacionadas con una misión específica\n * @param userId ID del usuario\n * @param missionId ID de la misión\n * @returns Entradas del diario relacionadas con la misión\n */\nexport const getMissionJournalEntries = async (userId: string, missionId: string): Promise<CityJournalEntry[]> => {\n  try {\n    // Verificar qué tablas existen\n    const { journalEntriesExists, journeyDiaryExists } = await checkJournalTables();\n    \n    if (!journalEntriesExists && !journeyDiaryExists) {\n      console.warn('No se encontraron tablas para el diario (journal_entries o journey_diary)');\n      return []; // Devolvemos un array vacío\n    }\n\n    let entriesData = null;\n    let error = null;\n\n    // Primero intentamos con journal_entries si existe\n    if (journalEntriesExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: entriesError } = await supabase\n          .from('journal_entries')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!entriesError) {\n          entriesData = data;\n        } else if (entriesError.message && (\n          entriesError.message.includes('cityId') || \n          entriesError.message.includes('relationship') ||\n          entriesError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journal_entries')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else {\n            error = basicError;\n          }\n        } else {\n          error = entriesError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journal_entries para misión:', e);\n      }\n    }\n\n    // Si no obtuvimos datos de journal_entries o hubo error, intentamos con journey_diary\n    if (!entriesData && journeyDiaryExists) {\n      try {\n        // Intentamos con la relación a cities\n        const { data, error: diaryError } = await supabase\n          .from('journey_diary')\n          .select(`\n            *,\n            cities:cityId (\n              name\n            )\n          `)\n          .eq('userId', userId)\n          .eq('missionId', missionId)\n          .order('created_at', { ascending: false });\n\n        if (!diaryError) {\n          entriesData = data;\n        } else if (diaryError.message && (\n          diaryError.message.includes('cityId') || \n          diaryError.message.includes('relationship') ||\n          diaryError.code === 'PGRST200')) {\n          \n          // Si hay error de relación, intentamos sin la relación\n          const { data: basicData, error: basicError } = await supabase\n            .from('journey_diary')\n            .select('*')\n            .eq('userId', userId)\n            .eq('missionId', missionId)\n            .order('created_at', { ascending: false });\n          \n          if (!basicError) {\n            entriesData = basicData;\n          } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n            error = basicError;\n          }\n        } else if (!error) { // Solo guardamos este error si no teníamos uno previo\n          error = diaryError;\n        }\n      } catch (e) {\n        console.warn('Error al obtener datos de journey_diary para misión:', e);\n      }\n    }\n\n    // Si después de intentar con ambas tablas seguimos sin datos y tenemos un error, lo lanzamos\n    if (!entriesData && error) {\n      throw error;\n    }\n\n    // Si no hay datos (pero no hubo error), devolvemos un array vacío\n    if (!entriesData || entriesData.length === 0) {\n      return [];\n    }\n    \n    // Procesamos las entradas para asegurar el formato correcto\n    return entriesData.map((entry: any) => {\n      let cityName = 'Ciudad Desconocida';\n      \n      if (entry.cities?.name) {\n        cityName = entry.cities.name;\n      } else if (entry.cityName) {\n        cityName = entry.cityName;\n      } else if (entry.city_name) {\n        cityName = entry.city_name;\n      } else if (entry.tags && Array.isArray(entry.tags)) {\n        const cityTag = entry.tags.find((tag: string) => \n          tag !== 'misión' && tag !== 'mission' && tag !== 'viaje' && tag !== 'travel'\n        );\n        if (cityTag) {\n          cityName = cityTag.charAt(0).toUpperCase() + cityTag.slice(1); // Capitalizar\n        }\n      }\n      \n      return {\n        id: entry.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        userId: entry.userId || '',\n        cityId: entry.cityId || '',\n        missionId: entry.missionId || missionId,\n        title: entry.title || 'Entrada sin título',\n        content: entry.content || '',\n        photos: Array.isArray(entry.photos) ? entry.photos : \n                (entry.photos ? [entry.photos] : []),\n        location: entry.location || null,\n        created_at: entry.created_at || new Date().toISOString(),\n        tags: Array.isArray(entry.tags) ? entry.tags : [],\n        city_name: cityName\n      };\n    });\n  } catch (error) {\n    console.error('Error obteniendo entradas de la misión:', error);\n    throw error;\n  }\n};\n\nexport const createJournalEntry = async (data: {\n  userId: string;\n  cityId: string;\n  missionId: string;\n  title: string;\n  content: string;\n  photos: string[];\n  tags?: string[];\n}) => {\n  try {\n    // Preparar versiones de datos con diferentes convenciones de nombres\n    const snakeCaseData = {\n      user_id: data.userId,\n      city_id: data.cityId,\n      mission_id: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n    \n    const lowerCamelData = {\n      userid: data.userId,\n      cityid: data.cityId,\n      missionid: data.missionId,\n      title: data.title,\n      content: data.content,\n      photos: data.photos,\n      created_at: new Date().toISOString(),\n      tags: data.tags || []\n    };\n\n    // Intentar primero con journal_entries\n    try {\n      // Probar las diferentes convenciones de nombres\n      for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n        try {\n          const { error } = await supabase.from('journal_entries').insert(entryData);\n          if (!error) {\n            console.log('Entrada creada exitosamente en journal_entries');\n            return true;\n          }\n        } catch {}\n      }\n      \n      // Si llegamos aquí, ninguna convención funcionó, intentar con journey_diary\n      console.log('No se pudo crear entrada en journal_entries, intentando con journey_diary');\n    } catch (e) {\n      console.warn('Error con journal_entries, intentando con journey_diary:', e);\n    }\n    \n    // Intentar con journey_diary\n    for (const entryData of [data, snakeCaseData, lowerCamelData]) {\n      try {\n        const { error } = await supabase.from('journey_diary').insert(entryData);\n        if (!error) {\n          console.log('Entrada creada exitosamente en journey_diary');\n          return true;\n        }\n      } catch {}\n    }\n    \n    // Si llegamos aquí, ninguna tabla funcionó\n    console.error('No se pudo crear entrada en ninguna tabla de diario');\n    return false;\n  } catch (error) {\n    console.error('Error creando entrada en el diario:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
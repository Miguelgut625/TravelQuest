{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supabase } from \"../../services/supabase\";\nimport { completeMission } from \"../../services/pointsService\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from 'react-native-paper';\nimport { completeMission as dispatchCompleteMission } from \"../../features/journeySlice\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Logo = require(\"../../assets/icons/logo.png\");\nvar colors = {\n  primary: '#005F9E',\n  secondary: '#FFFFFF',\n  danger: '#D32F2F',\n  backgroundGradient: ['#005F9E', '#F0F0F0']\n};\nvar getTimeRemaining = function getTimeRemaining(endDate) {\n  var now = new Date();\n  var end = new Date(endDate);\n  var diff = end.getTime() - now.getTime();\n  if (diff <= 0) {\n    return {\n      isExpired: true,\n      text: 'Tiempo expirado'\n    };\n  }\n  var days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  var hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  var minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n  if (days > 0) {\n    return {\n      isExpired: false,\n      text: `${days} dÃ­as restantes`\n    };\n  } else if (hours > 0) {\n    return {\n      isExpired: false,\n      text: `${hours} horas restantes`\n    };\n  } else {\n    return {\n      isExpired: false,\n      text: `${minutes} minutos restantes`\n    };\n  }\n};\nvar MissionCard = function MissionCard(_ref) {\n  var mission = _ref.mission,\n    onComplete = _ref.onComplete;\n  var timeRemaining = getTimeRemaining(mission.end_date);\n  var isExpired = timeRemaining.isExpired && !mission.completed;\n  return _jsxs(TouchableOpacity, {\n    style: [styles.card, mission.completed && styles.completedCard, isExpired && styles.expiredCard],\n    onPress: function onPress() {\n      return !mission.completed && !isExpired && onComplete();\n    },\n    disabled: mission.completed || isExpired,\n    children: [_jsxs(View, {\n      style: styles.cardHeader,\n      children: [_jsx(Text, {\n        style: styles.cardTitle,\n        children: mission.challenge.title\n      }), _jsxs(View, {\n        style: styles.badgeContainer,\n        children: [_jsx(Text, {\n          style: [styles.badge, {\n            backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000'\n          }],\n          children: mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'\n        }), _jsx(Text, {\n          style: [styles.timeRemaining, isExpired && styles.expiredTime],\n          children: timeRemaining.text\n        })]\n      })]\n    }), _jsx(Text, {\n      style: styles.cardDescription,\n      children: mission.challenge.description\n    }), _jsxs(View, {\n      style: styles.cardFooter,\n      children: [_jsxs(Text, {\n        style: styles.difficulty,\n        children: [\"Dificultad: \", mission.challenge.difficulty]\n      }), _jsxs(Text, {\n        style: styles.points,\n        children: [mission.challenge.points, \" puntos\"]\n      })]\n    })]\n  });\n};\nvar CityCard = function CityCard(_ref2) {\n  var cityName = _ref2.cityName,\n    totalMissions = _ref2.totalMissions,\n    completedMissions = _ref2.completedMissions,\n    expiredMissions = _ref2.expiredMissions,\n    onPress = _ref2.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: styles.cityCard,\n    onPress: onPress,\n    children: [_jsxs(View, {\n      style: styles.cityCardContent,\n      children: [_jsxs(View, {\n        style: styles.cityInfo,\n        children: [_jsx(Text, {\n          style: styles.cityName,\n          children: cityName\n        }), _jsxs(View, {\n          style: styles.missionCountContainer,\n          children: [_jsxs(Text, {\n            style: styles.missionCount,\n            children: [completedMissions, \"/\", totalMissions, \" misiones completadas\"]\n          }), expiredMissions > 0 && _jsxs(Text, {\n            style: styles.expiredCount,\n            children: [expiredMissions, \" misiones expiradas\"]\n          })]\n        })]\n      }), _jsx(Ionicons, {\n        name: \"chevron-forward\",\n        size: 24,\n        color: \"#666\"\n      })]\n    }), _jsxs(View, {\n      style: styles.progressBar,\n      children: [_jsx(View, {\n        style: [styles.progressFillCompleted, {\n          width: `${completedMissions / totalMissions * 100}%`\n        }]\n      }), _jsx(View, {\n        style: [styles.progressFillExpired, {\n          width: `${expiredMissions / totalMissions * 100}%`,\n          left: `${completedMissions / totalMissions * 100}%`\n        }]\n      }), _jsx(View, {\n        style: [styles.progressFillPending, {\n          width: `${(totalMissions - completedMissions - expiredMissions) / totalMissions * 100}%`,\n          left: `${(completedMissions + expiredMissions) / totalMissions * 100}%`\n        }]\n      })]\n    })]\n  });\n};\nvar MissionsScreen = function MissionsScreen(_ref3) {\n  var route = _ref3.route;\n  var _ref4 = route.params || {},\n    journeyId = _ref4.journeyId;\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    missions = _useState2[0],\n    setMissions = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userPoints = _useState8[0],\n    setUserPoints = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedCity = _useState10[0],\n    setSelectedCity = _useState10[1];\n  var _useState11 = useState({}),\n    _useState12 = _slicedToArray(_useState11, 2),\n    cityMissions = _useState12[0],\n    setCityMissions = _useState12[1];\n  var dispatch = useDispatch();\n  var theme = useTheme();\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width;\n  var cardWidth = width * 0.17;\n  var cardMargin = width * 0.02;\n  var numColumns = Math.floor(width / (cardWidth + cardMargin * 2)) || 1;\n  var fetchMissions = function () {\n    var _ref5 = _asyncToGenerator(function* (userId, setCityMissions, setMissions, setError, setLoading) {\n      try {\n        var _yield$supabase$from$ = yield supabase.from('journeys').select(`\n          id,\n          description,\n          created_at,\n          start_date,\n          end_date,\n          userId,\n          cities ( name ),\n          journeys_missions (\n            id,\n            completed,\n            userId,\n            challengeId,\n            start_date,\n            end_date,\n            challenges (\n              id,\n              title,\n              description,\n              difficulty,\n              points\n            )\n          )\n        `).eq('userId', userId).order('created_at', {\n            ascending: false\n          }),\n          journeys = _yield$supabase$from$.data,\n          journeysError = _yield$supabase$from$.error;\n        if (journeysError) throw journeysError;\n        if (!journeys || journeys.length === 0) {\n          setError('No hay viajes disponibles');\n          setLoading(false);\n          return;\n        }\n        var allMissions = journeys.flatMap(function (journey) {\n          return journey.journeys_missions.filter(function (jm) {\n            return jm.userId === userId;\n          }).map(function (jm) {\n            var _journey$cities;\n            return {\n              id: jm.id,\n              completed: jm.completed,\n              userId: jm.userId,\n              cityName: ((_journey$cities = journey.cities) == null ? void 0 : _journey$cities.name) || 'Ciudad Desconocida',\n              start_date: jm.start_date || journey.start_date,\n              end_date: jm.end_date || journey.end_date,\n              challenge: {\n                id: jm.challenges.id,\n                title: jm.challenges.title,\n                description: jm.challenges.description,\n                difficulty: jm.challenges.difficulty,\n                points: jm.challenges.points\n              }\n            };\n          });\n        });\n        var missionsByCity = {};\n        allMissions.forEach(function (mission) {\n          if (!missionsByCity[mission.cityName]) {\n            missionsByCity[mission.cityName] = {\n              completed: [],\n              pending: [],\n              expired: []\n            };\n          }\n          var timeRemaining = getTimeRemaining(mission.end_date);\n          if (mission.completed) missionsByCity[mission.cityName].completed.push(mission);else if (timeRemaining.isExpired) missionsByCity[mission.cityName].expired.push(mission);else missionsByCity[mission.cityName].pending.push(mission);\n        });\n        setCityMissions(missionsByCity);\n        setMissions(allMissions);\n      } catch (error) {\n        console.error('Error fetching missions:', error);\n        setError('Error al cargar las misiones');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchMissions(_x, _x2, _x3, _x4, _x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (user != null && user.id) {\n      fetchMissions(user.id, setCityMissions, setMissions, setError, setLoading);\n    }\n  }, [journeyId, user == null ? void 0 : user.id]);\n  var handleCompleteMission = function () {\n    var _ref6 = _asyncToGenerator(function* (missionId) {\n      if (!(user != null && user.id)) return;\n      try {\n        var points = yield completeMission(missionId, user.id);\n        setUserPoints(function (prev) {\n          return prev + points;\n        });\n        var updatedMissions = missions.map(function (mission) {\n          return mission.id === missionId ? _objectSpread(_objectSpread({}, mission), {}, {\n            completed: true\n          }) : mission;\n        });\n        setMissions(updatedMissions);\n        var newCityMissions = _objectSpread({}, cityMissions);\n        Object.keys(newCityMissions).forEach(function (cityName) {\n          var mission = newCityMissions[cityName].pending.find(function (m) {\n            return m.id === missionId;\n          });\n          if (mission) {\n            newCityMissions[cityName].pending = newCityMissions[cityName].pending.filter(function (m) {\n              return m.id !== missionId;\n            });\n            newCityMissions[cityName].completed.push(_objectSpread(_objectSpread({}, mission), {}, {\n              completed: true\n            }));\n          }\n        });\n        setCityMissions(newCityMissions);\n        Alert.alert('Â¡MisiÃ³n Completada!', `Has ganado ${points} puntos por completar esta misiÃ³n.`);\n      } catch (error) {\n        console.error('Error completing mission:', error);\n        Alert.alert('Error', 'No se pudo completar la misiÃ³n. Por favor, intenta de nuevo.');\n      }\n    });\n    return function handleCompleteMission(_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var handleMissionComplete = function handleMissionComplete(missionId) {\n    handleCompleteMission(missionId);\n    dispatch(dispatchCompleteMission(missionId));\n  };\n  if (loading) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Cargando misiones...\"\n      })]\n    });\n  }\n  if (error) {\n    return _jsxs(View, {\n      style: styles.errorContainer,\n      children: [_jsx(Text, {\n        style: styles.errorText,\n        children: error\n      }), _jsx(TouchableOpacity, {\n        style: styles.retryButton,\n        onPress: function onPress() {\n          if (user != null && user.id) {\n            fetchMissions(user.id, setCityMissions, setMissions, setError, setLoading);\n          }\n        },\n        children: _jsx(Text, {\n          style: styles.retryButtonText,\n          children: \"Reintentar\"\n        })\n      })]\n    });\n  }\n  if (!selectedCity) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.header,\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"Tus Ciudades\"\n        }), _jsxs(Text, {\n          style: styles.pointsText,\n          children: [\"Puntos: \", userPoints]\n        })]\n      }), _jsx(FlatList, {\n        data: Object.entries(cityMissions),\n        keyExtractor: function keyExtractor(_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 1),\n            cityName = _ref8[0];\n          return cityName;\n        },\n        numColumns: numColumns,\n        columnWrapperStyle: {\n          justifyContent: 'flex-start'\n        },\n        contentContainerStyle: {\n          paddingBottom: 20\n        },\n        renderItem: function renderItem(_ref9) {\n          var item = _ref9.item;\n          var _item = _slicedToArray(item, 2),\n            cityName = _item[0],\n            missions = _item[1];\n          return _jsx(View, {\n            style: {\n              width: cardWidth,\n              margin: cardMargin\n            },\n            children: _jsx(CityCard, {\n              cityName: cityName,\n              totalMissions: missions.completed.length + missions.pending.length + missions.expired.length,\n              completedMissions: missions.completed.length,\n              expiredMissions: missions.expired.length,\n              onPress: function onPress() {\n                return setSelectedCity(cityName);\n              }\n            })\n          });\n        }\n      })]\n    });\n  }\n  var cityData = cityMissions[selectedCity];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsxs(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: function onPress() {\n          return setSelectedCity(null);\n        },\n        children: [_jsx(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#333\"\n        }), _jsx(Text, {\n          style: styles.backButtonText,\n          children: \"Ciudades\"\n        })]\n      }), _jsxs(Text, {\n        style: styles.pointsText,\n        children: [\"Puntos: \", userPoints]\n      })]\n    }), _jsx(Text, {\n      style: styles.cityTitle,\n      children: selectedCity\n    }), _jsxs(ScrollView, {\n      style: styles.missionsList,\n      children: [cityData.pending.length > 0 && _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Misiones Pendientes\"\n        }), cityData.pending.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {\n              return handleMissionComplete(mission.id);\n            }\n          }, mission.id);\n        })]\n      }), cityData.expired.length > 0 && _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.completedDivider,\n          children: [_jsx(View, {\n            style: styles.dividerLine\n          }), _jsx(Text, {\n            style: [styles.completedText, {\n              color: '#f44336'\n            }],\n            children: \"Expiradas\"\n          }), _jsx(View, {\n            style: styles.dividerLine\n          })]\n        }), cityData.expired.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {}\n          }, mission.id);\n        })]\n      }), cityData.completed.length > 0 && _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.completedDivider,\n          children: [_jsx(View, {\n            style: styles.dividerLine\n          }), _jsx(Text, {\n            style: styles.completedText,\n            children: \"Completadas\"\n          }), _jsx(View, {\n            style: styles.dividerLine\n          })]\n        }), cityData.completed.map(function (mission) {\n          return _jsx(MissionCard, {\n            mission: mission,\n            onComplete: function onComplete() {}\n          }, mission.id);\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: colors.backgroundGradient[1]\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 45,\n    paddingHorizontal: 20\n  },\n  logoContainer: {\n    position: 'absolute',\n    top: 20,\n    left: 10\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  backButtonText: {\n    fontSize: 16,\n    marginLeft: 5,\n    color: '#333'\n  },\n  cityTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.backgroundGradient[1]\n  },\n  loadingText: {\n    marginTop: 10,\n    color: '#666'\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.backgroundGradient[1]\n  },\n  errorText: {\n    color: colors.danger,\n    textAlign: 'center',\n    padding: 16\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  pointsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#4CAF50'\n  },\n  citiesList: {\n    flex: 1\n  },\n  cityCardContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cityInfo: {\n    flex: 1\n  },\n  cityName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 5\n  },\n  missionCountContainer: {\n    flexDirection: 'column'\n  },\n  missionCount: {\n    fontSize: 14,\n    color: '#666'\n  },\n  expiredCount: {\n    fontSize: 14,\n    color: '#f44336',\n    marginTop: 2\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 2,\n    overflow: 'hidden',\n    position: 'relative'\n  },\n  progressFillCompleted: {\n    height: '100%',\n    backgroundColor: '#4CAF50',\n    position: 'absolute',\n    left: 0\n  },\n  progressFillExpired: {\n    height: '100%',\n    backgroundColor: '#f44336',\n    position: 'absolute'\n  },\n  progressFillPending: {\n    height: '100%',\n    backgroundColor: '#FFA000',\n    position: 'absolute'\n  },\n  missionsList: {\n    flex: 1\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginBottom: 15\n  },\n  completedDivider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#4CAF50'\n  },\n  completedText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n    marginHorizontal: 10,\n    fontSize: 16\n  },\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  completedCard: {\n    opacity: 0.8\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flex: 1\n  },\n  badgeContainer: {\n    alignItems: 'flex-end'\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 15,\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  cardDescription: {\n    color: '#666',\n    marginBottom: 10\n  },\n  cardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  difficulty: {\n    color: '#666',\n    fontSize: 12\n  },\n  points: {\n    color: '#4CAF50',\n    fontWeight: 'bold'\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10\n  },\n  retryButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  },\n  expiredCard: {\n    borderColor: '#f44336',\n    borderWidth: 1\n  },\n  timeRemaining: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 4\n  },\n  expiredTime: {\n    color: '#f44336'\n  },\n  cityGridContainer: {\n    paddingBottom: 20\n  },\n  cityGridRow: {\n    justifyContent: 'space-between',\n    marginBottom: 15\n  },\n  cityGridItem: {\n    flex: 1,\n    marginHorizontal: 5,\n    minWidth: 160,\n    maxWidth: 240\n  },\n  cityCard: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 15,\n    marginBottom: 15,\n    height: 150,\n    justifyContent: 'space-between',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3\n  }\n});\nexport default MissionsScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","ActivityIndicator","Alert","ScrollView","useSelector","useDispatch","supabase","completeMission","Ionicons","useTheme","dispatchCompleteMission","FlatList","useWindowDimensions","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Logo","require","colors","primary","secondary","danger","backgroundGradient","getTimeRemaining","endDate","now","Date","end","diff","getTime","isExpired","text","days","Math","floor","hours","minutes","MissionCard","_ref","mission","onComplete","timeRemaining","end_date","completed","style","styles","card","completedCard","expiredCard","onPress","disabled","children","cardHeader","cardTitle","challenge","title","badgeContainer","badge","backgroundColor","expiredTime","cardDescription","description","cardFooter","difficulty","points","CityCard","_ref2","cityName","totalMissions","completedMissions","expiredMissions","cityCard","cityCardContent","cityInfo","missionCountContainer","missionCount","expiredCount","name","size","color","progressBar","progressFillCompleted","width","progressFillExpired","left","progressFillPending","MissionsScreen","_ref3","route","_ref4","params","journeyId","_useSelector","state","auth","user","_useState","_useState2","_slicedToArray","missions","setMissions","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","userPoints","setUserPoints","_useState9","_useState10","selectedCity","setSelectedCity","_useState11","_useState12","cityMissions","setCityMissions","dispatch","theme","_useWindowDimensions","cardWidth","cardMargin","numColumns","fetchMissions","_ref5","_asyncToGenerator","userId","_yield$supabase$from$","from","select","eq","order","ascending","journeys","data","journeysError","length","allMissions","flatMap","journey","journeys_missions","filter","jm","map","_journey$cities","id","cities","start_date","challenges","missionsByCity","forEach","pending","expired","push","console","_x","_x2","_x3","_x4","_x5","apply","arguments","handleCompleteMission","_ref6","missionId","prev","updatedMissions","_objectSpread","newCityMissions","Object","keys","find","m","alert","_x6","handleMissionComplete","loadingContainer","loadingText","errorContainer","errorText","retryButton","retryButtonText","container","header","pointsText","entries","keyExtractor","_ref7","_ref8","columnWrapperStyle","justifyContent","contentContainerStyle","paddingBottom","renderItem","_ref9","item","_item","margin","cityData","backButton","backButtonText","cityTitle","missionsList","sectionTitle","completedDivider","dividerLine","completedText","create","flex","padding","flexDirection","alignItems","paddingVertical","paddingHorizontal","logoContainer","position","top","fontSize","marginLeft","fontWeight","marginBottom","marginTop","textAlign","citiesList","height","borderRadius","overflow","marginVertical","marginHorizontal","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","opacity","borderColor","borderWidth","cityGridContainer","cityGridRow","cityGridItem","minWidth","maxWidth"],"sources":["C:/Users/migue/miguel/TravelQuest/src/screens/main/MissionsScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, Alert, ScrollView } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../features/store';\nimport { supabase } from '../../services/supabase';\nimport { completeMission } from '../../services/pointsService';\nimport { RouteProp } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card, ProgressBar, useTheme, Surface } from 'react-native-paper';\nimport { JourneyMission } from '../../types/journey';\nimport { completeMission as dispatchCompleteMission } from '../../features/journeySlice';\nimport { FlatList } from 'react-native';\nimport { useWindowDimensions } from 'react-native';\n\nconst Logo = require('../../assets/icons/logo.png');\n\nconst colors = {\n  primary: '#005F9E',\n  secondary: '#FFFFFF',\n  danger: '#D32F2F',\n  backgroundGradient: ['#005F9E', '#F0F0F0'],\n};\n\ntype MissionsScreenRouteProp = RouteProp<{\n  Missions: {\n    journeyId: string;\n    challenges: JourneyMission[];\n  };\n}, 'Missions'>;\n\ninterface MissionsScreenProps {\n  route: MissionsScreenRouteProp;\n}\n\ninterface CityMissions {\n  [cityName: string]: {\n    completed: JourneyMission[];\n    pending: JourneyMission[];\n    expired: JourneyMission[];\n  };\n}\n\ninterface Journey {\n  id: string;\n  description: string;\n  created_at: string;\n  start_date: string;\n  end_date: string;\n  cities?: {\n    name: string;\n  };\n  journeys_missions: {\n    id: string;\n    completed: boolean;\n    challengeId: string;\n    start_date: string;\n    end_date: string;\n    challenges: {\n      id: string;\n      title: string;\n      description: string;\n      difficulty: string;\n      points: number;\n    };\n  }[];\n}\n\nconst getTimeRemaining = (endDate: string) => {\n  const now = new Date();\n  const end = new Date(endDate);\n  const diff = end.getTime() - now.getTime();\n  \n  if (diff <= 0) {\n    return {\n      isExpired: true,\n      text: 'Tiempo expirado'\n    };\n  }\n\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n\n  if (days > 0) {\n    return {\n      isExpired: false,\n      text: `${days} dÃ­as restantes`\n    };\n  } else if (hours > 0) {\n    return {\n      isExpired: false,\n      text: `${hours} horas restantes`\n    };\n  } else {\n    return {\n      isExpired: false,\n      text: `${minutes} minutos restantes`\n    };\n  }\n};\n\nconst MissionCard = ({ mission, onComplete }: { mission: JourneyMission; onComplete: () => void }) => {\n  const timeRemaining = getTimeRemaining(mission.end_date);\n  const isExpired = timeRemaining.isExpired && !mission.completed;\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.card, \n        mission.completed && styles.completedCard,\n        isExpired && styles.expiredCard\n      ]}\n      onPress={() => !mission.completed && !isExpired && onComplete()}\n      disabled={mission.completed || isExpired}\n    >\n      <View style={styles.cardHeader}>\n        <Text style={styles.cardTitle}>{mission.challenge.title}</Text>\n        <View style={styles.badgeContainer}>\n          <Text style={[\n            styles.badge, \n            { backgroundColor: mission.completed ? '#4CAF50' : isExpired ? '#f44336' : '#FFA000' }\n          ]}>\n            {mission.completed ? 'Completada' : isExpired ? 'Expirada' : 'Pendiente'}\n          </Text>\n          <Text style={[\n            styles.timeRemaining,\n            isExpired && styles.expiredTime\n          ]}>\n            {timeRemaining.text}\n          </Text>\n        </View>\n      </View>\n      <Text style={styles.cardDescription}>{mission.challenge.description}</Text>\n      <View style={styles.cardFooter}>\n        <Text style={styles.difficulty}>Dificultad: {mission.challenge.difficulty}</Text>\n        <Text style={styles.points}>{mission.challenge.points} puntos</Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst CityCard = ({ cityName, totalMissions, completedMissions, expiredMissions, onPress }: { \n  cityName: string; \n  totalMissions: number;\n  completedMissions: number;\n  expiredMissions: number;\n  onPress: () => void;\n}) => (\n  <TouchableOpacity style={styles.cityCard} onPress={onPress}>\n    <View style={styles.cityCardContent}>\n      <View style={styles.cityInfo}>\n        <Text style={styles.cityName}>{cityName}</Text>\n        <View style={styles.missionCountContainer}>\n          <Text style={styles.missionCount}>\n            {completedMissions}/{totalMissions} misiones completadas\n          </Text>\n          {expiredMissions > 0 && (\n            <Text style={styles.expiredCount}>\n              {expiredMissions} misiones expiradas\n            </Text>\n          )}\n        </View>\n      </View>\n      <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\n    </View>\n    <View style={styles.progressBar}>\n      <View \n        style={[\n          styles.progressFillCompleted, \n          { width: `${(completedMissions / totalMissions) * 100}%` }\n        ]} \n      />\n      <View \n        style={[\n          styles.progressFillExpired, \n          { \n            width: `${(expiredMissions / totalMissions) * 100}%`,\n            left: `${(completedMissions / totalMissions) * 100}%`\n          }\n        ]} \n      />\n      <View \n        style={[\n          styles.progressFillPending, \n          { \n            width: `${((totalMissions - completedMissions - expiredMissions) / totalMissions) * 100}%`,\n            left: `${((completedMissions + expiredMissions) / totalMissions) * 100}%`\n          }\n        ]} \n      />\n    </View>\n  </TouchableOpacity>\n);\n\nconst MissionsScreen = ({ route }: MissionsScreenProps) => {\n  const { journeyId } = route.params || {};\n  const { user } = useSelector((state: RootState) => state.auth);\n  const [missions, setMissions] = useState<JourneyMission[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [userPoints, setUserPoints] = useState(0);\n  const [selectedCity, setSelectedCity] = useState<string | null>(null);\n  const [cityMissions, setCityMissions] = useState<CityMissions>({});\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const { width } = useWindowDimensions();\n  const cardWidth = width * 0.17;\n  const cardMargin = width * 0.02;\n  const numColumns = Math.floor(width / (cardWidth + cardMargin * 2)) || 1;\n\n\n  interface JourneyMissionWithCity extends JourneyMission {\n    cityName: string;\n  }\n  \n  const fetchMissions = async (\n    userId: string,\n    setCityMissions: React.Dispatch<React.SetStateAction<CityMissions>>,\n    setMissions: React.Dispatch<React.SetStateAction<JourneyMissionWithCity[]>>,\n    setError: React.Dispatch<React.SetStateAction<string | null>>,\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    try {\n      const { data: journeys, error: journeysError } = await supabase\n        .from('journeys')\n        .select(`\n          id,\n          description,\n          created_at,\n          start_date,\n          end_date,\n          userId,\n          cities ( name ),\n          journeys_missions (\n            id,\n            completed,\n            userId,\n            challengeId,\n            start_date,\n            end_date,\n            challenges (\n              id,\n              title,\n              description,\n              difficulty,\n              points\n            )\n          )\n        `)\n        .eq('userId', userId)\n        .order('created_at', { ascending: false });\n  \n      if (journeysError) throw journeysError;\n      if (!journeys || journeys.length === 0) {\n        setError('No hay viajes disponibles');\n        setLoading(false);\n        return;\n      }\n  \n      const allMissions: JourneyMissionWithCity[] = journeys.flatMap((journey: Journey) =>\n        journey.journeys_missions\n          .filter((jm: any) => jm.userId === userId)\n          .map((jm: any): JourneyMissionWithCity => ({\n            id: jm.id,\n            completed: jm.completed,\n            userId: jm.userId,\n            cityName: journey.cities?.name || 'Ciudad Desconocida',\n            start_date: jm.start_date || journey.start_date,\n            end_date: jm.end_date || journey.end_date,\n            challenge: {\n              id: jm.challenges.id,\n              title: jm.challenges.title,\n              description: jm.challenges.description,\n              difficulty: jm.challenges.difficulty,\n              points: jm.challenges.points,\n            },            \n          }))\n      );           \n  \n      const missionsByCity: CityMissions = {};\n      allMissions.forEach((mission) => {\n        if (!missionsByCity[mission.cityName]) {\n          missionsByCity[mission.cityName] = { completed: [], pending: [], expired: [] };\n        }\n        const timeRemaining = getTimeRemaining(mission.end_date);\n        if (mission.completed) missionsByCity[mission.cityName].completed.push(mission);\n        else if (timeRemaining.isExpired) missionsByCity[mission.cityName].expired.push(mission);\n        else missionsByCity[mission.cityName].pending.push(mission);\n      });\n  \n      setCityMissions(missionsByCity);\n      setMissions(allMissions);\n    } catch (error) {\n      console.error('Error fetching missions:', error);\n      setError('Error al cargar las misiones');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n\n  useEffect(() => {\n    if (user?.id) {\n      fetchMissions(user.id, setCityMissions, setMissions, setError, setLoading);\n    }\n  }, [journeyId, user?.id]);\n  \n\n  const handleCompleteMission = async (missionId: string) => {\n    if (!user?.id) return;\n\n    try {\n      const points = await completeMission(missionId, user.id);\n      setUserPoints(prev => prev + points);\n\n      // Actualizar el estado local\n      const updatedMissions = missions.map(mission =>\n        mission.id === missionId ? { ...mission, completed: true } : mission\n      );\n      setMissions(updatedMissions);\n\n      // Actualizar cityMissions\n      const newCityMissions = { ...cityMissions };\n      Object.keys(newCityMissions).forEach(cityName => {\n        const mission = newCityMissions[cityName].pending.find(m => m.id === missionId);\n        if (mission) {\n          newCityMissions[cityName].pending = newCityMissions[cityName].pending.filter(m => m.id !== missionId);\n          newCityMissions[cityName].completed.push({ ...mission, completed: true });\n        }\n      });\n      setCityMissions(newCityMissions);\n\n      Alert.alert(\n        'Â¡MisiÃ³n Completada!',\n        `Has ganado ${points} puntos por completar esta misiÃ³n.`\n      );\n    } catch (error) {\n      console.error('Error completing mission:', error);\n      Alert.alert(\n        'Error',\n        'No se pudo completar la misiÃ³n. Por favor, intenta de nuevo.'\n      );\n    }\n  };\n\n  const handleMissionComplete = (missionId: string) => {\n    handleCompleteMission(missionId);\n    dispatch(dispatchCompleteMission(missionId));\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\n        <Text style={styles.loadingText}>Cargando misiones...</Text>\n      </View>\n    );\n  }\n\n  if (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorText}>{error}</Text>\n        <TouchableOpacity\n        style={styles.retryButton}\n        onPress={() => {\n          if (user?.id) {\n            fetchMissions(user.id, setCityMissions, setMissions, setError, setLoading);\n          }\n        }}\n      >\n        <Text style={styles.retryButtonText}>Reintentar</Text>\n      </TouchableOpacity>\n\n      </View>\n    );\n  }\n\n  if (!selectedCity) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Tus Ciudades</Text>\n          <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\n        </View>\n        <FlatList\n          data={Object.entries(cityMissions)}\n          keyExtractor={([cityName]) => cityName}\n          numColumns={numColumns}\n          columnWrapperStyle={{ justifyContent: 'flex-start' }}\n          contentContainerStyle={{ paddingBottom: 20 }}\n          renderItem={({ item }) => {\n            const [cityName, missions] = item;\n            return (\n              <View style={{ width: cardWidth, margin: cardMargin }}>\n                <CityCard\n                  cityName={cityName}\n                  totalMissions={missions.completed.length + missions.pending.length + missions.expired.length}\n                  completedMissions={missions.completed.length}\n                  expiredMissions={missions.expired.length}\n                  onPress={() => setSelectedCity(cityName)}\n                />\n              </View>\n            );\n          }}\n        />\n      </View>\n    );\n  }\n\n  const cityData = cityMissions[selectedCity];\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity \n          style={styles.backButton} \n          onPress={() => setSelectedCity(null)}\n        >\n          <Ionicons name=\"arrow-back\" size={24} color=\"#333\" />\n          <Text style={styles.backButtonText}>Ciudades</Text>\n        </TouchableOpacity>\n        <Text style={styles.pointsText}>Puntos: {userPoints}</Text>\n      </View>\n      \n      <Text style={styles.cityTitle}>{selectedCity}</Text>\n      \n      <ScrollView style={styles.missionsList}>\n        {cityData.pending.length > 0 && (\n          <>\n            <Text style={styles.sectionTitle}>Misiones Pendientes</Text>\n            {cityData.pending.map(mission => (\n              <MissionCard\n                key={mission.id}\n                mission={mission}\n                onComplete={() => handleMissionComplete(mission.id)}\n              />\n            ))}\n          </>\n        )}\n\n        {cityData.expired.length > 0 && (\n          <>\n            <View style={styles.completedDivider}>\n              <View style={styles.dividerLine} />\n              <Text style={[styles.completedText, { color: '#f44336' }]}>Expiradas</Text>\n              <View style={styles.dividerLine} />\n            </View>\n            {cityData.expired.map(mission => (\n              <MissionCard\n                key={mission.id}\n                mission={mission}\n                onComplete={() => {}}\n              />\n            ))}\n          </>\n        )}\n\n        {cityData.completed.length > 0 && (\n          <>\n            <View style={styles.completedDivider}>\n              <View style={styles.dividerLine} />\n              <Text style={styles.completedText}>Completadas</Text>\n              <View style={styles.dividerLine} />\n            </View>\n            {cityData.completed.map(mission => (\n              <MissionCard\n                key={mission.id}\n                mission={mission}\n                onComplete={() => {}}\n              />\n            ))}\n          </>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: colors.backgroundGradient[1],\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 45,\n    paddingHorizontal: 20,\n  },\n  logoContainer: {\n    position: 'absolute',\n    top: 20,\n    left: 10,\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  backButtonText: {\n    fontSize: 16,\n    marginLeft: 5,\n    color: '#333',\n  },\n  cityTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.backgroundGradient[1],\n  },\n  loadingText: {\n    marginTop: 10,\n    color: '#666',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.backgroundGradient[1],\n  },\n  errorText: {\n    color: colors.danger,\n    textAlign: 'center',\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  pointsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#4CAF50',\n  },\n  citiesList: {\n    flex: 1,\n  },\n  cityCardContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  cityInfo: {\n    flex: 1,\n  },\n  cityName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 5,\n  },\n  missionCountContainer: {\n    flexDirection: 'column',\n  },\n  missionCount: {\n    fontSize: 14,\n    color: '#666',\n  },\n  expiredCount: {\n    fontSize: 14,\n    color: '#f44336',\n    marginTop: 2,\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#E0E0E0',\n    borderRadius: 2,\n    overflow: 'hidden',\n    position: 'relative',\n  },\n  progressFillCompleted: {\n    height: '100%',\n    backgroundColor: '#4CAF50',\n    position: 'absolute',\n    left: 0,\n  },\n  progressFillExpired: {\n    height: '100%',\n    backgroundColor: '#f44336',\n    position: 'absolute',\n  },\n  progressFillPending: {\n    height: '100%',\n    backgroundColor: '#FFA000',\n    position: 'absolute',\n  },\n  missionsList: {\n    flex: 1,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#666',\n    marginBottom: 15,\n  },\n  completedDivider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20,\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#4CAF50',\n  },\n  completedText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n    marginHorizontal: 10,\n    fontSize: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 15,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  completedCard: {\n    opacity: 0.8,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flex: 1,\n  },\n  badgeContainer: {\n    alignItems: 'flex-end',\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 15,\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  cardDescription: {\n    color: '#666',\n    marginBottom: 10,\n  },\n  cardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  difficulty: {\n    color: '#666',\n    fontSize: 12,\n  },\n  points: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n  },\n  retryButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  expiredCard: {\n    borderColor: '#f44336',\n    borderWidth: 1,\n  },\n  timeRemaining: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 4,\n  },\n  expiredTime: {\n    color: '#f44336',\n  },\n  cityGridContainer: {\n    paddingBottom: 20,\n  },\n  cityGridRow: {\n    justifyContent: 'space-between',\n    marginBottom: 15,\n  },\n  cityGridItem: {\n    flex: 1,\n    marginHorizontal: 5,\n    minWidth: 160,\n    maxWidth: 240,\n  },\n  cityCard: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 15,\n    marginBottom: 15,\n    height: 150, // por ejemplo\n    justifyContent: 'space-between',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  \n});\n\n\nexport default MissionsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}